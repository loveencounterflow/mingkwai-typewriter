// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, PD, XE, alert, assign, badge, contract, debug, delegate, echo, emit, help, info, jr, listen_to, listen_to_all, log, remote, rpr, urge, warn, whisper;

  /* TAINT consider using e.g. https://www.npmjs.com/package/combokeys */
  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '明快打字机/KEYS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  jr = JSON.stringify;

  assign = Object.assign;

  //...........................................................................................................
  ({remote} = require('electron'));

  PD = require('pipedreams');

  XE = remote.require('./xemitter');

  XE.listen_to_all(function(key, d) {
    return whisper('µ99823', 'ime', jr(d));
  });

  ({emit, delegate, listen_to_all, listen_to, contract} = XE);

  // listen_to_all ( key, d ) -> debug '22722', d

  //-----------------------------------------------------------------------------------------------------------
  this.keycodes = require('./BLAIDDDRWG-keycodes');

  //-----------------------------------------------------------------------------------------------------------
  this._preprocess_key_up_or_down_event = (S, event) => {
    var code, label, move, name;
    // code      = event.keyCode ? event.which
    code = event.which;
    name = [];
    if (code === 18 || event.altKey) {
      //.........................................................................................................
      name.push('alt');
    }
    if (code === 225 || event.originalEvent.getModifierState("AltGraph")) {
      name.push('altgr');
    }
    if (code === 17 || event.ctrlKey) {
      name.push('ctrl');
    }
    if (code === 16 || event.shiftKey) {
      name.push('shift');
    }
    // name.push 'capslock'  if code is   0
    label = this.keycodes.get(code);
    if (label !== 'alt' && label !== 'altgr' && label !== 'ctrl' && label !== 'shift') {
      name.push(label != null ? label : code);
    }
    name = name.join('+');
    //.........................................................................................................
    move = (function() {
      switch (event.type) {
        case 'keyup':
          return 'up';
        case 'keydown':
          return 'down';
        default:
          return null;
      }
    })();
    //.........................................................................................................
    return {name, code, move};
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.$on_key_down = function(S) {
    return (event) => {
      /* thx to https://stackoverflow.com/a/22029109/7568091 */
      var axis, chr, direction, handler, kind, location, oe, ref, slot, uie;
      oe = event.originalEvent;
      chr = oe.key;
      slot = oe.code;
      //.........................................................................................................
      location = (function() {
        switch (oe.location) {
          case KeyboardEvent.DOM_KEY_LOCATION_STANDARD:
            return 'standard';
          case KeyboardEvent.DOM_KEY_LOCATION_LEFT:
            return 'left';
          case KeyboardEvent.DOM_KEY_LOCATION_RIGHT:
            return 'right';
          case KeyboardEvent.DOM_KEY_LOCATION_NUMPAD:
            return 'numpad';
          default:
            return null;
        }
      })();
      //.........................................................................................................
      kind = (function() {
        switch (slot) {
          case 'ArrowUp':
          case 'ArrowDown':
          case 'PageUp':
          case 'PageDown':
          case 'ArrowLeft':
          case 'ArrowRight':
          case 'Home':
          case 'End':
            return 'navigation';
          case 'Space':
          case 'Tab':
          case 'Return':
          case 'Enter':
            return 'spacing';
          default:
            return null;
        }
      })();
      //.........................................................................................................
      axis = (function() {
        switch (slot) {
          case 'ArrowUp':
          case 'ArrowDown':
          case 'PageUp':
          case 'PageDown':
            return 'vertical';
          case 'ArrowLeft':
          case 'ArrowRight':
            return 'horizontal';
          case 'Home':
          case 'End':
            return 'either';
          default:
            return null;
        }
      })();
      //.........................................................................................................
      direction = (function() {
        switch (slot) {
          case 'ArrowLeft':
            return 'left';
          case 'ArrowRight':
            return 'right';
          case 'ArrowUp':
          case 'PageUp':
            return 'up';
          case 'ArrowDown':
          case 'PageDown':
            return 'down';
          default:
            return null;
        }
      })();
      //.........................................................................................................
      /* UIE: User Interaction Event */
      uie = {chr, slot, location, kind, axis, direction};
      uie = assign(uie, {S, event}, this._preprocess_key_up_or_down_event(S, event));
      //.........................................................................................................
      if ((ref = uie.name) === 'alt' || ref === 'altgr' || ref === 'ctrl' || ref === 'shift' || ref === 'capslock') {
        S.kblevels.prv_down = uie.name;
      } else {
        S.kblevels.prv_down = null;
      }
      if ((handler = this._get_key_handler(uie)) != null) {
        //.........................................................................................................
        return handler(uie);
      }
      return null;
    };
  };

  /*
  'ArrowLeft':  [ 'navigation', 'horizontal', 'left' ]
  'ArrowRight': [ 'navigation', 'horizontal', 'right' ]
  'ArrowUp':    [ 'navigation', 'vertical', 'up' ]
  'ArrowDown':  [ 'navigation', 'vertical', 'down' ]
  'PageUp':     [ 'navigation', 'vertical', 'up' ]
  'PageDown':   [ 'navigation', 'vertical', 'down' ]
  'Home':       [ 'navigation', 'vertical', 'horizontal', 'home' ]
  'End':        [ 'navigation', 'vertical', 'horizontal', 'end' ]
  */
  //-----------------------------------------------------------------------------------------------------------
  this.$on_key_up = function(S) {
    return (event) => {
      var key, ref, toggle;
      key = this._preprocess_key_up_or_down_event(S, event);
      //.........................................................................................................
      if (((ref = key.name) === 'alt' || ref === 'altgr' || ref === 'ctrl' || ref === 'shift' || ref === 'capslock') && S.kblevels.prv_down === key.name) {
        S.kblevels[key.name] = toggle = !S.kblevels[key.name];
        key.toggle = toggle ? 'on' : 'off';
        emit('KEYS/kblevels/change', {S, key});
      }
      S.kblevels.prv_down = null;
      //.........................................................................................................
      emit('KEYS/key/up', {S, key});
      return true;
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$on_other = function(S) {
    return (event) => {
      // info '77363', event.type, event.originalEvent.data
      return true;
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this._bindings = [];

  //-----------------------------------------------------------------------------------------------------------
  this.register = function(key, value, handler) {
    if ((this._get_key_handler({key, value})) != null) {
      throw new Error(`facet ${rpr(key)} / ${rpr(value)} already registered`);
    }
    // continue if key is 'event'
    this._bindings.push([key, value, handler]);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_key_handler = function(uie) {
    var handler, i, key, len, ref, value;
    ref = this._bindings;
    for (i = 0, len = ref.length; i < len; i++) {
      [key, value, handler] = ref[i];
      if (uie[key] === value) {
        return handler;
      }
    }
    return null;
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  listen_to('KEYS/kblevels/change', this, function({S, key}) {
    return whisper('KEYS/kblevels/change', jr(key));
  });

  // #-----------------------------------------------------------------------------------------------------------
  // listen_to 'KEYS/key/down', @, ( { S, key, } ) ->
  //   whisper 'KEYS/key/down', jr key

  // #-----------------------------------------------------------------------------------------------------------
  // listen_to 'KEYS/key/up', @, ( { S, key, } ) ->
  //   whisper 'KEYS/key/up', jr key

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.syphon_key_and_mouse_events = function(S, jquery_element) {
    jquery_element.on('keydown', this.$on_key_down(S));
    jquery_element.on('keyup', this.$on_key_up(S));
    jquery_element.on('beforeinput', this.$on_other(S));
    jquery_element.on('input', this.$on_other(S));
    jquery_element.on('compositionstart', this.$on_other(S));
    jquery_element.on('compositionupdate', this.$on_other(S));
    return jquery_element.on('compositionend ', this.$on_other(S));
  };

  /*
  document.onkeypress = (e) ->
    cid = parseInt ( e[ 'keyIdentifier' ].replace /^U\+/, '' ), 16
    cid = 0x3013 if ( CND.type_of cid ) isnt 'number'
    debug '©sz3Ku', 'keyIdentifier',    e[ 'keyIdentifier'    ], rpr String.fromCodePoint cid
    debug '©hRgmv', 'getModifierState "Alt"       ', e.getModifierState "Alt"
    debug '©hRgmv', 'getModifierState "AltGraph"  ', e.getModifierState "AltGraph"
    debug '©hRgmv', 'getModifierState "CapsLock"  ', e.getModifierState "CapsLock"
    debug '©hRgmv', 'getModifierState "Control"   ', e.getModifierState "Control"
    debug '©hRgmv', 'getModifierState "Fn"        ', e.getModifierState "Fn"
    debug '©hRgmv', 'getModifierState "FnLock"    ', e.getModifierState "FnLock"
    debug '©hRgmv', 'getModifierState "Hyper"     ', e.getModifierState "Hyper"
    debug '©hRgmv', 'getModifierState "Meta"      ', e.getModifierState "Meta"
    debug '©hRgmv', 'getModifierState "NumLock"   ', e.getModifierState "NumLock"
    debug '©hRgmv', 'getModifierState "OS"        ', e.getModifierState "OS"
    debug '©hRgmv', 'getModifierState "ScrollLock"', e.getModifierState "ScrollLock"
    debug '©hRgmv', 'getModifierState "Shift"     ', e.getModifierState "Shift"
    debug '©hRgmv', 'getModifierState "Super"     ', e.getModifierState "Super"
    debug '©hRgmv', 'getModifierState "Symbol"    ', e.getModifierState "Symbol"
    debug '©hRgmv', 'getModifierState "SymbolLock"', e.getModifierState "SymbolLock"

*/
/*

'key' events
* move / flank / gesture
  * down / press
  * up / release
  * hold / repeat (single glyph and DNS only)
  * on  (toggles only)
  * off (toggles only)
* kind
  * glyph (printable character)
    * single
    * partial (e.g. ´e -> é)
  * DNS (deletion, navigation, spacing)
    * deletion (backspace, delete)
    * navigation (left, right, up, down, page-down, home)
    * spacing (space, tab, return, enter)
    * IME (input method e.g. for East Asian languages)
    * insertion
    * correction
    * result
  * KBL (keyboard levels, a.k.a. modifiers)
    * chorded (alt, shift, ctrl)
    * toggles (capslock, numlock, scrolllock, insert)

* can we catch all DOM events?

* cursor styling in input field? -> caret-color
* text input, textarea or contenteditable? -> contenteditable allows styling, so this
* difference between jquery `.on`, `.on` methods? -> new vs. old
* does Chrome have a beforeinput event? -> OK with update to Electron 3
* why is the data attribute not used? -> OK with update to Electron 3

 */

}).call(this);

//# sourceMappingURL=keys.js.map
