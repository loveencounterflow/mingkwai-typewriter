// Generated by CoffeeScript 2.3.2
(function() {
  //###########################################################################################################
  var CND, IME, PD, STATE, T, XE, alert, badge, debug, help, info, inspect, rpr, urge, warn, whisper;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  inspect = (require('util')).inspect;

  // log                       = ( P... ) -> process.stdout.write ( rpr P ) + '\n'
  // TRAP                      = require 'mousetrap'
  // { app, globalShortcut, }  = require 'electron'
  // PTVR                      = require '../lib/lib/ptv-reader'
  IME = require('../lib/ime');

  STATE = require('../lib/state');

  T = require('../lib/templates');

  /* https://github.com/sindresorhus/electron-unhandled */
  require('../lib/exception-handler');

  //...........................................................................................................
  // { remote, }               = require 'electron'
  PD = require('pipedreams');

  XE = require('../lib/xemitter');

  XE.listen_to_all(function(key, event) {
    return debug('28823', key, event.key); // ( k for k of event )
  });

  
  //-----------------------------------------------------------------------------------------------------------
  XE.listen_to('KEYS/kblevels/change', this, function({S, key}) {
    /* TAINT bind keys using configuration */
    var name, toggle;
    ({name, toggle} = key);
    if (name === 'alt') {
      //.........................................................................................................
      S.bind_left = toggle === 'on';
    }
    if (name === 'altgr') {
      S.bind_right = toggle === 'on';
    }
    //.........................................................................................................
    if (S.bind_left) {
      ($('lbbar')).show();
    } else {
      (/* TAINT */$('lbbar')).hide();
    }
    if (/* TAINT */S.bind_right) {
      ($('rbbar')).show();
    } else {
      (/* TAINT */$('rbbar')).hide();
    }
//.........................................................................................................
/* TAINT */    return null;
  });

  //-----------------------------------------------------------------------------------------------------------
  this.on_add_selection = function(uie) {
    var S, chr, ref, ref1;
    ({S} = uie);
    debug('44545', 'selected row nr:', S.row_idx + 1);
    chr = (ref = S.rows) != null ? (ref1 = ref[S.row_idx]) != null ? ref1.glyph : void 0 : void 0;
    XE.emit('IME/input/add', {
      S,
      row_idx: S.row_idx,
      chr
    });
    uie.event.preventDefault();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  XE.listen_to('IME/input/add', this, function({S, row_idx, chr}) {
    debug("update output area");
    debug("reset candidates area, input box");
    /* TAINT remove buffer */
    S.buffer.push(chr);
    // ( $ '#output-area .inbox' ).text S.buffer.join ''
    S.codemirror.editor.replaceSelection(chr);
    ($('#text-input')).text('');
    return null;
  });

  //-----------------------------------------------------------------------------------------------------------
  this.on_scroll = (S, event) => {
    var delta_px;
    // if event.originalEvent.deltaY < 0 then  @navigate_vertically S, -1
    // else                                    @navigate_vertically S, +1
    if (S.ignore_next_scroll_events >= 0) {
      S.ignore_next_scroll_events += -1;
      // debug 'scroll', 'discard'
      return true;
    }
    S.ignore_next_scroll_events = 1;
    delta_px = (S.scroller.scrollTop() - S.scroller_last_top) / S.candidates_tr_height;
    S.scroller_last_top = S.scroller.scrollTop();
    // debug 'scroll', delta_px
    // CND.dir event
    // return false if delta_px is 0
    if (delta_px < 0) {
      this.navigate_vertically(S, -1);
    } else {
      this.navigate_vertically(S, +1);
    }
    return false;
  };

  this.on_wheel = (S, event) => {
    if (event.originalEvent.deltaY < 0) {
      this.navigate_vertically(S, -1);
    } else {
      this.navigate_vertically(S, +1);
    }
    return false;
  };

  this.on_vertical_navigation = function(uie) {
    var delta;
    switch (uie.name) {
      case 'up':
        delta = -1;
        break;
      case 'down':
        delta = +1;
        break;
      case 'page-up':
        delta = -10;
        break;
      case 'page-down':
        delta = +10;
    }
    this.navigate_vertically(uie.S, delta);
    uie.event.preventDefault();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.navigate_vertically = function(S, delta) {
    var corrected_row_idx, delta_px, element, element_offset, new_row_idx;
    new_row_idx = S.row_idx + delta;
    corrected_row_idx = Math.max(0, new_row_idx);
    corrected_row_idx = Math.min(S.rows.length - 1, corrected_row_idx);
    //.........................................................................................................
    XE.emit('WINDOW/scroll/vertical', {
      S,
      from: S.row_idx + 1,
      via: new_row_idx + 1,
      to: corrected_row_idx + 1
    });
    //.........................................................................................................
    S.row_idx = corrected_row_idx;
    element = $('#candidates tr').eq(S.row_idx);
    if (((element != null ? element.offset : void 0) != null) && ((element_offset = element.offset()) != null)) {
      delta_px = element_offset.top - S.shade_offset_top;
      S.scroller_last_top = S.scroller.scrollTop() + delta_px;
      S.ignore_next_scroll_events += +1;
      S.scroller.scrollTop(S.scroller_last_top);
    }
    // ( ( $ element ).find '.glyph' ).css 'font-size', '125%'
    return null;
  };

  // #-----------------------------------------------------------------------------------------------------------
  // XE.listen_to 'WINDOW/scroll/vertical', @, ({ S, from, via, to, }) ->
  //   whisper "WINDOW/scroll/vertical #{from} -> #{via} -> #{to}"

  //-----------------------------------------------------------------------------------------------------------
  this.on_input = async function(S, event) {
    var columns, i, idx, key, len, ref, row, rows, self;
    self = $(this);
    await IME.fetch_rows(S, S.input.text());
    rows = [];
    columns = ['short_iclabel', 'glyph', 'value'];
    ref = S.rows;
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      row = ref[idx];
      rows.push(T.get_row_html([
        ['nr',
        idx + 1],
        ...((function() {
          var j,
        len1,
        results;
          results = [];
          for (j = 0, len1 = columns.length; j < len1; j++) {
            key = columns[j];
            results.push([key,
        row[key]]);
          }
          return results;
        })())
      ]));
    }
    rows = rows.join('\n');
    ($('#candidates tr')).remove();
    ($('#candidates tbody')).append(rows);
    ($('#qdt')).text(S.qdt);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.init = function() {
    var S;
    //.........................................................................................................
    /* Instantiate state, add important UI elements */
    S = STATE.new();
    S.candidates = $('#candidates');
    S.shade_offset_top = ($('shade.foreground')).offset().top;
    S.input = $('#text-input');
    S.scroller = $('scroller');
    //.........................................................................................................
    /* Make sure focus is on input element */
    ($('#text-input')).focus();
    //.........................................................................................................
    /* TAINT temporary; will use KB event, icon, dedicated method for this */
    /* Switch focus on click on editor */
    ($('topbar content')).on('click', (event) => {
      var property;
      if (S.codemirror.is_enlarged) {
        property = {
          'height': ($('topbar content')).css('min-height')
        };
      } else {
        property = {
          'height': ($('topbar content')).css('max-height')
        };
      }
      S.codemirror.is_enlarged = !S.codemirror.is_enlarged;
      return ($('topbar content')).animate(property, 100);
    });
    //.........................................................................................................
    /* Register key and mouse events */
    // KEYS.syphon_key_and_mouse_events S, $ '#text-input'
    // KEYS.register 'axis', 'vertical',     ( uie )   => @on_vertical_navigation  uie
    // KEYS.register 'slot', 'Enter',        ( uie )   => @on_add_selection        uie
    S.scroller.on('wheel', (event) => {
      return this.on_wheel(S, event);
    });
    S.scroller.on('scroll', (event) => {
      return this.on_scroll(S, event);
    });
    S.input.on('input', (event) => {
      return this.on_input(S, event);
    });
    /* use event for this? */
    S.scroller_last_top = S.scroller.scrollTop();
    //.........................................................................................................
    /* Measure table row height, adjust shade */
    S.candidates_tr_height = ($('#candidates tr')).height();
    ($('shade')).height(S.candidates_tr_height * 1.1);
    //.........................................................................................................
    /* Initialize KBLevels (partially) */
    XE.emit('KEYS/kblevels/change', {
      S,
      key: {
        name: 'alt',
        toggle: (S.kblevels.alt ? 'on' : 'off')
      }
    });
    XE.emit('KEYS/kblevels/change', {
      S,
      key: {
        name: 'altgr',
        toggle: (S.kblevels.altgr ? 'on' : 'off')
      }
    });
    //.........................................................................................................
    /* Initialize CodeMirror */
    S.codemirror.editor = CodeMirror.fromTextArea(($('#codemirror'))[0], S.codemirror.settings);
    // S.codemirror.editor.replaceSelection 'this is the editor'
    S.codemirror.editor.setSize(null, '100%');
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  $(init.bind(this));

}).call(this);

//# sourceMappingURL=ops.js.map
