{
  "version": 3,
  "file": "app.js",
  "sourceRoot": "..",
  "sources": [
    "src/app.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/APP'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nPATH                      = require 'path'\nFS                        = require 'fs'\nURL                       = require 'url'\ninspect                   = ( require 'util' ).inspect\nlog                       = ( P... ) -> process.stdout.write ( rpr P ) + '\\n'\n# { app, globalShortcut, }  = require 'electron'\nwindow                    = null\n# log Object.keys require 'electron'\n{ app\n  BrowserWindow }         = require 'electron'\nTEMPLATES                 = require './templates'\n{ jr, }                   = CND\n#...........................................................................................................\npage_html_path            = PATH.resolve PATH.join __dirname, '../public/main.html'\n### keep a module-global reference to main window to prevent GC from collecting it as per\nhttps://youtu.be/iVdXOrtdHvA?t=713 ###\nmain_window               = null\n### module-global configuration and editor state object ###\n### OBS this instance of `S` is *not* shared with renderer process and can only be used to read presets ###\nS                         = require './settings'\n\n#-----------------------------------------------------------------------------------------------------------\n@write_page_source = ->\n  ### Write out the HTML of the main page; this is strictly only needed when template has changed, which we\n  maybe should detect in the future: ###\n  page_source = TEMPLATES.main_2()\n  # page_source = TEMPLATES.minimal()\n  FS.writeFileSync page_html_path, page_source\n  help \"updated page source written to #{rpr PATH.relative process.cwd(), page_html_path}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@list_versions = ->\n  ### Log the most important versions to the console: ###\n  keys = [\n    'v8'\n    'node'\n    'electron'\n    'chrome'\n    'icu'\n    'unicode' ]\n  whisper ( key.padEnd 20 ), process.versions[ key ] for key in keys\n  whisper ( '明快打字机'.padEnd 15 ), ( require '../package.json' ).version\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@launch = ->\n  debug 'µ11233', 'launch'\n  main_window = new BrowserWindow S.window.electron\n  #.........................................................................................................\n  main_window.loadURL URL.format { pathname: page_html_path, protocol: 'file:', slashes: true, }\n  #.........................................................................................................\n  ### TAINT consider to move all exception handlers to module `exception-handler` ###\n  main_window.on 'unresponsive', =>\n    alert \"main_window unresponsive!\"\n  #.........................................................................................................\n  process.on 'uncaughtException',  ( error ) =>\n    alert \"uncaught exception\"\n    alert rpr error\n    process.exit 1\n  #.........................................................................................................\n  main_window.webContents.on 'crashed', =>\n    alert \"main_window crashed!\"\n    main_window.close()\n    return null\n  #.........................................................................................................\n  main_window.once 'ready-to-show', =>\n    # debug '77565-1', 'ready-to-show'\n    main_window.show()\n    main_window.maximize()                 if S.window.maximize      ? no\n    main_window.webContents.openDevTools() if S.window.show_devtools ? no\n    main_window.webContents.on 'error', ( error ) => warn 'µ76599', error.message\n    # ### thx to https://stackoverflow.com/a/44012967/7568091 ###\n    # pid                 = process.pid\n    # wid                 = await IF.wait_for_window_id_from_pid process.pid\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@open_homepage = ->\n  ( require 'electron' ).shell.openExternal 'https://github.com/loveencounterflow/mingkwai-typewriter'\n\n\n############################################################################################################\napp.once 'ready', @launch.bind @\n@write_page_source()\n@list_versions()\n\n\n"
  ]
}