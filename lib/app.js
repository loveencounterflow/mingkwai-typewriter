// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  /* module-global configuration and editor state object */
  /* OBS this instance of `S` is *not* shared with renderer process and can only be used to read presets */
  /* keep a module-global reference to main window to prevent GC from collecting it as per
  https://youtu.be/iVdXOrtdHvA?t=713 */
  var BrowserWindow, CND, FS, PATH, PD, S, TEMPLATES, URL, XE, alert, app, badge, debug, help, info, inspect, jr, log, main_window, page_html_path, rpr, urge, warn, whisper, window;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/APP';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  PATH = require('path');

  FS = require('fs');

  URL = require('url');

  inspect = (require('util')).inspect;

  log = function(...P) {
    return process.stdout.write((rpr(P)) + '\n');
  };

  // { app, globalShortcut, }  = require 'electron'
  window = null;

  // log Object.keys require 'electron'
  ({app, BrowserWindow} = require('electron'));

  TEMPLATES = require('./templates');

  PD = require('pipedreams');

  XE = require('./xemitter');

  ({jr} = CND);

  //...........................................................................................................
  page_html_path = PATH.resolve(PATH.join(__dirname, '../public/main.html'));

  main_window = null;

  S = require('./settings');

  //-----------------------------------------------------------------------------------------------------------
  this.write_page_source = function() {
    /* Write out the HTML of the main page; this is strictly only needed when template has changed, which we
    maybe should detect in the future: */
    var page_source;
    page_source = TEMPLATES.main_2();
    // page_source = TEMPLATES.minimal()
    FS.writeFileSync(page_html_path, page_source);
    return help(`updated page source written to ${rpr(PATH.relative(process.cwd(), page_html_path))}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.list_versions = function() {
    /* Log the most important versions to the console: */
    var i, key, keys, len;
    keys = ['v8', 'node', 'electron', 'chrome', 'icu', 'unicode'];
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      whisper(key.padEnd(20), process.versions[key]);
    }
    whisper('明快打字机'.padEnd(15), (require('../package.json')).version);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.launch = function() {
    debug('µ11233', 'launch');
    main_window = new BrowserWindow(S.window.electron);
    //.........................................................................................................
    main_window.loadURL(URL.format({
      pathname: page_html_path,
      protocol: 'file:',
      slashes: true
    }));
    //.........................................................................................................
    /* TAINT consider to move all exception handlers to module `exception-handler` */
    main_window.on('unresponsive', () => {
      return alert("main_window unresponsive!");
    });
    //.........................................................................................................
    process.on('uncaughtException', (error) => {
      alert("uncaught exception");
      alert(rpr(error));
      return process.exit(1);
    });
    //.........................................................................................................
    main_window.webContents.on('crashed', () => {
      alert("main_window crashed!");
      main_window.close();
      return null;
    });
    //.........................................................................................................
    return main_window.once('ready-to-show', () => {
      var ref, ref1;
      // debug '77565-1', 'ready-to-show'
      main_window.show();
      if ((ref = S.window.maximize) != null ? ref : false) {
        main_window.maximize();
      }
      if ((ref1 = S.window.show_devtools) != null ? ref1 : false) {
        main_window.webContents.openDevTools();
      }
      main_window.webContents.on('error', (error) => {
        return warn('µ76599', error.message);
      });
      // ### thx to https://stackoverflow.com/a/44012967/7568091 ###
      // pid                 = process.pid
      // wid                 = await IF.wait_for_window_id_from_pid process.pid
      // XE.emit PD.new_event '^window-id', wid
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.open_homepage = function() {
    return (require('electron')).shell.openExternal('https://github.com/loveencounterflow/mingkwai-typewriter');
  };

  //###########################################################################################################
  app.once('ready', this.launch.bind(this));

  this.write_page_source();

  this.list_versions();

}).call(this);

//# sourceMappingURL=app.js.map
