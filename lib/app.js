// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var BrowserWindow, CND, FS, IF, PATH, PD, TEMPLATES, URL, XE, alert, app, app_is_ready, badge, debug, help, info, inspect, jr, kb_listener_is_ready, log, page_html_path, rpr, urge, warn, whisper, window;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/APP';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  PATH = require('path');

  FS = require('fs');

  URL = require('url');

  inspect = (require('util')).inspect;

  log = function(...P) {
    return process.stdout.write((rpr(P)) + '\n');
  };

  // { app, globalShortcut, }  = require 'electron'
  window = null;

  // log Object.keys require 'electron'
  ({app, BrowserWindow} = require('electron'));

  TEMPLATES = require('./templates');

  PD = require('pipedreams');

  XE = require('./xemitter');

  IF = require('interflug');

  ({jr} = CND);

  //...........................................................................................................
  kb_listener_is_ready = false;

  app_is_ready = false;

  page_html_path = PATH.resolve(PATH.join(__dirname, '../public/main.html'));

  //-----------------------------------------------------------------------------------------------------------
  this.write_page_source = function() {
    /* Write out the HTML of the main page; this is strictly only needed when template has changed, which we
    maybe should detect in the future: */
    var page_source;
    page_source = TEMPLATES.main_2();
    // page_source = TEMPLATES.minimal()
    FS.writeFileSync(page_html_path, page_source);
    return help(`updated page source written to ${rpr(PATH.relative(process.cwd(), page_html_path))}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.list_versions = function() {
    /* Log the most important versions to the console: */
    var i, key, keys, len;
    keys = ['v8', 'node', 'electron', 'chrome', 'icu', 'unicode'];
    for (i = 0, len = keys.length; i < len; i++) {
      key = keys[i];
      whisper(key.padEnd(20), process.versions[key]);
    }
    whisper('明快打字机'.padEnd(15), (require('../package.json')).version);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.listen_to_keyboard = function() {
    var on_ready, pipeline, source;
    on_ready = () => {
      urge('µ88782', "keybvoard event source ready");
      kb_listener_is_ready = true;
      if (app_is_ready && kb_listener_is_ready) {
        return this.launch();
      }
    };
    //.........................................................................................................
    pipeline = [];
    source = IF.K.new_keyboard_event_source({on_ready});
    pipeline.push(source);
    pipeline.push(PD.$watch(function(d) {
      return XE.emit(d);
    }));
    pipeline.push(PD.$drain());
    return PD.pull(...pipeline);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.on_app_ready = function() {
    app_is_ready = true;
    if (app_is_ready && kb_listener_is_ready) {
      return this.launch();
    }
  };

  //-----------------------------------------------------------------------------------------------------------
  this.launch = function() {
    /* TAINT workaround: obtain configuration from a throw-away state instance */
    var S, state;
    debug('µ11233', 'launch');
    state = require('./state');
    S = state.new();
    window = new BrowserWindow(S.window.electron);
    //.........................................................................................................
    window.loadURL(URL.format({
      pathname: page_html_path,
      protocol: 'file:',
      slashes: true
    }));
    //.........................................................................................................
    /* TAINT consider to move all exception handlers to module `exception-handler` */
    window.on('unresponsive', function() {
      return alert("window unresponsive!");
    });
    //.........................................................................................................
    process.on('uncaughtException', function(error) {
      alert("uncaught exception");
      alert(rpr(error));
      return process.exit(1);
    });
    //.........................................................................................................
    window.webContents.on('crashed', function() {
      alert("window crashed!");
      window.close();
      return null;
    });
    //.........................................................................................................
    return window.once('ready-to-show', async function() {
      /* thx to https://stackoverflow.com/a/44012967/7568091 */
      var pid, ref, ref1, wid;
      // debug '77565-1', 'ready-to-show'
      window.show();
      if ((ref = S.window.maximize) != null ? ref : false) {
        window.maximize();
      }
      if ((ref1 = S.window.show_devtools) != null ? ref1 : false) {
        window.webContents.openDevTools();
      }
      window.webContents.on('error', (error) => {
        return warn('µ76599', error.message);
      });
      pid = process.pid;
      wid = (await IF.wait_for_window_id_from_pid(process.pid));
      XE.emit(PD.new_event('^window-id', wid));
      return null;
    });
  };

  //###########################################################################################################
  app.once('ready', this.on_app_ready.bind(this));

  this.write_page_source();

  this.list_versions();

  this.listen_to_keyboard();

}).call(this);

//# sourceMappingURL=app.js.map
