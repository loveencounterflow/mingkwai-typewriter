// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, FS, OPSCM, OS, PATH, alert, badge, debug, defer, echo, help, info, inspect, is_empty, jr, log, rpr, test, urge, warn, whisper, xrpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/TESTS/main'; // /OPS-CM'

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  FS = require('fs');

  OS = require('os');

  test = require('guy-test');

  //...........................................................................................................
  ({jr, is_empty} = CND);

  defer = setImmediate;

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  OPSCM = require('../ops-cm');

  //-----------------------------------------------------------------------------------------------------------
  this["order positions"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [
      [
        [
          {
            line: 1,
            ch: 1
          },
          {
            line: 1,
            ch: 1
          }
        ],
        [
          {
            line: 1,
            ch: 1
          },
          {
            line: 1,
            ch: 1
          }
        ]
      ],
      [
        [
          {
            line: 2,
            ch: 1
          },
          {
            line: 1,
            ch: 1
          }
        ],
        [
          {
            line: 1,
            ch: 1
          },
          {
            line: 2,
            ch: 1
          }
        ]
      ],
      [
        [
          {
            line: 1,
            ch: 1
          },
          {
            line: 2,
            ch: 1
          }
        ],
        [
          {
            line: 1,
            ch: 1
          },
          {
            line: 2,
            ch: 1
          }
        ]
      ],
      [
        [
          {
            line: 1,
            ch: 5
          },
          {
            line: 1,
            ch: 5
          }
        ],
        [
          {
            line: 1,
            ch: 5
          },
          {
            line: 1,
            ch: 5
          }
        ]
      ],
      [
        [
          {
            line: 1,
            ch: 5
          },
          {
            line: 1,
            ch: 6
          }
        ],
        [
          {
            line: 1,
            ch: 5
          },
          {
            line: 1,
            ch: 6
          }
        ]
      ],
      [
        [
          {
            line: 1,
            ch: 4
          },
          {
            line: 1,
            ch: 5
          }
        ],
        [
          {
            line: 1,
            ch: 4
          },
          {
            line: 1,
            ch: 5
          }
        ]
      ],
      [
        [
          {
            line: 2,
            ch: 5
          },
          {
            line: 1,
            ch: 5
          }
        ],
        [
          {
            line: 1,
            ch: 5
          },
          {
            line: 2,
            ch: 5
          }
        ]
      ],
      [
        [
          {
            line: 2,
            ch: 5
          },
          {
            line: 1,
            ch: 6
          }
        ],
        [
          {
            line: 1,
            ch: 6
          },
          {
            line: 2,
            ch: 5
          }
        ]
      ],
      [
        [
          {
            line: 2,
            ch: 4
          },
          {
            line: 1,
            ch: 5
          }
        ],
        [
          {
            line: 1,
            ch: 5
          },
          {
            line: 2,
            ch: 4
          }
        ]
      ],
      [
        [
          {
            line: 2,
            ch: 4
          },
          {
            line: 1,
            ch: 1
          }
        ],
        [
          {
            line: 1,
            ch: 1
          },
          {
            line: 2,
            ch: 4
          }
        ]
      ],
      [
        [
          {
            line: 3,
            ch: 0
          },
          {
            line: 3,
            ch: 5
          }
        ],
        [
          {
            line: 3,
            ch: 0
          },
          {
            line: 3,
            ch: 5
          }
        ]
      ],
      [
        [
          {
            line: 3,
            ch: 5
          },
          {
            line: 3,
            ch: 0
          }
        ],
        [
          {
            line: 3,
            ch: 0
          },
          {
            line: 3,
            ch: 5
          }
        ]
      ]
    ];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve) {
          var result;
          result = OPSCM._cm_order_positions(probe);
          // debug jr [ probe, result, null, ]
          return resolve(result);
        });
      });
    }
    //.........................................................................................................
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["fromto from range"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [
      [
        {
          "anchor": {
            "line": 3,
            "ch": 0,
            "sticky": null
          },
          "head": {
            "line": 3,
            "ch": 5,
            "sticky": null
          }
        },
        {
          "from": {
            "line": 3,
            "ch": 0
          },
          "to": {
            "line": 3,
            "ch": 5
          }
        },
        null
      ],
      [
        {
          "anchor": {
            "line": 3,
            "ch": 5,
            "sticky": null
          },
          "head": {
            "line": 3,
            "ch": 0,
            "sticky": null
          }
        },
        {
          "from": {
            "line": 3,
            "ch": 0
          },
          "to": {
            "line": 3,
            "ch": 5
          }
        },
        null
      ]
    ];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve) {
          var result;
          result = OPSCM._cm_fromto_from_range(probe);
          // debug jr [ probe, result, null, ]
          return resolve(result);
        });
      });
    }
    //.........................................................................................................
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["validate types"] = async function(T, done) {
    var error, i, isa, len, matcher, probe, probes_and_matchers, types, validate;
    probes_and_matchers = [
      [['text',
      42],
      false,
      "not a valid text"],
      [['integer',
      42],
      true,
      null],
      [['position',
      42],
      false,
      "not a valid position"],
      [
        [
          'position',
          {
            line: 123,
            ch: 456
          }
        ],
        true,
        null
      ],
      [
        [
          'position',
          {
            line: 123,
            ch: void 0
          }
        ],
        false,
        "not a valid position"
      ],
      [
        [
          'position',
          {
            line: 123,
            ch: null
          }
        ],
        false,
        "not a valid position"
      ]
    ];
    //.........................................................................................................
    types = require('../types');
    ({isa, validate} = types);
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve) {
          var result, type, value;
          [type, value] = probe;
          result = validate(type, value);
          return resolve(result);
        });
      });
    }
    //.........................................................................................................
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this, {
      timeout: 5000
    });
  }

  // test @[ "wye with duplex pair"            ]

}).call(this);

//# sourceMappingURL=main.test.js.map
