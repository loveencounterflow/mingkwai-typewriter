// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, alert, badge, debug, error, help, hub, i, info, isa, j, jr, len, len1, probe, probes, rpr, schemas, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS-TRANSCRIPTION';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  jr = JSON.stringify;

  //-----------------------------------------------------------------------------------------------------------
  isa = function(x, type) {
    var arity, tester;
    if ((arity = arguments.length) !== 2) {
      throw new Error(`µ77733 expected 2 arguments, got ${arity}`);
    }
    if ((type = CND.type_of(type)) !== 'text') {
      throw new Error(`µ77733 expected a text, got a ${type}`);
    }
    if ((tester = this[type]) == null) {
      throw new Error(`µ77733 unknown type ${rpr(type)}`);
    }
    return tester(x);
  };

  //-----------------------------------------------------------------------------------------------------------
  isa.validate = function(x, type, message = null) {
    var tester;
    if ((tester = this[type]) == null) {
      throw new Error(`µ77733 unknown type ${rpr(type)}`);
    }
    if (!tester(x)) {
      throw new Error(message != null ? message : `µ77733 expected a ${type}, got a ${CND.type_of(x)}`);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  isa.boolean = CND.isa_boolean;

  isa.buffer = CND.isa_buffer;

  isa.function = CND.isa_function;

  isa.generator = CND.isa_generator;

  isa.generator_function = CND.isa_generator_function;

  isa.infinity = CND.isa_infinity;

  // isa.jsarguments          = CND.isa_jsarguments
  isa.arraybuffer = CND.isa_jsarraybuffer;

  isa.nodejs_buffer = CND.isa_jsbuffer;

  // isa.jsctx                = CND.isa_jsctx
  // isa.jsdate               = CND.isa_jsdate
  isa.error = CND.isa_jserror;

  isa.global = CND.isa_jsglobal;

  isa.nan = CND.isa_jsnotanumber;

  isa.regex = CND.isa_jsregex;

  isa.undefined = CND.isa_jsundefined;

  // isa.jswindow             = CND.isa_jswindow
  isa.list = CND.isa_list;

  isa.null = CND.isa_null;

  isa.nullorundefined = CND.isa_nullorundefined;

  isa.number = CND.isa_number;

  /* TAINT object/pod distinction? */
  isa.object = CND.isa_object;

  isa.pod = CND.isa_pod;

  isa.primitive = CND.isa_primitive;

  isa.symbol = CND.isa_symbol;

  isa.text = CND.isa_text;

  schemas = {
    //.........................................................................................................
    position: {
      // $id:      'http://codemirror.net/types/position'
      type: 'object',
      properties: {
        line: {
          type: 'number',
          not: {
            'type': 'null'
          }
        },
        ch: {
          type: 'number',
          not: {
            'type': 'null'
          }
        }
      },
      required: ['line', 'ch']
    },
    //.........................................................................................................
    range: {
      // $id:      'http://codemirror.net/types/range'
      type: 'object',
      properties: {
        from: {
          $ref: 'position'
        },
        to: {
          $ref: 'position'
        }
      },
      required: ['from', 'to']
    }
  };

  //.......................................................................................................

  //###########################################################################################################
  hub = OVAL.new_validation_hub();

  (function() {
    var results, schema, typename;
    results = [];
    for (typename in schemas) {
      schema = schemas[typename];
      schema.$id = typename;
      results.push(OVAL.add_schema(hub, schema));
    }
    return results;
  })();

  //###########################################################################################################
  if (module.parent == null) {
    probes = [
      {
        line: 42
      },
      {
        line: 42,
        ch: 21
      },
      {
        line: 42,
        ch: null
      },
      {
        line: 42,
        ch: 'x'
      }
    ];
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      error = null;
      try {
        OVAL.validate(hub, 'position', probe);
      } catch (error1) {
        error = error1;
        warn(jr(probe), error.message);
      }
      if (error == null) {
        help(jr(probe), 'ok');
      }
    }
    probes = [
      {
        from: {
          line: 42
        },
        to: {
          line: 10,
          ch: 11
        }
      },
      {
        from: {
          line: 42,
          ch: 21
        },
        to: {
          line: 10,
          ch: 11
        }
      },
      {
        from: {
          line: 42,
          ch: 21
        },
        to: {
          line: 10,
          ch: null
        }
      },
      {
        from: {
          line: 42,
          ch: null
        },
        to: {
          line: 10,
          ch: 11
        }
      },
      {
        from: {
          line: 42,
          ch: 'x'
        },
        to: {
          line: 10,
          ch: 11
        }
      }
    ];
    for (j = 0, len1 = probes.length; j < len1; j++) {
      probe = probes[j];
      error = null;
      try {
        OVAL.validate(hub, 'range', probe);
      } catch (error1) {
        error = error1;
        warn(jr(probe), error.message);
      }
      if (error == null) {
        help(jr(probe), 'ok');
      }
    }
  }

}).call(this);

//# sourceMappingURL=types.js.map
