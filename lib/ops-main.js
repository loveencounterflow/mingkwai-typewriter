// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, FS, KEYS, PATH, PD, T, XE, after, alert, badge, debug, defer, help, info, inspect, jr, rpr, urge, warn, whisper, xrpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS-MAKESHIFT';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  KEYS = require('../lib/keys');

  T = require('../lib/templates');

  PATH = require('path');

  FS = require('fs');

  //...........................................................................................................
  require('../lib/exception-handler');

  // require                   '../lib/kana-input'
  // require                   '../lib/kanji-input'
  //...........................................................................................................
  PD = require('pipedreams');

  ({jr} = CND);

  ({after} = CND.suspend);

  defer = setImmediate;

  ({$, $async} = PD);

  // XE                        = null
  XE = require('../lib/xemitter');

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.always_focus_editor = function() {
    /* TAINT this method inhibits selecting, copying text from logger, candidates */
    this.always_focus_editor = function()/* do not add any more handlers with this method after first call */ {};
    (jQuery('div.CodeMirror-code')).on('blur', function() {
      return this.focus();
    });
    (jQuery('div.CodeMirror-code')).focus();
    return null;
  };

  //===========================================================================================================
  // FOCUSFRAME
  //-----------------------------------------------------------------------------------------------------------
  this.toggle_focusframe = function() {
    // @log "S.focus_is_candidates: #{S.focus_is_candidates}"
    if (S.focus_is_candidates) {
      this.focusframe_to_editor();
    } else {
      this.focusframe_to_candidates();
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.focusframe_to_editor = function() {
    this._focusframe_to('leftbar');
    return S.focus_is_candidates = false;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.focusframe_to_candidates = function() {
    this._focusframe_to('rightbar');
    return S.focus_is_candidates = true;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._focusframe_to = function(target) {
    var ff, height, left, tgto, top, width;
    if (CND.isa_text(target)) {
      // target      = jQuery( document.activeElement )
      target = jQuery(target);
    }
    ff = jQuery('focusframe');
    if (target.length < 1) {
      return;
    }
    // ff.offset     target.offset()
    // ff.width      target.width()
    // ff.height     target.height()
    tgto = target.offset();
    if (tgto == null) {
      return;
    }
    left = tgto.left - 1;
    top = tgto.top - 1;
    width = target.width() + 2;
    height = target.height() + 2;
    ff.animate({left, top, width, height}, 100);
    return null;
  };

  //===========================================================================================================
  // WINDOW
  //-----------------------------------------------------------------------------------------------------------
  this.get_window = function() {
    return (require('electron')).remote.getCurrentWindow();
  };

  //===========================================================================================================
  // APP INITIALIZATION
  //-----------------------------------------------------------------------------------------------------------
  this.init = function() {
    var k;
    // { remote, }               = require 'electron'
    // XE                        = remote.require './xemitter'
    //.........................................................................................................
    S.candidates = {
      jq: jQuery('#candidates'),
      selected: {
        id: null
      }
    };
    S.focus_is_candidates = false;
    //.........................................................................................................
    /* Initialize CodeMirror */
    S.codemirror.editor = CodeMirror.fromTextArea((jQuery('#codemirror'))[0], S.codemirror.settings);
    S.codemirror.editor.setSize(null, '100%');
    S.codemirror.editor.on('inputRead', function(me, change) {
      return XE.emit(PD.new_event('^raw-input', {change}));
    });
    XE.listen_to('^ignore-delete', function() {
      return S.ignore_delete += +1;
    });
    S.codemirror.editor.on('change', function(me, change) {
      if (change.origin !== '+delete') {
        /* TAINT when inserting results, will there be a change event? */
        return null;
      }
      /* ignore event if it has been generated: */
      if (S.ignore_delete > 0) {
        S.ignore_delete += -1;
        return null;
      }
      return XE.emit(PD.new_event('^raw-input', {change}));
    });
    this.always_focus_editor();
    //.........................................................................................................
    // S.codemirror.editor.on 'beforeChange',    ( me, change      ) -> whisper 'µ66653', 'beforeChange',  jr change
    // S.codemirror.editor.on 'change',          ( me, change      ) -> whisper 'µ66653', 'change',        jr change
    // S.codemirror.editor.on 'changes',         ( me, changes     ) -> whisper 'µ66653', 'changes',       jr changes
    // S.codemirror.editor.on 'cursorActivity',  ( me              ) -> whisper 'µ66653', 'cursorActivity'
    // S.codemirror.editor.on 'keyHandled',      ( me, name, event ) -> whisper 'µ66653', 'keyHandled',    jr name
    // S.codemirror.editor.on 'inputRead',       ( me, change      ) -> whisper 'µ66653', 'inputRead',     jr change
    //.........................................................................................................
    /* Register key and mouse events */
    KEYS.generate_keboard_events(jQuery('html'));
    // KEYS.register 'axis', 'vertical',     ( uie )   => @on_vertical_navigation  uie
    // KEYS.register 'slot', 'Enter',        ( uie )   => @on_add_selection        uie
    this.add_menu();
    this.restore_documents();
    this.focusframe_to_editor();
    this.set_codemirror_keybindings();
    this.set_app_keybindings();
    this.set_event_bindings();
    this.log('µ49884', ((function() {
      var results;
      results = [];
      for (k in this) {
        results.push(k);
      }
      return results;
    }).call(this)).sort());
    //.........................................................................................................
    /* Detect resizing events: */
    /* TAINT won't work when panes are shifted (probably) */
    (jQuery(window)).on('resize', () => {
      debug("resize window");
      this.index_candidates();
      return null;
    });
    return null;
  };

}).call(this);

//# sourceMappingURL=ops-main.js.map
