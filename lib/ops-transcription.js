// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, FS, KEYS, PATH, PD, T, XE, after, alert, badge, debug, defer, help, info, inspect, jr, rpr, urge, warn, whisper, xrpr,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS-TRANSCRIPTION';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  KEYS = require('../lib/keys');

  T = require('../lib/templates');

  PATH = require('path');

  FS = require('fs');

  //...........................................................................................................
  PD = require('pipedreams');

  ({jr} = CND);

  ({after} = CND.suspend);

  defer = setImmediate;

  ({$, $async} = PD);

  // XE                        = null
  XE = require('../lib/xemitter');

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //===========================================================================================================
  // INPUT TRANSLATION
  //-----------------------------------------------------------------------------------------------------------
  this.load_transcriptors = async function() {
    var arity, directory_path, filename, i, len, on_input_types, ops, ref, ref1, ref2, relative_path, t, type;
    PATH = require('path');
    FS = require('fs');
    ops = {};
    directory_path = PATH.resolve(PATH.join(__dirname, './transcriptors'));
    on_input_types = ['function', 'asyncfunction'];
    S.transcriptors = [];
    //.........................................................................................................
    t = {};
    t.display_name = "(no transcriptor)";
    t.path = null;
    t.module = null;
    S.transcriptors.push(t);
    ref = FS.readdirSync(directory_path);
    //.........................................................................................................
    for (i = 0, len = ref.length; i < len; i++) {
      filename = ref[i];
      if (!filename.endsWith('.ts.js')) {
        continue;
      }
      //.......................................................................................................
      t = {};
      t.path = PATH.join(directory_path, filename);
      t.display_name = filename;
      t.display_name = t.display_name.replace(/\.ts\.js$/g, '');
      t.display_name = t.display_name.replace(/-/g, ' ');
      //.......................................................................................................
      relative_path = PATH.relative(process.cwd(), t.path);
      this.log(`µ44755 loading transcription ${relative_path}`);
      t.module = require(t.path);
      //.......................................................................................................
      if (t.module.init != null) {
        if (ref1 = (type = CND.type_of(t.module.init)), indexOf.call(on_input_types, ref1) < 0) {
          throw new Error(`µ27622 expected a function for ${relative_path}.init, got a ${type}`);
        }
        await t.module.init();
      }
      //.......................................................................................................
      if (t.module.display_name != null) {
        if ((type = CND.type_of(t.module.display_name)) !== 'text') {
          throw new Error(`µ27622 expected a text for ${relative_path}.display_name, got a ${type}`);
        }
        t.display_name = t.module.display_name;
      }
      //.......................................................................................................
      if (ref2 = (type = CND.type_of(t.module.on_input)), indexOf.call(on_input_types, ref2) < 0) {
        throw new Error(`µ27622 expected a function for ${relative_path}.on_input, got a ${type}`);
      }
      if ((arity = t.module.on_input.length) !== 1) {
        throw new Error(`µ27622 arity ${arity} for ${relative_path}.on_input not implemented`);
      }
      //.......................................................................................................
      S.transcriptors.push(t);
      t.tsnr = S.transcriptors.length;
      this.log(`µ44755 ${filename} loaded as ${rpr(t.display_name)} (TRS# ${t.tsnr})`);
    }
    //.........................................................................................................
    // info 'µ33736', S.transcriptors
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.select_transcriptor = function(d) {
    var transcriptor;
    this.log('µ776312-1', 'set_transcription', d);
    if ((transcriptor = S.transcriptors[d.value.tsnr]) == null) {
      return this.log(`µ988373 no such transcriptor: ${rpr(d.value)}`);
    }
    // if S.transcriptor isnt transcriptor
    S.transcriptor = transcriptor;
    this.cm_set_translation_mark();
    return null;
  };

  //===========================================================================================================
  // INPUT TRANSLATION
  //-----------------------------------------------------------------------------------------------------------
  this.input_event_from_change_object = function(change) {
    var cursor, doc, editor, line_handle, line_idx, line_info, text/* TAINT consider to use line_idx, forego line_handle */;
    /* Transform `^raw-input` to `^input` events */
    //.........................................................................................................
    ({editor} = S.codemirror);
    ({doc} = editor);
    cursor = doc.getCursor();
    //.........................................................................................................
    /* TAINT kludge to collapse multiple selections into a single one */
    CodeMirror.commands.singleSelection(editor);
    //.........................................................................................................
    line_idx = cursor.line;
    line_handle = doc.getLineHandle(line_idx);
    line_info = doc.lineInfo(line_handle);
    ({text} = line_info);
    //.........................................................................................................
    return PD.new_event('^input', {change, line_idx, text});
  };

  //-----------------------------------------------------------------------------------------------------------
  this.display_candidates = function(d) {
    var glyph, glyphboxes, idx, rows, v;
    if (!S.focus_is_candidates) {
      this.focusframe_to_candidates();
    }
    v = d.value;
    rows = ((function() {
      var i, len, ref, results;
      ref = v.candidates;
      results = [];
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        glyph = ref[idx];
        results.push(T.get_flexgrid_html(idx + 1, glyph));
      }
      return results;
    })()).join('\n');
    (jQuery('#candidates-flexgrid div')).remove();
    (jQuery('#candidates-flexgrid')).append(rows);
    //.........................................................................................................
    /* TAINT code duplication */
    glyphboxes = jQuery('#candidates-flexgrid div.glyph');
    glyphboxes.on('click', (e) => {
      var me;
      me = jQuery(e.target);
      /* TAINT code duplication */
      /* TAINT use API to move selection */
      glyphboxes.removeClass('cdtsel');
      me.addClass('cdtsel');
      return this.log(`µ33983-1 ${me.text()} ${jr(me.offset())}`);
    });
    //.........................................................................................................
    this.index_candidates();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.index_candidates = function() {
    /* Add or update each candidate `<div class=glyph> with attributes indicating its left- and right-based
    column and row numbers, starting from 1. Elements that match `jQuery '[lrow=1]'` are in the first row from
    the top, while those that match `jQuery '[rrow=1]'` are in the last row from top (first row from the
    bottom). Likewise, `lcol=1`, `rcol=1` match the leftmost and rightmost elements. These indexes have to be
    re-calculated after each container resize event, but simplify the code needed to select single and groups
    of elements. The beauty of the scheme is that we can select e.g. all leftmost elements or all elements
    in the first row (should the need ever arise). */
    /* TAINT code duplication */
    var candidate_count, col_count, col_idx, glyphbox, glyphboxes, i, idx, j, k, l, lcol, len, len1, len2, lnr, lrow, nxt_top, prv_top, ref, rnr, row, row_count, row_idx, rows, sub_glyphbox;
    glyphboxes = jQuery('#candidates-flexgrid div.glyph');
    lcol = 0;
    lrow = 0;
    prv_top = null;
    candidate_count = glyphboxes.length;
    lnr = 0;
    rnr = candidate_count + 1;
    rows = [];
    row = null;
    //.........................................................................................................
    this.log(`index_candidates() (${candidate_count})`);
//.........................................................................................................
    for (idx = i = 0, ref = candidate_count; (0 <= ref ? i < ref : i > ref); idx = 0 <= ref ? ++i : --i) {
      glyphbox = glyphboxes.eq(idx);
      //.......................................................................................................
      if ((nxt_top = glyphbox.offset().top) !== prv_top) {
        if (row != null) {
          rows.push(row);
          col_count = row.length;
          for (col_idx = j = 0, len = row.length; j < len; col_idx = ++j) {
            sub_glyphbox = row[col_idx];
            sub_glyphbox.attr('rcol', col_count - col_idx);
          }
        }
        //.....................................................................................................
        row = [];
        prv_top = nxt_top;
        lcol = 0;
        lrow += +1;
      }
      //.......................................................................................................
      row.push(glyphbox);
      lnr += +1;
      rnr += -1;
      lcol += +1;
      //.......................................................................................................
      glyphbox.attr('lnr', lnr);
      glyphbox.attr('rnr', rnr);
      glyphbox.attr('lcol', lcol);
      glyphbox.attr('lrow', lrow);
    }
    if (row != null) {
      //.........................................................................................................
      rows.push(row);
    }
    row_count = rows.length;
    for (row_idx = k = 0, len1 = rows.length; k < len1; row_idx = ++k) {
      row = rows[row_idx];
      for (l = 0, len2 = row.length; l < len2; l++) {
        glyphbox = row[l];
        glyphbox.attr('rrow', row_count - row_idx);
      }
    }
    //.........................................................................................................
    rows.length = 0/* not strictly needed, just to make de-allocation explicit */
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.insert_space_or_selection = function() {
    /* TAINT this implementation precludes any other functionality that the space bar might be associated
    with in CodeMirror */
    /* TAINT honour multiple selection */
    var cdtsel, text;
    cdtsel = jQuery('.cdtsel');
    text = cdtsel.length > 0 ? cdtsel.text() : ' ';
    S.codemirror.editor.replaceSelection(text);
    this.focusframe_to_editor();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._select_delta_candidate = function(deltas) {
    var R, delta_key, delta_value, glyphboxes, nxt_cdtsel, nxt_selector, nxt_value, prv_cdtsel, prv_value, type;
    /* Select next candidate(s) based on `deltas`, which should be an object with one or more of the
    following members:

    * **`lnr`**:     left-anchored  candidate         number
    * **`lcol`**:    left-anchored  column            number
    * **`lrow`**:    left-anchored  row (i.e. line)   number
    * **`rnr`**:     right-anchored candidate         number
    * **`rcol`**:    right-anchored column            number
    * **`rrow`**:    right-anchored row (i.e. line)   number

    Left-anchored values count from the usual (i.e. top or left) end of that dimension, richt-anchored ones
    from the opposite sides; for example, `lcol: 1` selects the first (leftmost), `rcol: 1` the last
    (rightmost) entry in each row; `lrow: 1` the first row, `rrow: 1` the last one; in a line with, say, five
    candidates, `lrow: 4` is equivalent to `rrow: 2`, and `lrow: 5` is the same as `rrow: 1`.

    Each entry may be either a positive or negative integer, or zero, or 'first', or 'last'. A non-zero number
    indicates the number of steps to go in the respective dimension while zero indicates 'keep this value'.
    For example, to move right irregardless of line breaks, use `{ lnr: +1, }`. To move to the first entry on
    the next line, use `{ lcol: 'first', lrow: +1, }`. To go to the last entry of the current row, use `{
    lrow: 0, lcol: 'last', }` or `{ lrow: 0, rcol: 'first', }`. The selected candidates are the intersection
    of all sub-selectors.

    This method will have no effect unless there is one or more selected entries to start with.  */
    //.........................................................................................................
    R = 0;
    prv_cdtsel = jQuery('.cdtsel');
    //.........................................................................................................
    if (prv_cdtsel.length === 0) {
      this.log("_select_delta_candidate: no candidate selected");
      return R;
    }
    //.........................................................................................................
    /* TAINT code duplication */
    glyphboxes = jQuery('#candidates-flexgrid div.glyph');
    nxt_selector = [];
//.........................................................................................................
    for (delta_key in deltas) {
      delta_value = deltas[delta_key];
      switch (type = CND.type_of(delta_value)) {
        case 'text':
          switch (delta_value) {
            case 'first':
              nxt_selector.push(`[${delta_key}=1]`);
              break;
            case 'last':
              delta_key = delta_key.replace(/^[rl]/, function($0) {
                if ($0 === 'l') {
                  return 'r';
                } else {
                  return 'l';
                }
              });
              nxt_selector.push(`[${delta_key}=1]`);
              break;
            default:
              throw new Error(`µ37634 unknown move command ${rpr(delta_value)}`);
          }
          break;
        case 'number':
          prv_value = parseInt(prv_cdtsel.attr(delta_key), 10);
          nxt_value = prv_value + delta_value;
          nxt_selector.push(`[${delta_key}=${nxt_value}]`);
          break;
        default:
          throw new Error(`µ37633 expected a text or a number, got a ${type}`);
      }
    }
    nxt_selector = nxt_selector.join('');
    this.log(`_select_delta_candidate ${jr(deltas)} ${jr(nxt_selector)}`);
    if ((R = (nxt_cdtsel = glyphboxes.filter(nxt_selector)).length) === 0) {
      return R;
    }
    prv_cdtsel.removeClass('cdtsel');
    nxt_cdtsel.addClass('cdtsel');
    nxt_cdtsel[0].scrollIntoViewIfNeeded();
    return R;
  };

}).call(this);

//# sourceMappingURL=ops-transcription.js.map
