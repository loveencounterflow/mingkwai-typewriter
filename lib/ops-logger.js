// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, _lognr, abspath, alert, app_t0, assign, badge, debug, format_float, get_times, help, info, jr, remote, rpr, rprocess, skip_events, t_prv, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS-LOGGER';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  //...........................................................................................................
  ({jr} = CND);

  // { inspect, }              = require 'util'
  // xrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }
  _lognr = 0;

  ({remote} = require('electron'));

  rprocess = remote.process;

  ({assign, abspath, format_float} = require('./helpers'));

  //...........................................................................................................
  app_t0 = (remote.require('./snarf')).app_t0;

  t_prv = app_t0;

  get_times = function() {
    var app_t, dt, t;
    t = Date.now();
    dt = t - t_prv;
    t_prv = t;
    app_t = t - app_t0;
    app_t = format_float(app_t / 1000);
    dt = format_float(dt / 1000);
    return {app_t, dt};
  };

  //-----------------------------------------------------------------------------------------------------------
  // '^input'
  skip_events = new Set(['^ignore-delete', '^keyboard']);

  //-----------------------------------------------------------------------------------------------------------
  // '^candidates'
  this.log_almost_all_events = function(key, d) {
    var app_t, dt, logger, lognr, message, ref, v;
    // whisper 'µ99823', key #, jr d
    if (skip_events.has(key)) {
      return;
    }
    _lognr += +1;
    lognr = `${_lognr}`.padStart(5, '_');
    v = (ref = d.value) != null ? ref : {};
    logger = jQuery('#logger');
    while (logger.children().length > 1000) {
      (logger.find(':first-child')).remove();
    }
    ({app_t, dt} = get_times());
    message = rpr(v);
    // message = ( k for k         of d.value                ).join ', '
    // message = switch key
    //   when '^kblevel' then  ( k for k, toggle of S.kblevels when toggle ).join ', '
    //   else                  ( k for k         of d.value                ).join ', '
    //.........................................................................................................
    rprocess.stderr.write(CND.blue(`${app_t} ${dt} ${lognr}: ${rpr(key)}: ${message}\n`));
    logger.append(`<div>${app_t} ${dt} ${lognr}: ${rpr(key)}: ${message}</div>`);
    console.log(lognr, key, d);
    logger.scrollTop(logger[0].scrollHeight);
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.log = function(...P) {
    var app_t, dt, logger, lognr, p, text;
    /* TAINT code duplication */
    _lognr += +1;
    lognr = `${_lognr}`.padStart(5, '_');
    text = ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = P.length; i < len; i++) {
        p = P[i];
        results.push(CND.isa_text(p) ? p : rpr(p));
      }
      return results;
    })()).join(' ');
    logger = jQuery('#logger');
    while (logger.children().length > 1000) {
      (logger.find(':first-child')).remove();
    }
    ({app_t, dt} = get_times());
    /* TAINT should escape text (or accept HTML?) */
    // p.stdout.write CND.green "#{lognr}"
    // p.stderr.write CND.red "#{lognr}"
    console.log(app_t, lognr, text);
    rprocess.stderr.write(CND.blue(`${app_t} ${dt} ${lognr}: ${text}\n`));
    logger.append(`<div>${app_t} ${dt} ${lognr}: ${text}</div>`);
    logger.scrollTop(logger[0].scrollHeight);
    return null;
  };

  //###########################################################################################################
  this.log('logger started');

}).call(this);

//# sourceMappingURL=ops-logger.js.map
