// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, PD, alert, badge, debug, help, info, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS-CM';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  //...........................................................................................................
  PD = require('pipedreams');

  //-----------------------------------------------------------------------------------------------------------
  this._cm_as_pos = function(x) {
    return {
      line: x.line,
      ch: x.ch
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this./* Unify position-like objects */_cm_order_positions = function(positions) {
    return positions.sort(function(a, b) {
      if (a.line < b.line) {
        return -1;
      }
      if (a.line > b.line) {
        return +1;
      }
      if (a.ch < b.ch) {
        return -1;
      }
      if (a.ch > b.ch) {
        return +1;
      }
      return 0;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this._cm_fromto_from_range = function(range) {
    /* Given a `range` with `anchor` and `head` properties (which must both be positions, i.e.
    `{ line, ch, }` objects), return a `{ from, to, }` object where `from` comes always before or coincides
    with `to` in the document. This is needed to convert an object returned e.g. as selection to an
    argument that can be used by `markText()`. */
    var p, q;
    [p, q] = this._cm_order_positions([this._cm_as_pos(range.anchor), this._cm_as_pos(range.head)]);
    debug('µ77833', '_cm_order_positions', this._cm_as_pos(range.anchor), this._cm_as_pos(range.head));
    debug('µ77833', '_cm_fromto_from_range', p, q);
    return {
      from: p,
      to: q
    };
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.cm_select_only_first = function() {
    return CodeMirror.commands.singleSelection(S.codemirror.editor);
  };

  this.cm_get_selections = function() {
    return S.codemirror.editor.doc.listSelections();
  };

  /* TAINT actually gets one of the selections; maybe rewrite to obtain first in document order */
  this.cm_get_first_selection_as_fromto = function() {
    return this._cm_fromto_from_range(this.cm_get_selections()[0]);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_set_mark = function(fromto, clasz) {
    var settings;
    settings = {
      className: clasz,
      inclusiveLeft: false,
      inclusiveRight: true
    };
    return S.codemirror.editor.markText(fromto.from, fromto.to, settings);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_clear_translation_mark = function() {
    if (S.translation_mark == null) {
      return 0;
    }
    S.translation_mark.clear();
    S.translation_mark = null;
    return 1;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_set_translation_mark = function() {
    this.cm_select_only_first();
    this.cm_clear_translation_mark();
    S.translation_mark = this.cm_set_mark(this.cm_get_first_selection_as_fromto(), 'translation_mark');
    return 1;
  };

}).call(this);

//# sourceMappingURL=ops-cm.js.map
