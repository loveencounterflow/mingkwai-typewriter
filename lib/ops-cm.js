// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, PD, alert, badge, debug, help, info, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'æ˜Žå¿«æ‰“å­—æœº/OPS-CM';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  //...........................................................................................................
  PD = require('pipedreams');

  //-----------------------------------------------------------------------------------------------------------
  this._cm_as_pos = function(x) {
    return {
      line: x.line,
      ch: x.ch
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this./* Unify position-like objects */_cm_order_positions = function(positions) {
    return positions.sort(function(a, b) {
      if (a.line < b.line) {
        return -1;
      }
      if (a.line > b.line) {
        return +1;
      }
      if (a.ch < b.ch) {
        return -1;
      }
      if (a.ch > b.ch) {
        return +1;
      }
      return 0;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this._cm_fromto_from_range = function(range) {
    /* Given a `range` with `anchor` and `head` properties (which must both be positions, i.e.
    `{ line, ch, }` objects), return a `{ from, to, }` object where `from` comes always before or coincides
    with `to` in the document. This is needed to convert an object returned e.g. as selection to an
    argument that can be used by `markText()`. */
    var p, q;
    [p, q] = this._cm_order_positions([this._cm_as_pos(range.anchor), this._cm_as_pos(range.head)]);
    return {
      from: p,
      to: q
    };
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.cm_select_all = function() {
    return CodeMirror.commands.selectAll(S.codemirror.editor);
  };

  this.cm_select_only_first = function() {
    return CodeMirror.commands.singleSelection(S.codemirror.editor);
  };

  this.cm_get_selections = function() {
    return S.codemirror.editor.doc.listSelections();
  };

  this.cm_get_selection_texts = function() {
    return S.codemirror.editor.doc.getSelections();
  };

  this.cm_get_selections_as_fromtos = function() {
    var i, len, ref, results, s;
    ref = this.cm_get_selections();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      results.push(this._cm_fromto_from_range(s));
    }
    return results;
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @cm_select_only_in_single_line = ->

  //-----------------------------------------------------------------------------------------------------------
  this.cm_set_mark = function(fromto, clasz) {
    var settings;
    this.log('Âµ52981', `@cm_set_mark ${rpr(fromto)}, ${rpr(clasz)}`);
    settings = {
      className: clasz,
      inclusiveLeft: true,
      inclusiveRight: true
    };
    return S.codemirror.editor.markText(fromto.from, fromto.to, settings);
  };

  //-----------------------------------------------------------------------------------------------------------
  // @cm_clear_translation_mark = ->
  //   return 0 unless S.translation_mark?
  //   S.translation_mark.clear()
  //   S.translation_mark = null
  //   return 1

  //-----------------------------------------------------------------------------------------------------------
  this.cm_get_marks_in_range = function(fromto) {
    return S.codemirror.editor.findMarks(fromto.from, fromto.to);
  };

  this.cm_get_mark_fromtos_in_range = function(fromto) {
    var i, len, ref, results, t;
    ref = this.cm_get_marks_in_position(fromto);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      t = ref[i];
      results.push(this._cm_as_pos(t.find()));
    }
    return results;
  };

  this.cm_get_marks_in_position = function(position) {
    return S.codemirror.editor.findMarksAt(position);
  };

  this.cm_get_cursor = function() {
    return this._cm_as_pos(S.codemirror.editor.getCursor('head'));
  };

  this.cm_set_cursor = function(position) {
    return S.codemirror.editor.setCursor(position);
  };

  this./* TAINT might want to use options */cm_get_text = function(fromto) {
    return S.codemirror.editor.getRange(fromto.from, fromto.to);
  };

  this.cm_text_from_mark = function(mark) {
    return this.cm_get_text(mark.find());
  };

  this.cm_text_from_line_idx = function(line_idx) {
    return S.codemirror.editor.getLine(line_idx);
  };

  this.cm_replace_selection = function(text) {
    return S.codemirror.editor.doc.replaceSelection(text);
  };

  this.cm_range_is_point = function(fromto) {
    return CND.equals(fromto.from, fromto.to);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_select = function(fromto) {
    this.log('Âµ53082', `cm_select: ${rpr(fromto)}`);
    return S.codemirror.editor.setSelection(fromto.from, fromto.to);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.position_and_clasz_from_mark = function(mark) {
    var fromto, ref;
    fromto = mark.find();
    return {
      from: this._cm_as_pos(fromto.from),
      to: this._cm_as_pos(fromto.to),
      clasz: (ref = mark.className) != null ? ref : ''
    };
  };

  //===========================================================================================================
  // SET TSRs, TRANSCRIPTORS
  //-----------------------------------------------------------------------------------------------------------
  this.format_tsr_marks = function(d) {
    var cursor, finds, from, fromto, i, len, pattern, ref, ref1, ref2, ref3, text, to, tsnr, tsrm_prefix, tsrm_suffix;
    // S.codemirror.editor.getSearchCursor /ðŸ›¸(?<tsnr>[0-9]+):(?<text>[.*?])$/, start, options)
    /* TAINT precompute, store in S: */
    /* TAINT code duplication */
    tsrm_prefix = (ref = (ref1 = S.transcriptor_region_markers) != null ? ref1.prefix : void 0) != null ? ref : '\u{f11c}';
    tsrm_suffix = (ref2 = (ref3 = S.transcriptor_region_markers) != null ? ref3.suffix : void 0) != null ? ref2 : '\u{f005}';
    pattern = RegExp(`${tsrm_prefix}(?<tsnr>[0-9]+)${tsrm_suffix}`);
    finds = [];
    cursor = S.codemirror.editor.getSearchCursor(pattern);
    // @log 'Âµ11121', rpr ( key for key of cursor )
    //.........................................................................................................
    while (cursor.findNext()) {
      from = cursor.from();
      to = cursor.to();
      fromto = {from, to};
      text = this.cm_get_text(fromto);
      ({tsnr} = (text.match(pattern)).groups);
      tsnr = parseInt(tsnr, 10);
      finds.push({fromto, tsnr});
    }
//.........................................................................................................
    for (i = 0, len = finds.length; i < len; i++) {
      ({fromto, tsnr} = finds[i]);
      this.log("Âµ46674", `found TSR mark at ${rpr(fromto)}: ${rpr(text)} (TS #${tsnr})`);
      this.cm_format_as_tsr_mark(fromto, tsnr);
    }
    //.........................................................................................................
    return null;
  };

  // for line_idx in [ S.codemirror.editor.firstLine() .. S.codemirror.editor.lastLine() ]
  //   text =

  //-----------------------------------------------------------------------------------------------------------
  this.cm_format_as_tsr_mark = function(fromto, tsnr) {
    /* TAINT use own API */
    var settings;
    settings = {
      className: `tsr tsr${tsnr}`,
      atomic: true,
      inclusiveLeft: false,
      inclusiveRight: false
    };
    S.codemirror.editor.markText(fromto.from, fromto.to, settings);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_insert_tsr_mark = function(fromto, tsnr) {
    /* TAINT use configured TS sigil instead of tsnr */
    /* TSRM: TranScription Region Marker. TSR extends from marker up to cursor. */
    /* TAINT precompute, store in S.transcriptors: */
    var clasz, fromto_right, ref, ref1, ref2, ref3, settings, tsrm, tsrm_prefix, tsrm_suffix;
    tsrm_prefix = (ref = (ref1 = S.transcriptor_region_markers) != null ? ref1.prefix : void 0) != null ? ref : '\u{f11c}';
    tsrm_suffix = (ref2 = (ref3 = S.transcriptor_region_markers) != null ? ref3.suffix : void 0) != null ? ref2 : '\u{f005}';
    tsrm = `${tsrm_prefix}${tsnr}${tsrm_suffix}`;
    clasz = `tsr tsr${tsnr}`;
    fromto_right = {
      line: fromto.from.line,
      ch: fromto.from.ch + tsrm.length
    };
    settings = {
      className: clasz,
      atomic: true,
      inclusiveLeft: false,
      inclusiveRight: false
    };
    /* TAINT use own API */
    S.codemirror.editor.replaceRange(tsrm, fromto.from);
    S.codemirror.editor.markText(fromto.from, fromto_right, settings);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_set_tsrs = function(tsnr) {
    /* Bound to `ctrl+0` ... `ctrl+4` */
    var action, clasz, delta, fromto, i, len, ref;
    action = tsnr === 0 ? 'clear' : 'set';
    if (action === 'clear') {
      this.log('Âµ48733-1', "clear TSR not implemented");
      return null;
    }
    delta = action === 'clear' ? -1 : +1;
    clasz = `tsr tsr${tsnr}`;
    ref = this.cm_get_selections_as_fromtos();
    for (i = 0, len = ref.length; i < len; i++) {
      fromto = ref[i];
      if (!this.cm_range_is_point(fromto)) {
        this.log('Âµ48733-2', "non-point ranges not implemented");
        return null;
      }
      this.log('Âµ48733-4', rpr(fromto));
      /* TAINT allow to configure appearance of TSR mark */
      // tsrm = "[#{S.transcriptors[ tsnr ].display_name}:"
      this.cm_insert_tsr_mark(fromto, tsnr);
    }
    this.emit_transcribe_event();
    return null;
  };

  //===========================================================================================================
  // DIAGNOSTICS
  //-----------------------------------------------------------------------------------------------------------
  this.cm_jump_to_tsr_or_bracket = function() {
    return this.log('Âµ44455', "cm_jump_to_tsr_or_bracket not implemented");
  };

  this.cm_mark_tsr_or_bracket = function() {
    return this.log('Âµ44455', "cm_mark_tsr_or_bracket not implemented");
  };

}).call(this);

//# sourceMappingURL=ops-cm.js.map
