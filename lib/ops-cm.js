// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, PD, alert, badge, debug, help, info, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS-CM';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  //...........................................................................................................
  PD = require('pipedreams');

  //-----------------------------------------------------------------------------------------------------------
  this._cm_as_pos = function(x) {
    return {
      line: x.line,
      ch: x.ch
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this./* Unify position-like objects */_cm_order_positions = function(positions) {
    return positions.sort(function(a, b) {
      if (a.line < b.line) {
        return -1;
      }
      if (a.line > b.line) {
        return +1;
      }
      if (a.ch < b.ch) {
        return -1;
      }
      if (a.ch > b.ch) {
        return +1;
      }
      return 0;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this._cm_fromto_from_range = function(range) {
    /* Given a `range` with `anchor` and `head` properties (which must both be positions, i.e.
    `{ line, ch, }` objects), return a `{ from, to, }` object where `from` comes always before or coincides
    with `to` in the document. This is needed to convert an object returned e.g. as selection to an
    argument that can be used by `markText()`. */
    var p, q;
    [p, q] = this._cm_order_positions([this._cm_as_pos(range.anchor), this._cm_as_pos(range.head)]);
    return {
      from: p,
      to: q
    };
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.cm_select_all = function() {
    return CodeMirror.commands.selectAll(S.codemirror.editor);
  };

  this.cm_select_only_first = function() {
    return CodeMirror.commands.singleSelection(S.codemirror.editor);
  };

  this.cm_get_selections = function() {
    return S.codemirror.editor.doc.listSelections();
  };

  this.cm_get_selection_texts = function() {
    return S.codemirror.editor.doc.getSelections();
  };

  this.cm_get_selections_as_fromtos = function() {
    var i, len, ref, results, s;
    ref = this.cm_get_selections();
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      results.push(this._cm_fromto_from_range(s));
    }
    return results;
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @cm_select_only_in_single_line = ->

  //-----------------------------------------------------------------------------------------------------------
  this.cm_set_mark = function(fromto, clasz) {
    var settings;
    this.log('µ34333', `set mark ${rpr(clasz)} at ${rpr(fromto)}`);
    settings = {
      className: clasz,
      inclusiveLeft: true,
      inclusiveRight: true
    };
    return S.codemirror.editor.markText(fromto.from, fromto.to, settings);
  };

  //-----------------------------------------------------------------------------------------------------------
  // @cm_clear_translation_mark = ->
  //   return 0 unless S.translation_mark?
  //   S.translation_mark.clear()
  //   S.translation_mark = null
  //   return 1

  //-----------------------------------------------------------------------------------------------------------
  this.cm_get_marks_in_range = function(fromto) {
    return S.codemirror.editor.findMarks(fromto.from, fromto.to);
  };

  this.cm_get_mark_fromtos_in_range = function(fromto) {
    var i, len, ref, results, t;
    ref = this.cm_get_marks_in_position(fromto);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      t = ref[i];
      results.push(this._cm_as_pos(t.find()));
    }
    return results;
  };

  this.cm_get_marks_in_position = function(position) {
    return S.codemirror.editor.findMarksAt(position);
  };

  this.cm_get_cursor = function() {
    return this._cm_as_pos(S.codemirror.editor.getCursor('head'));
  };

  this.cm_get_text = function(fromto) {
    return S.codemirror.editor.getRange(fromto.from, fromto.to);
  };

  this.cm_text_from_mark = function(mark) {
    return this.cm_get_text(mark.find());
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_select = function(fromto) {
    this.log('µ34484', `cm_select: ${rpr(fromto)}`);
    return S.codemirror.editor.setSelection(fromto.from, fromto.to);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.position_and_clasz_from_mark = function(mark) {
    var fromto;
    fromto = mark.find();
    return {
      from: this._cm_as_pos(fromto.from),
      to: this._cm_as_pos(fromto.to),
      clasz: mark.className
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_set_tsrs = function(tsnr) {
    var action, clasz, count, delta, fromto, fromto1, i, j, len, len1, mark, marks, nl_count, range_is_point, ref;
    /* TAINT code duplication */
    // @cm_select_only_in_single_line()
    // @cm_clear_translation_mark()
    action = tsnr === 0 ? 'clear' : 'set';
    delta = action === 'clear' ? -1 : +1;
    clasz = `tsr tsr${tsnr}`;
    count = 0;
    ref = this.cm_get_selections_as_fromtos();
    for (i = 0, len = ref.length; i < len; i++) {
      fromto = ref[i];
      range_is_point = CND.equals(fromto.from, fromto.to);
      if (range_is_point) {
        marks = this.cm_get_marks_in_position(fromto.from);
      } else {
        marks = this.cm_get_marks_in_range(fromto);
      }
      for (j = 0, len1 = marks.length; j < len1; j++) {
        mark = marks[j];
        ((mark) => {
          this.log('µ34464', `found existing mark: ${rpr(this.position_and_clasz_from_mark(mark))}`);
          return mark.clear();
        })(mark);
      }
      if (action === 'set') {
        if (range_is_point) {
          S.codemirror.editor.replaceRange('\ue044', fromto.from);
          fromto1 = {
            from: fromto.from,
            to: {
              line: fromto.from.line,
              ch: fromto.from.ch + 1
            }
          };
          this.cm_select(fromto1);
          mark = this.cm_set_mark(fromto1, clasz);
        } else {
          /* TAINT trailing newlines, empty lines are probably a bad idea; if CodeMirror would only visibly
          mark those */
          // S.codemirror.editor.setBookmark fromto.from, { widget: ( jQuery "<span class='widget'></span>" )[ 0 ], }
          if ((nl_count = ((this.cm_get_text(fromto)).match(/(\n*)$/))[1].length) > 0) {
            this.log('µ32873', `fromto ${rpr(fromto)} contains empty lines`);
          }
          mark = this.cm_set_mark(fromto, clasz);
        }
      }
    }
    // mark.on 'beforeCursorEnter', => @log 'µ44333', "entered tsr #{rpr @position_and_clasz_from_mark mark}"
    return count;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_mark_tsrs = function() {
    var clasz, from, fromto, i, j, len, len1, mark, marks, ref, to;
    ref = this.cm_get_selections_as_fromtos();
    /* TAINT code duplication */
    for (i = 0, len = ref.length; i < len; i++) {
      fromto = ref[i];
      if (CND.equals(fromto.from, fromto.to)) {
        marks = this.cm_get_marks_in_position(fromto.from);
      } else {
        marks = this.cm_get_marks_in_range(fromto);
      }
      if (marks.length === 0) {
        this.log('µ83733', `didn't find any marks at ${rpr(fromto)}`);
      } else {
        for (j = 0, len1 = marks.length; j < len1; j++) {
          mark = marks[j];
          this.log('µ34464', `found existing mark: ${rpr(this.position_and_clasz_from_mark(mark))}`);
          ({from, to, clasz} = this.position_and_clasz_from_mark(mark));
          mark.clear();
          clasz = (clasz.match(/\bhilite\b/)) != null ? clasz.replace(/\s*hilite\s*/g, ' ') : clasz + ' hilite';
          this.cm_set_mark({from, to}, clasz);
        }
      }
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.cm_find_transcriptor_and_tsr = function() {
    var clasz, from, marks, to;
    /* TAINT code duplication */
    // @log 'µ36633', 'cm_find_ts', "cursor at #{rpr @cm_get_cursor()}"
    marks = this.cm_get_marks_in_position(this.cm_get_cursor());
    //.........................................................................................................
    if (marks.length === 0) {
      S.tsnr = 0;
      S.tsr = null;
      S.tsr_text = null;
      S.transcriptor = S.transcriptors[0];
    } else {
      //.........................................................................................................
      ({clasz, from, to} = this.position_and_clasz_from_mark(marks[0]));
      S.tsnr = parseInt(clasz.replace(/^.*\btsr([0-9]+)\b.*$/, '$1'), 10);
      if (!CND.isa_number(S.tsnr)) {
        S.tsnr = 0;
      }
      S.tsr_text = this.cm_text_from_mark(marks[0]);
      S.transcriptor = S.transcriptors[S.tsnr];
      //.......................................................................................................
      if (S.transcriptor == null) {
        S.tsnr = 0;
        S.transcriptor = S.transcriptors[S.tsnr];
      }
    }
    //.........................................................................................................
    this.log('µ34464', `TS#${rpr(S.tsnr)} (${rpr(S.transcriptor.display_name)})`);
    if (S.tsnr !== 0) {
      XE.emit(PD.new_event('^transcribe', {
        text: S.tsr_text,
        from,
        to
      }));
    }
    return null;
  };

}).call(this);

//# sourceMappingURL=ops-cm.js.map
