{
  "version": 3,
  "file": "ops-transcription.js",
  "sourceRoot": "..",
  "sources": [
    "src/ops-transcription.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/OPS-TRANSCRIPTION'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nKEYS                      = require '../lib/keys'\nT                         = require '../lib/templates'\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ jr, }                   = CND\n{ after, }                = CND.suspend\ndefer                     = setImmediate\n{ $\n  $async }                = PD\n# XE                        = null\nXE                        = require '../lib/xemitter'\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n\n\n\n#===========================================================================================================\n# INPUT TRANSLATION\n#-----------------------------------------------------------------------------------------------------------\n@load_transcriptors = ->\n  ### TAINT stopgap code ###\n  ### TAINT should search home directory, node_modules as well ###\n  ### TAINT use glob ###\n  PATH            = require 'path'\n  FS              = require 'fs'\n  ops             = {}\n  directory_path  = PATH.resolve PATH.join __dirname, './transcriptors'\n  for module_name in FS.readdirSync directory_path\n    module_path           = PATH.join directory_path, module_name\n    continue unless module_name.endsWith    '.trs.js'\n    relative_module_path  = PATH.relative process.cwd(), module_path\n    urge \"µ44755 loading transcription #{relative_module_path}\"\n    transcription_module  = require module_path\n    ### TAINT call init method if found ###\n  return null\n\n\n#===========================================================================================================\n# INPUT TRANSLATION\n#-----------------------------------------------------------------------------------------------------------\n@set_translation_mark = ( position_from, position_to ) ->\n  settings =\n    className:      'txtmark_xxx'\n    inclusiveLeft:  false\n    inclusiveRight: true\n  return S.codemirror.editor.markText position_from, position_to, settings\n\n#-----------------------------------------------------------------------------------------------------------\n@set_transcription = ( xxx ) ->\n\n#-----------------------------------------------------------------------------------------------------------\n@input_event_from_change_object = ( change ) ->\n  ### Transform `^raw-input` to `^input` events ###\n  #.........................................................................................................\n  { editor, }     = S.codemirror\n  { doc, }        = editor\n  cursor          = doc.getCursor()\n  #.........................................................................................................\n  ### TAINT kludge to collapse multiple selections into a single one ###\n  CodeMirror.commands.singleSelection editor\n  #.........................................................................................................\n  line_idx        = cursor.line\n  line_handle     = doc.getLineHandle line_idx\n  line_info       = doc.lineInfo line_handle ### TAINT consider to use line_idx, forego line_handle ###\n  { text, }       = line_info\n  #.........................................................................................................\n  return PD.new_event '^input', { change, line_idx, text, }\n\n\n#-----------------------------------------------------------------------------------------------------------\n@display_candidates = ( d ) ->\n  @focusframe_to_candidates() unless S.focus_is_candidates\n  v       = d.value\n  rows    = ( ( T.get_flexgrid_html ( idx + 1 ), glyph ) for glyph, idx in v.candidates ).join '\\n'\n  ( jQuery '#candidates-flexgrid div' ).remove()\n  ( jQuery '#candidates-flexgrid'     ).append rows\n  #.........................................................................................................\n  ### TAINT code duplication ###\n  glyphboxes = jQuery '#candidates-flexgrid div.glyph'\n  glyphboxes.on 'click', ( e ) =>\n    me = jQuery e.target\n    ### TAINT code duplication ###\n    ### TAINT use API to move selection ###\n    glyphboxes.removeClass  'cdtsel'\n    me.addClass             'cdtsel'\n    @log \"µ33983-1 #{me.text()} #{jr me.offset()}\"\n  #.........................................................................................................\n  @index_candidates()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@index_candidates = ->\n  ### Add or update each candidate `<div class=glyph> with attributes indicating its left- and right-based\n  column and row numbers, starting from 1. Elements that match `jQuery '[lrow=1]'` are in the first row from\n  the top, while those that match `jQuery '[rrow=1]'` are in the last row from top (first row from the\n  bottom). Likewise, `lcol=1`, `rcol=1` match the leftmost and rightmost elements. These indexes have to be\n  re-calculated after each container resize event, but simplify the code needed to select single and groups\n  of elements. The beauty of the scheme is that we can select e.g. all leftmost elements or all elements\n  in the first row (should the need ever arise). ###\n  ### TAINT code duplication ###\n  glyphboxes      = jQuery '#candidates-flexgrid div.glyph'\n  lcol            = 0\n  lrow            = 0\n  prv_top         = null\n  candidate_count = glyphboxes.length\n  lnr             = 0\n  rnr             = candidate_count + 1\n  rows            = []\n  row             = null\n  #.........................................................................................................\n  @log \"index_candidates() (#{candidate_count})\"\n  #.........................................................................................................\n  for idx in [ 0 ... candidate_count ]\n    glyphbox = glyphboxes.eq idx\n    #.......................................................................................................\n    if ( nxt_top = glyphbox.offset().top ) isnt prv_top\n      if row?\n        rows.push row\n        col_count = row.length\n        for sub_glyphbox, col_idx in row\n          sub_glyphbox.attr 'rcol', col_count - col_idx\n      #.....................................................................................................\n      row = []\n      prv_top = nxt_top\n      lcol    = 0\n      lrow   += +1\n    #.......................................................................................................\n    row.push glyphbox\n    lnr      += +1\n    rnr      += -1\n    lcol     += +1\n    #.......................................................................................................\n    glyphbox.attr 'lnr',  lnr\n    glyphbox.attr 'rnr',  rnr\n    glyphbox.attr 'lcol', lcol\n    glyphbox.attr 'lrow', lrow\n  #.........................................................................................................\n  rows.push row if row?\n  row_count = rows.length\n  for row, row_idx in rows\n    for glyphbox in row\n      glyphbox.attr 'rrow', row_count - row_idx\n  #.........................................................................................................\n  rows.length = 0 ### not strictly needed, just to make de-allocation explicit ###\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@insert_space_or_selection = ->\n  ### TAINT this implementation precludes any other functionality that the space bar might be associated\n  with in CodeMirror ###\n  cdtsel = jQuery '.cdtsel'\n  ### TAINT honour multiple selection ###\n  text   = if cdtsel.length > 0 then cdtsel.text() else ' '\n  S.codemirror.editor.replaceSelection text\n  @focusframe_to_editor()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_select_delta_candidate = ( deltas ) ->\n  ### Select next candidate(s) based on `deltas`, which should be an object with one or more of the\n  following members:\n\n  * **`lnr`**:     left-anchored  candidate         number\n  * **`lcol`**:    left-anchored  column            number\n  * **`lrow`**:    left-anchored  row (i.e. line)   number\n  * **`rnr`**:     right-anchored candidate         number\n  * **`rcol`**:    right-anchored column            number\n  * **`rrow`**:    right-anchored row (i.e. line)   number\n\n  Left-anchored values count from the usual (i.e. top or left) end of that dimension, richt-anchored ones\n  from the opposite sides; for example, `lcol: 1` selects the first (leftmost), `rcol: 1` the last\n  (rightmost) entry in each row; `lrow: 1` the first row, `rrow: 1` the last one; in a line with, say, five\n  candidates, `lrow: 4` is equivalent to `rrow: 2`, and `lrow: 5` is the same as `rrow: 1`.\n\n  Each entry may be either a positive or negative integer, or zero, or 'first', or 'last'. A non-zero number\n  indicates the number of steps to go in the respective dimension while zero indicates 'keep this value'.\n  For example, to move right irregardless of line breaks, use `{ lnr: +1, }`. To move to the first entry on\n  the next line, use `{ lcol: 'first', lrow: +1, }`. To go to the last entry of the current row, use `{\n  lrow: 0, lcol: 'last', }` or `{ lrow: 0, rcol: 'first', }`. The selected candidates are the intersection\n  of all sub-selectors.\n\n  This method will have no effect unless there is one or more selected entries to start with. ###\n  #.........................................................................................................\n  R                   = 0\n  prv_cdtsel          = jQuery '.cdtsel'\n  #.........................................................................................................\n  if prv_cdtsel.length is 0\n    @log \"_select_delta_candidate: no candidate selected\"\n    return R\n  #.........................................................................................................\n  ### TAINT code duplication ###\n  glyphboxes    = jQuery '#candidates-flexgrid div.glyph'\n  nxt_selector  = []\n  #.........................................................................................................\n  for delta_key, delta_value of deltas\n    switch type = CND.type_of delta_value\n      when 'text'\n        switch delta_value\n          when 'first'\n            nxt_selector.push \"[#{delta_key}=1]\"\n          when 'last'\n            delta_key = delta_key.replace /^[rl]/, ( $0 ) -> if $0 is 'l' then 'r' else 'l'\n            nxt_selector.push \"[#{delta_key}=1]\"\n          else throw new Error \"µ37634 unknown move command #{rpr delta_value}\"\n      when 'number'\n        prv_value = parseInt ( prv_cdtsel.attr delta_key ),  10\n        nxt_value = prv_value + delta_value\n        nxt_selector.push \"[#{delta_key}=#{nxt_value}]\"\n      else throw new Error \"µ37633 expected a text or a number, got a #{type}\"\n  nxt_selector = nxt_selector.join ''\n  @log \"_select_delta_candidate #{jr deltas} #{jr nxt_selector}\"\n  return R if ( R = ( nxt_cdtsel = glyphboxes.filter nxt_selector ).length ) is 0\n  prv_cdtsel.removeClass  'cdtsel'\n  nxt_cdtsel.addClass     'cdtsel'\n  nxt_cdtsel[ 0 ].scrollIntoViewIfNeeded()\n  return R\n"
  ]
}