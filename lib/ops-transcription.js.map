{
  "version": 3,
  "file": "ops-transcription.js",
  "sourceRoot": "..",
  "sources": [
    "src/ops-transcription.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA;IAAA,oBAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,aAAR;;EAC5B,CAAA,GAA4B,OAAA,CAAQ,kBAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR,EAjB5B;;;EAmBA,EAAA,GAA4B,OAAA,CAAQ,YAAR;;EAC5B,CAAA,CAAE,EAAF,CAAA,GAA4B,GAA5B;;EACA,CAAA,CAAE,KAAF,CAAA,GAA4B,GAAG,CAAC,OAAhC;;EACA,MAAA,GAA4B,MAAM,CAAC;;EACnC,KAAA,GAA4B;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,CAAA,GAC4B,EAD5B,EAxBA;;;EA2BA,EAAA,GAA4B,OAAA,CAAQ,iBAAR;;EAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,OAAA,CAAQ,MAAR,CAA5B;;EACA,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,OAAA,CAAQ,CAAR,EAAW;MAAE,MAAA,EAAQ,IAAV;MAAe,WAAA,EAAa,KAA5B;MAAsC,cAAA,EAAgB,KAAtD;MAAgE,KAAA,EAAO;IAAvE,CAAX;EAAT;;EAC5B,KAAA,GAA4B,OAAA,CAAQ,SAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,KAF5B,EA/BA;;;;;EAwCA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAA,CAAA;AAKpB,QAAA,KAAA,EAAA,cAAA,EAAA,EAAA,EAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,mBAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,aAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,cAAA,EAAA;IAAA,IAAA,GAAsB,OAAA,CAAQ,MAAR;IACtB,EAAA,GAAsB,OAAA,CAAQ,IAAR;IACtB,IAAA,GAAsB;IACtB,GAAA,GAAsB,CAAA;IACtB,cAAA,GAAsB,IAAI,CAAC,OAAL,CAAa,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,iBAArB,CAAb;IACtB,mBAAA,GAAsB,CACpB,UADoB,EAEpB,eAFoB;IAGtB,CAAC,CAAC,aAAF,GAAsB;IACtB,cAAA,GAAsB,CAAA,EATtB;;;IAYA,EAAA,GAAsB,CAAA;IACtB,EAAE,CAAC,aAAH,GAAsB;IACtB,EAAE,CAAC,YAAH,GAAsB,EAAE,CAAC;IACzB,EAAE,CAAC,IAAH,GAAsB;IACtB,EAAE,CAAC,KAAH,GAAsB;IACtB,EAAE,CAAC,IAAH,GAAsB;IACtB,EAAE,CAAC,MAAH,GAAsB;IACtB,CAAC,CAAC,aAAa,CAAC,IAAhB,CAAqB,EAArB;AAEA;;IAAA,KAAA,qCAAA;;MACE,IAAA,CAAgB,QAAQ,CAAC,QAAT,CAAkB,QAAlB,CAAhB;AAAA,iBAAA;;MACA,EAAA,GAAM,IAAI,CAAC,GAAL,CAAA,EADN;;MAGA,IAAA,IAAwB,CAAC;MACzB,EAAA,GAAwB,CAAA;MACxB,EAAE,CAAC,IAAH,GAAwB;MACxB,EAAE,CAAC,IAAH,GAAwB,IAAI,CAAC,IAAL,CAAU,cAAV,EAA0B,QAA1B;MACxB,EAAE,CAAC,aAAH,GAAwB;MACxB,EAAE,CAAC,aAAH,GAAwB,EAAE,CAAC,aAAa,CAAC,OAAjB,CAAyB,YAAzB,EAAuC,EAAvC;MACxB,EAAE,CAAC,aAAH,GAAwB,EAAE,CAAC,aAAa,CAAC,OAAjB,CAAyB,IAAzB,EAA+B,GAA/B;MACxB,EAAE,CAAC,YAAH,GAAwB,EAAE,CAAC;MAC3B,EAAE,CAAC,KAAH,GAAwB,CAAA,EAAA,CAAA,CAAK,EAAE,CAAC,IAAR,CAAA,EAXxB;;MAaA,aAAA,GAAwB,IAAI,CAAC,QAAL,CAAc,OAAO,CAAC,GAAR,CAAA,CAAd,EAA6B,EAAE,CAAC,IAAhC;MACxB,IAAC,CAAA,GAAD,CAAK,CAAA,6BAAA,CAAA,CAAgC,aAAhC,CAAA,CAAL;MACA,EAAE,CAAC,MAAH,GAAwB,OAAA,CAAQ,EAAE,CAAC,IAAX,EAfxB;;;;;;;;;MAwBA,IAAG,8BAAH;QACE,IAAO,CAAE,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,EAAE,CAAC,MAAM,CAAC,YAAtB,CAAT,CAAA,KAAiD,MAAxD;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,2BAAA,CAAA,CAA8B,aAA9B,CAA4C,qBAA5C,CAAA,CAAmE,IAAnE,CAAA,CAAV,EADR;;QAEA,EAAE,CAAC,YAAH,GAAkB,EAAE,CAAC,MAAM,CAAC,aAH9B;OAxBA;;MA6BA,IAAG,uBAAH;QACE,IAAO,CAAE,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,EAAE,CAAC,MAAM,CAAC,KAAtB,CAAT,CAAA,KAA0C,MAAjD;UACE,MAAM,IAAI,KAAJ,CAAU,CAAA,2BAAA,CAAA,CAA8B,aAA9B,CAA4C,cAA5C,CAAA,CAA4D,IAA5D,CAAA,CAAV,EADR;;QAEA,EAAE,CAAC,KAAH,GAAW,EAAE,CAAC,MAAM,CAAC,MAHvB;OA7BA;;MAkCA,WAAO,CAAE,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,EAAE,CAAC,MAAM,CAAC,aAAtB,CAAT,CAAA,EAAA,aAAkD,mBAAlD,EAAA,IAAA,KAAP;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,+BAAA,CAAA,CAAkC,aAAlC,CAAgD,sBAAhD,CAAA,CAAwE,IAAxE,CAAA,CAAV,EADR;;MAEA,IAAO,CAAE,KAAA,GAAQ,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,MAAlC,CAAA,KAA8C,CAArD;QACE,MAAM,IAAI,KAAJ,CAAU,CAAA,aAAA,CAAA,CAAgB,KAAhB,CAAsB,KAAtB,CAAA,CAA6B,aAA7B,CAA2C,8BAA3C,CAAV,EADR;OApCA;;MAuCA,CAAC,CAAC,cAAgB,CAAA,EAAE,CAAC,KAAH,CAAlB,GAA+B,EAAE,CAAC;MAClC,CAAC,CAAC,aAAa,CAAC,IAAhB,CAAqB,EAArB;MACA,EAAA,GAAM,IAAI,CAAC,GAAL,CAAA;MACN,EAAA,GAAM,EAAA,GAAK;MACX,IAAC,CAAA,GAAD,CAAK,CAAA,OAAA,CAAA,CAAU,QAAV,CAAmB,WAAnB,CAAA,CAAgC,GAAA,CAAI,EAAE,CAAC,YAAP,CAAhC,CAAoD,OAApD,CAAA,CAA6D,EAAE,CAAC,IAAhE,CAAqE,OAArE,CAAA,CAA8E,EAA9E,CAAiF,IAAjF,CAAL;IA5CF,CArBA;;;AAoEA,WAAO;EAzEa,EAxCtB;;;;;EAsHA,IAAC,CAAA,oBAAD,GAAwB,QAAA,CAAE,CAAF,CAAA;AAMtB,QAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,EAAA,EAAA,UAAA,EAAA,UAAA,EAAA,IAAA;;;;;;IAAA,UAAA,iGAAwD;IACxD,UAAA,mGAAwD;IACxD,OAAA,GAAgB,MAAA,CAAA,CAAA,CAAA,CAAM,UAAN,CAAiB,WAAjB,CAAA,CAA+B,UAA/B,CAA0C,GAA1C,CAAA,CAAgD,UAAhD,CAAA,CAAA;IAChB,KAAA,GAAgB;IAChB,MAAA,GAAgB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,eAApB,CAAoC,OAApC,EAJhB;;;AAOA,WAAM,MAAM,CAAC,QAAP,CAAA,CAAN;MACE,IAAA,GAAgB,MAAM,CAAC,IAAP,CAAA;MAChB,EAAA,GAAgB,MAAM,CAAC,EAAP,CAAA;MAChB,MAAA,GAAgB,CAAE,IAAF,EAAQ,EAAR;MAChB,IAAA,GAAgB,IAAC,CAAA,WAAD,CAAa,MAAb;MAChB,CAAA,CAAE,KAAF,CAAA,GAAgB,CAAE,IAAI,CAAC,KAAL,CAAW,OAAX,CAAF,CAAsB,CAAC,MAAvC;MACA,IAAA,GAAgB,CAAC,CAAC,cAAgB,CAAA,KAAA,EALlC;;MAOA,KAAK,CAAC,IAAN,CAAW,CAAE,MAAF,EAAU,IAAV,EAAgB,KAAhB,CAAX;IARF,CAPA;;IAiBA,KAAA,uCAAA;OAAI,CAAE,MAAF,EAAU,IAAV,EAAgB,KAAhB;MACF,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,CAAA,aAAA,CAAA,CAAgB,GAAA,CAAI,MAAJ,CAAhB,CAA2B,EAA3B,CAAA,CAA+B,GAAA,CAAI,IAAJ,CAA/B,CAAwC,MAAxC,CAAA,CAAgD,IAAhD,CAAqD,CAArD,CAAf;MACA,IAAC,CAAA,yBAAD,CAA2B,MAA3B,EAAmC,IAAnC,EAAyC,KAAzC;IAFF,CAjBA;;AAqBA,WAAO;EA3Be,EAtHxB;;;;;;EAsJA,IAAC,CAAA,yBAAD,GAA6B,QAAA,CAAE,MAAF,EAAU,IAAV,EAAgB,KAAhB,CAAA;AAI3B,QAAA,KAAA,EAAA,QAAA;;;;IAAA,QAAQ,CAAC,KAAT,CAAgB,MAAhB;IACA,QAAQ,CAAC,IAAT,CAAgB,IAAhB;IACA,KAAA,GAAgB,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA;IAChB,QAAA,GACE;MAAA,UAAA,EAAkB,CAAE,IAAF,CAAlB;MACA,YAAA,EAAkB,CAAE,MAAA,CAAO,CAAA,YAAA,CAAA,CAAe,EAAA,CAAG,KAAH,CAAf,CAAwB,CAAxB,CAAA,CAA2B,KAA3B,CAAiC,OAAjC,CAAP,CAAF,CAAsD,CAAA,CAAA,CADxE;MAEA,MAAA,EAAkB,IAFlB;MAGA,aAAA,EAAkB,KAHlB;MAIA,cAAA,EAAkB;IAJlB,EAJF;;IAUA,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,QAApB,CAA6B,MAAM,CAAC,IAApC,EAA0C,MAAM,CAAC,EAAjD,EAAqD,QAArD;AACA,WAAO;EAfoB,EAtJ7B;;;EAwKA,IAAC,CAAA,sBAAD,GAA0B,QAAA,CAAE,QAAF,EAAY,IAAZ,EAAkB,KAAlB,CAAA;AAKxB,QAAA,KAAA,EAAA,cAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,QAAA,EAAA,GAAA,EAAA,UAAA,EAAA,UAAA;;;;;IAAA,QAAQ,CAAC,QAAT,CAAkB,QAAlB;IACA,QAAQ,CAAC,IAAT,CAAkB,IAAlB;IACA,cAAA,0EAAsE;IACtE,QAAA,+HAAsE,KAHtE;;IAKA,IAAG,CAAE,IAAA,KAAU,CAAZ,CAAA,IAAoB,CAAE,CAAM,sBAAN,CAAA,IAA2B,CAAE,QAAA,KAAc,IAAhB,CAA7B,CAAvB;MACE,UAAA,mGAAwD;MACxD,UAAA,mGAAwD;MACxD,GAAA,GAAgB,CAAA,CAAA,CAAG,UAAH,CAAA,CAAA,CAAgB,KAAhB,CAAA,CAAA,CAAwB,UAAxB,CAAA;MAChB,KAAA,GAAgB,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA;MAChB,SAAA,GAAgB;QAAE,IAAA,EAAM,QAAQ,CAAC,IAAjB;QAAuB,EAAA,EAAM,QAAQ,CAAC,EAAT,GAAc,GAAG,CAAC;MAA/C;MAChB,QAAA,GACE;QAAA,UAAA,EAAkB,CAAE,IAAF,CAAlB;QACA,YAAA,EAAkB,CAAE,MAAA,CAAO,CAAA,YAAA,CAAA,CAAe,EAAA,CAAG,KAAH,CAAf,CAAwB,CAAxB,CAAA,CAA2B,KAA3B,CAAiC,OAAjC,CAAP,CAAF,CAAsD,CAAA,CAAA,CADxE;QAEA,MAAA,EAAkB,IAFlB;QAGA,aAAA,EAAkB,KAHlB;QAIA,cAAA,EAAkB;MAJlB,EANF;;MAYA,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,YAApB,CAAiC,GAAjC,EAAsC,QAAtC;MACA,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,QAApB,CAA6B,QAA7B,EAAuC,SAAvC,EAAkD,QAAlD,EAdF;;IAgBA,IAAwC,sBAAxC;;MAAA,IAAC,CAAA,oBAAD,CAAsB,cAAtB,EAAA;;AACA,WAAO;EA3BiB,EAxK1B;;;EAsMA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,IAAF,CAAA,EAAA;;AAEZ,QAAA,QAAA,EAAA,EAAA;;IAAA,QAAQ,CAAC,IAAT,CAAgB,IAAhB;IAEA,EAAA,GAAY,CAAC,CAAC,aAAe,CAAA,IAAA;;MAC7B,KAAY,CAAC,CAAC,aAAe,CAAA,CAAA;;IAC7B,QAAA,GAAY,IAAC,CAAA,eAAD,CAAA;IACZ,IAAC,CAAA,sBAAD,CAAwB,QAAxB,EAAkC,IAAlC,EAAwC,EAAE,CAAC,KAA3C,EALA;;AAOA,WAAO;EATK,EAtMd;;;;;;;;;;;;;;;;;;EAiOA,IAAC,CAAA,yBAAD,GAA6B,QAAA,CAAA,CAAA;WAAG,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,2CAAf;EAAH;;EAC7B,IAAC,CAAA,sBAAD,GAA6B,QAAA,CAAA,CAAA;WAAG,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,wCAAf;EAAH,EAlO7B;;;;;EAwOA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAA,CAAA,EAAA;;;;;;;;;AAOvB,QAAA,GAAA,EAAA,SAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,UAAA,EAAA,UAAA,EAAA;IAAA,QAAA,GAAgB,IAAC,CAAA,aAAD,CAAA,EAAhB;;IAEA,SAAA,GAAgB,CAAE,IAAC,CAAA,qBAAD,CAAuB,QAAQ,CAAC,IAAhC,CAAF,CAA0C;IAC1D,IAAe,SAAS,CAAC,MAAV,KAAoB,4EAAnC;AAAA,aAAO,KAAP;;IAGA,UAAA,iGAAwD;IACxD,UAAA,mGAAwD;IACxD,OAAA,GAAgB,MAAA,CAAA,CAAA,kBAAA,CAAA,CAKR,UALQ,CAKG,WALH,CAAA,CAMI,UANJ,CAMe,GANf,CAAA,CAOR,UAPQ,CAOG,gBAPH,CAAA;IAYhB,IAAc,0CAAd;AAAA,aAAA;;IACA,CAAA,CAAE,IAAF,EACE,KADF,EAEE,KAFF,EAGE,GAHF,CAAA,GAGgB,KAAK,CAAC,MAHtB;IAIA,IAAA,GAAgB,CAAC,CAAC,cAAgB,CAAA,KAAA;;MAClC,OAAgB;;IAEhB,IAAe,IAAA,KAAQ,CAAvB;;AAAA,aAAO,KAAP;KA5BA;;;IA+BA,MAAA,GACE;MAAA,IAAA,EAAgB,QAAQ,CAAC,IAAzB;MACA,EAAA,EAAgB,QAAQ,CAAC,EAAT,GAAc,GAAG,CAAC;IADlC,EAhCF;;IAmCA,MAAA,GACE;MAAA,IAAA,EACE;QAAA,IAAA,EAAc,QAAQ,CAAC,IAAvB;QACA,EAAA,EAAc,QAAQ,CAAC,EAAT,GAAc,KAAK,CAAC;MADlC,CADF;MAGA,EAAA,EACE;QAAA,IAAA,EAAc,QAAQ,CAAC,IAAvB;QACA,EAAA,EAAc,QAAQ,CAAC;MADvB;IAJF,EApCF;;IA2CA,GAAA,GACE;MAAA,IAAA,EACE;QAAA,IAAA,EAAc,MAAM,CAAC,IAArB;QACA,EAAA,EAAc,MAAM,CAAC;MADrB,CADF;MAGA,EAAA,EACE;QAAA,IAAA,EAAc,MAAM,CAAC,IAArB;QACA,EAAA,EAAc,MAAM,CAAC,EAAP,GAAY,IAAI,CAAC;MAD/B;IAJF,EA5CF;;IAmDA,EAAE,CAAC,IAAH,CAAQ,EAAE,CAAC,SAAH,CAAa,aAAb,EAA4B,CAAE,KAAF,EAAS,IAAT,EAAe,KAAf,EAAsB,MAAtB,EAA8B,GAA9B,EAAmC,MAAnC,CAA5B,CAAR;AACA,WAAO;EA3DgB,EAxOzB;;;EAsSA,IAAC,CAAA,yBAAD,GAA6B,QAAA,CAAE,CAAF,CAAA,EAAA;;;AAG3B,QAAA,GAAA,EAAA,IAAA,EAAA,YAAA,EAAA;IAAA,YAAA,GAAe,CAAC,CAAC,aAAe,CAAA,CAAC,CAAC,KAAK,CAAC,IAAR,EAAhC;;IAEA,IAAO,0GAAP;MACE,IAAA,GAAgB;MAChB,YAAA,GAAgB,CAAC,CAAC,aAAe,CAAA,IAAA,EAFnC;KAFA;;IAMA,IAAG,4GAAH;;MAEE,YAAY,CAAC,MAAM,CAAC,aAApB,CAAkC,CAAlC,EAFF;KAAA,MAAA;;MAKE,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,iBAAf,EALF;;AAMA,WAAO;EAfoB,EAtS7B;;;;;;;EA4TA,IAAC,CAAA,MAAD,GAAc,QAAA,CAAA,CAAA;WAAG,CAAC,CAAC,SAAF,GAAc;EAAjB;;EACd,IAAC,CAAA,SAAD,GAAc,QAAA,CAAA,CAAA;WAAG,CAAC,CAAC;EAAL;;EACd,IAAC,CAAA,IAAD,GAAc,QAAA,CAAA,CAAA;WAAG,CAAC,CAAC,SAAF,GAAc;EAAjB,EA9Td;;;EAiUA,IAAC,CAAA,eAAD,GAAmB,QAAA,CAAE,CAAF,CAAA;AAGjB,QAAA,MAAA,EAAA,CAAA;;;IAAA,QAAQ,CAAC,kBAAT,CAA4B,CAAA,GAAI,CAAC,CAAC,KAAlC;IACA,IAAC,CAAA,MAAD,CAAA,EADA;;IAGA,IAAG,eAAH;MACE,MAAA,GAAS;QAAE,IAAA,EAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAtB;QAA4B,EAAA,EAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAd,GAAmB,CAAC,CAAC,KAAK,CAAC;MAA7D;MACT,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,YAApB,CAAiC,EAAjC,EAAqC,CAAC,CAAC,MAAM,CAAC,IAA9C,EAAoD,MAApD,EAFF;KAAA,MAAA;MAIE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,YAApB,CAAiC,EAAjC,EAAqC,CAAC,CAAC,MAAM,CAAC,IAA9C,EAAoD,CAAC,CAAC,MAAM,CAAC,EAA7D,EAJF;KAHA;;;kCAUA,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,YAApB,CAAiC,CAAC,CAAC,KAAnC,EAA0C,CAAC,CAAC,MAA5C,EAVA;;;;yBAcA,IAAG,eAAH;MACE,IAAC,CAAA,qBAAD,CAAA,EADF;KAdA;;IAiBA,IAAC,CAAA,IAAD,CAAA;AACA,WAAO;EArBU,EAjUnB;;;EAyVA,IAAC,CAAA,kBAAD,GAAsB,QAAA,CAAE,CAAF,CAAA;AACpB,QAAA,KAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAA,CAAA,GAAI,CAAC,CAAC;IACN,CAAE,MAAA,CAAO,0BAAP,CAAF,CAAqC,CAAC,MAAtC,CAAA,EADA;;IAGA,IAAG,CAAC,CAAC,UAAU,CAAC,MAAb,KAAuB,CAA1B;MACE,IAAyB,CAAC,CAAC,mBAA3B;QAAA,IAAC,CAAA,qBAAD;OAAA;;AAEA,aAAO,KAHT;;IAKA,IAA+B,CAAE,CAAI,CAAC,CAAC,mBAAR,CAAA,IAAkC,4CAAuB,IAAvB,CAAjE;;MAAA,IAAC,CAAA,wBAAD,CAAA,EAAA;KARA;;IAUA,IAAA,GAAO;AACP;IAAA,KAAA,kDAAA;;MACE,IAAI,CAAC,IAAL,CAAU,CAAC,CAAC,iBAAF,CAAsB,GAAA,GAAM,CAA5B,EAAiC,KAAK,CAAC,SAAvC,CAAV;IADF;IAEA,CAAE,MAAA,CAAO,sBAAP,CAAF,CAAiC,CAAC,MAAlC,CAAyC,IAAI,CAAC,IAAL,CAAU,IAAV,CAAzC,EAbA;;;IAgBA,UAAA,GAAa,MAAA,CAAO,gCAAP;IACb,EAAA,GAAc,MAAA,CAAO,CAAA,CAAP,EAAW,CAAX;IACd,OAAO,EAAE,CAAC;IACV,UAAU,CAAC,EAAX,CAAc,OAAd,EAAuB,CAAE,CAAF,CAAA,GAAA;AACrB,UAAA,GAAA,EAAA,KAAA,EAAA,EAAA,EAAA,IAAA,EAAA;MAAA,EAAA,GAAK,MAAA,CAAO,CAAC,CAAC,MAAT,EAAL;;;MAGA,UAAU,CAAC,WAAX,CAAwB,QAAxB;MACA,EAAE,CAAC,QAAH,CAAwB,QAAxB,EAJA;;MAMA,GAAA,GAAQ,EAAE,CAAC,IAAH,CAAQ,KAAR,EANR;;;MASA,KAAA,wFAAuC;aACvC,EAAE,CAAC,IAAH,CAAQ,EAAE,CAAC,SAAH,CAAa,eAAb,EAA8B,MAAA,CAAO,EAAP,EAAW;QAAE,KAAA,EAAO,EAAE,CAAC,IAAH,CAAA,CAAT;QAAoB;MAApB,CAAX,CAA9B,CAAR;IAXqB,CAAvB,EAnBA;;IAgCA,IAAC,CAAA,gBAAD,CAAA;AACA,WAAO;EAlCa,EAzVtB;;;EA8XA,IAAC,CAAA,gCAAD,GAAoC,QAAA,CAAA,CAAA;AAIlC,QAAA;IAAA,IAAA,CAAuD,CAAC,CAAC,mBAAzD;;;;AAAA,aAAO,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,gBAApB,CAAqC,GAArC,EAAP;;IACA,MAAA,GAAS,MAAA,CAAO,SAAP,EADT;;IAGA,IAAG,MAAM,CAAC,MAAP,GAAgB,CAAnB;MACE,MAAM,CAAC,KAAP,CAAA,EADF;KAAA,MAAA;MAGE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,gBAApB,CAAqC,GAArC,EAHF;;IAIA,IAAC,CAAA,oBAAD,CAAA;AACA,WAAO;EAZ2B,EA9XpC;;;EA6YA,IAAC,CAAA,gBAAD,GAAoB,QAAA,CAAA,CAAA,EAAA;;;;;;;;;AASlB,QAAA,eAAA,EAAA,SAAA,EAAA,OAAA,EAAA,QAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,OAAA,EAAA,IAAA,EAAA;IAAA,UAAA,GAAkB,MAAA,CAAO,gCAAP;IAClB,IAAA,GAAkB;IAClB,IAAA,GAAkB;IAClB,OAAA,GAAkB;IAClB,eAAA,GAAkB,UAAU,CAAC;IAC7B,GAAA,GAAkB;IAClB,GAAA,GAAkB,eAAA,GAAkB;IACpC,IAAA,GAAkB;IAClB,GAAA,GAAkB,KARlB;;IAUA,IAAC,CAAA,GAAD,CAAK,CAAA,oBAAA,CAAA,CAAuB,eAAvB,CAAuC,CAAvC,CAAL,EAVA;;IAYA,KAAW,8FAAX;MACE,QAAA,GAAW,UAAU,CAAC,EAAX,CAAc,GAAd,EAAX;;MAEA,IAAG,CAAE,OAAA,GAAU,QAAQ,CAAC,MAAT,CAAA,CAAiB,CAAC,GAA9B,CAAA,KAAyC,OAA5C;QACE,IAAG,WAAH;UACE,IAAI,CAAC,IAAL,CAAU,GAAV;UACA,SAAA,GAAY,GAAG,CAAC;UAChB,KAAA,yDAAA;;YACE,YAAY,CAAC,IAAb,CAAkB,MAAlB,EAA0B,SAAA,GAAY,OAAtC;UADF,CAHF;SAAA;;QAMA,GAAA,GAAM;QACN,OAAA,GAAU;QACV,IAAA,GAAU;QACV,IAAA,IAAU,CAAC,EAVb;OAFA;;MAcA,GAAG,CAAC,IAAJ,CAAS,QAAT;MACA,GAAA,IAAY,CAAC;MACb,GAAA,IAAY,CAAC;MACb,IAAA,IAAY,CAAC,EAjBb;;MAmBA,QAAQ,CAAC,IAAT,CAAc,KAAd,EAAsB,GAAtB;MACA,QAAQ,CAAC,IAAT,CAAc,KAAd,EAAsB,GAAtB;MACA,QAAQ,CAAC,IAAT,CAAc,MAAd,EAAsB,IAAtB;MACA,QAAQ,CAAC,IAAT,CAAc,MAAd,EAAsB,IAAtB;IAvBF;IAyBA,IAAiB,WAAjB;;MAAA,IAAI,CAAC,IAAL,CAAU,GAAV,EAAA;;IACA,SAAA,GAAY,IAAI,CAAC;IACjB,KAAA,4DAAA;;MACE,KAAA,uCAAA;;QACE,QAAQ,CAAC,IAAT,CAAc,MAAd,EAAsB,SAAA,GAAY,OAAlC;MADF;IADF,CAvCA;;IA2CA,IAAI,CAAC,MAAL,GAAc;AACd,WAAO;EArDW,EA7YpB;;;EAqcA,IAAC,CAAA,uBAAD,GAA2B,QAAA,CAAE,MAAF,CAAA;AAyBzB,QAAA,CAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,UAAA,EAAA,YAAA,EAAA,SAAA,EAAA,UAAA,EAAA,SAAA,EAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;IAAA,CAAA,GAAsB;IACtB,UAAA,GAAsB,MAAA,CAAO,SAAP,EADtB;;IAGA,IAAG,UAAU,CAAC,MAAX,KAAqB,CAAxB;MACE,IAAC,CAAA,GAAD,CAAK,gDAAL;AACA,aAAO,EAFT;KAHA;;;IAQA,UAAA,GAAgB,MAAA,CAAO,gCAAP;IAChB,YAAA,GAAgB,GAThB;;IAWA,KAAA,mBAAA;;AACE,cAAO,IAAA,GAAO,GAAG,CAAC,OAAJ,CAAY,WAAZ,CAAd;AAAA,aACO,MADP;AAEI,kBAAO,WAAP;AAAA,iBACO,OADP;cAEI,YAAY,CAAC,IAAb,CAAkB,CAAA,CAAA,CAAA,CAAI,SAAJ,CAAc,GAAd,CAAlB;AADG;AADP,iBAGO,MAHP;cAII,SAAA,GAAY,SAAS,CAAC,OAAV,CAAkB,OAAlB,EAA2B,QAAA,CAAE,EAAF,CAAA;gBAAU,IAAG,EAAA,KAAM,GAAT;yBAAkB,IAAlB;iBAAA,MAAA;yBAA2B,IAA3B;;cAAV,CAA3B;cACZ,YAAY,CAAC,IAAb,CAAkB,CAAA,CAAA,CAAA,CAAI,SAAJ,CAAc,GAAd,CAAlB;AAFG;AAHP;cAMO,MAAM,IAAI,KAAJ,CAAU,CAAA,4BAAA,CAAA,CAA+B,GAAA,CAAI,WAAJ,CAA/B,CAAA,CAAV;AANb;AADG;AADP,aASO,QATP;UAUI,SAAA,GAAY,QAAA,CAAW,UAAU,CAAC,IAAX,CAAgB,SAAhB,CAAX,EAAyC,EAAzC;UACZ,SAAA,GAAY,SAAA,GAAY;UACxB,YAAY,CAAC,IAAb,CAAkB,CAAA,CAAA,CAAA,CAAI,SAAJ,CAAc,CAAd,CAAA,CAAiB,SAAjB,CAA2B,CAA3B,CAAlB;AAHG;AATP;UAaO,MAAM,IAAI,KAAJ,CAAU,CAAA,0CAAA,CAAA,CAA6C,IAA7C,CAAA,CAAV;AAbb;IADF;IAeA,YAAA,GAAe,YAAY,CAAC,IAAb,CAAkB,EAAlB;IACf,IAAC,CAAA,GAAD,CAAK,CAAA,wBAAA,CAAA,CAA2B,EAAA,CAAG,MAAH,CAA3B,EAAA,CAAA,CAAwC,EAAA,CAAG,YAAH,CAAxC,CAAA,CAAL;IACA,IAAY,CAAE,CAAA,GAAI,CAAE,UAAA,GAAa,UAAU,CAAC,MAAX,CAAkB,YAAlB,CAAf,CAA+C,CAAC,MAAtD,CAAA,KAAkE,CAA9E;AAAA,aAAO,EAAP;;IACA,UAAU,CAAC,WAAX,CAAwB,QAAxB;IACA,UAAU,CAAC,QAAX,CAAwB,QAAxB;IACA,UAAY,CAAA,CAAA,CAAG,CAAC,sBAAhB,CAAA;AACA,WAAO;EAzDkB;AArc3B",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/OPS-TRANSCRIPTION'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\nKEYS                      = require '../lib/keys'\nT                         = require '../lib/templates'\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nPD                        = require 'pipedreams'\n{ jr, }                   = CND\n{ after, }                = CND.suspend\nassign                    = Object.assign\ndefer                     = setImmediate\n{ $\n  $async }                = PD\n# XE                        = null\nXE                        = require '../lib/xemitter'\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\ntypes                     = require './types'\n{ isa\n  validate\n  type_of }               = types\n\n\n\n#===========================================================================================================\n# INPUT TRANSLATION\n#-----------------------------------------------------------------------------------------------------------\n@load_transcriptors = ->\n  ### Called once by OPS `init()` as part of initialization. ###\n  ### TAINT stopgap code ###\n  ### TAINT should search home directory, node_modules as well ###\n  ### TAINT use glob ###\n  PATH                = require 'path'\n  FS                  = require 'fs'\n  tsnr                = 0\n  ops                 = {}\n  directory_path      = PATH.resolve PATH.join __dirname, './transcriptors'\n  on_transcribe_types = [\n    'function'\n    'asyncfunction' ]\n  S.transcriptors     = []\n  tsnr_by_sigils      = {}\n  #.........................................................................................................\n  ### insert TS0; consider to do this within the loop to avoid code duplication ###\n  ts                  = {}\n  ts.standard_name    = \"(no transcriptor)\"\n  ts.display_name     = ts.standard_name\n  ts.tsnr             = 0\n  ts.sigil            = 'ts0'\n  ts.path             = null\n  ts.module           = null\n  S.transcriptors.push ts\n  #.........................................................................................................\n  for filename in FS.readdirSync directory_path\n    continue unless filename.endsWith '.ts.js'\n    t0  = Date.now()\n    #.......................................................................................................\n    tsnr                 += +1\n    ts                    = {}\n    ts.tsnr               = tsnr\n    ts.path               = PATH.join directory_path, filename\n    ts.standard_name      = filename\n    ts.standard_name      = ts.standard_name.replace /\\.ts\\.js$/g, ''\n    ts.standard_name      = ts.standard_name.replace /-/g, ' '\n    ts.display_name       = ts.standard_name\n    ts.sigil              = \"ts#{ts.tsnr}\"\n    #.......................................................................................................\n    relative_path         = PATH.relative process.cwd(), ts.path\n    @log \"µ44755 loading transcription #{relative_path}\"\n    ts.module             = require ts.path\n    ### NOTE not used ATTB and probably not needed; transcriptors should execute any initialization code\n    on module `require`d and/or immediately prior to first use. ###\n    # #.......................................................................................................\n    # if ts.module.init?\n    #   unless ( type = CND.type_of ts.module.init ) in on_transcribe_types\n    #     throw new Error \"µ27622 expected a function for #{relative_path}.init, got a #{type}\"\n    #   await ts.module.init()\n    #.......................................................................................................\n    if ts.module.display_name?\n      unless ( type = CND.type_of ts.module.display_name ) is 'text'\n        throw new Error \"µ27622 expected a text for #{relative_path}.display_name, got a #{type}\"\n      ts.display_name = ts.module.display_name\n    #.......................................................................................................\n    if ts.module.sigil?\n      unless ( type = CND.type_of ts.module.sigil ) is 'text'\n        throw new Error \"µ27622 expected a text for #{relative_path}.sigil, got a #{type}\"\n      ts.sigil = ts.module.sigil\n    #.......................................................................................................\n    unless ( type = CND.type_of ts.module.on_transcribe ) in on_transcribe_types\n      throw new Error \"µ27622 expected a function for #{relative_path}.on_transcribe, got a #{type}\"\n    unless ( arity = ts.module.on_transcribe.length ) is 1\n      throw new Error \"µ27622 arity #{arity} for #{relative_path}.on_transcribe not implemented\"\n    #.......................................................................................................\n    S.tsnr_by_sigils[ ts.sigil ] = ts.tsnr\n    S.transcriptors.push ts\n    t1  = Date.now()\n    dt  = t1 - t0\n    @log \"µ44755 #{filename} loaded as #{rpr ts.display_name} (TSNR #{ts.tsnr}; took #{dt} ms)\"\n  #.........................................................................................................\n  # info 'µ33736', S.transcriptors\n  return null\n\n#===========================================================================================================\n# SET TSRs, TRANSCRIPTORS\n#-----------------------------------------------------------------------------------------------------------\n@format_existing_tsms = ( d ) ->\n  ### Listens to `^open-document`, iterates over document and calls `format_as_tsm_at_position()` for\n  each transcription mark found. ###\n  ### TAINT precompute, store in S: ###\n  ### TAINT code duplication ###\n  #.........................................................................................................\n  tsm_prefix    = S.transcriptor_region_markers?.prefix ? '\\u{f11c}'\n  tsm_suffix    = S.transcriptor_region_markers?.suffix ? '\\u{f005}'\n  pattern       = /// #{tsm_prefix} (?<sigil>[^#{tsm_suffix}]+) #{tsm_suffix} ///\n  finds         = []\n  cursor        = S.codemirror.editor.getSearchCursor pattern\n  # @log 'µ11121', rpr ( key for key of cursor )\n  #.........................................................................................................\n  while cursor.findNext()\n    from          = cursor.from()\n    to            = cursor.to()\n    fromto        = { from, to, }\n    text          = @cm_get_text fromto\n    { sigil, }    = ( text.match pattern ).groups\n    tsnr          = S.tsnr_by_sigils[ sigil ]\n    ### TAINT must fall back to 'unknown TS' or similar when sigil not found ###\n    finds.push { fromto, tsnr, sigil, }\n  #.........................................................................................................\n  for { fromto, tsnr, sigil, } in finds\n    @log \"µ46674\", \"found TSM at #{rpr fromto}: #{rpr text} (TS ##{tsnr})\"\n    @format_as_tsm_at_position fromto, tsnr, sigil\n  #.........................................................................................................\n  return null\n  # for line_idx in [ S.codemirror.editor.firstLine() .. S.codemirror.editor.lastLine() ]\n  #   text =\n\n#-----------------------------------------------------------------------------------------------------------\n@format_as_tsm_at_position = ( fromto, tsnr, sigil ) ->\n  ### Called by `format_existing_tsms()`, `on_replace_text()` to insert an atomic CM textmarker at the\n  position indicated. ###\n  ### TAINT unify with `toggle_tsm_at_position` ###\n  validate.range  fromto\n  validate.tsnr   tsnr\n  clasz         = \"tsr tsr#{tsnr}\"\n  settings      =\n    attributes:       { tsnr, }\n    replacedWith:     ( jQuery \"<span class=#{jr clasz}>#{sigil}</span>\" )[ 0 ]\n    atomic:           true\n    inclusiveLeft:    false\n    inclusiveRight:   false\n  ### TAINT use own API ###\n  S.codemirror.editor.markText fromto.from, fromto.to, settings\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@toggle_tsm_at_position = ( position, tsnr, sigil ) ->\n  ### Called by `insert_tsm()`. ###\n  ### TSM: TranScription Marker. TSR (TranScription Region) extends from marker up to cursor. ###\n  ### TAINT unify with `format_as_tsm_at_position` ###\n  ### TAINT precompute, store in S.transcriptors: ###\n  validate.position position\n  validate.tsnr     tsnr\n  old_textmarker  = ( S.codemirror.editor.findMarksAt position )[ 0 ] ? null\n  old_tsnr        = old_textmarker?.attributes?.tsnr                  ? null\n  #.........................................................................................................\n  if ( tsnr isnt 0 ) and ( ( not old_textmarker? ) or ( old_tsnr isnt tsnr ) )\n    tsm_prefix    = S.transcriptor_region_markers?.prefix ? '\\u{f11c}'\n    tsm_suffix    = S.transcriptor_region_markers?.suffix ? '\\u{f005}'\n    tsm           = \"#{tsm_prefix}#{sigil}#{tsm_suffix}\"\n    clasz         = \"tsr tsr#{tsnr}\"\n    rposition     = { line: position.line, ch: ( position.ch + tsm.length ), }\n    settings      =\n      attributes:       { tsnr, }\n      replacedWith:     ( jQuery \"<span class=#{jr clasz}>#{sigil}</span>\" )[ 0 ]\n      atomic:           true\n      inclusiveLeft:    false\n      inclusiveRight:   false\n    ### TAINT use own API ###\n    S.codemirror.editor.replaceRange tsm, position\n    S.codemirror.editor.markText position, rposition, settings\n  #.........................................................................................................\n  @cm_remove_textmarker old_textmarker if old_textmarker?\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@insert_tsm = ( tsnr ) ->\n  ### Called upon keyboard shortcut, menu item selection. ###\n  validate.tsnr   tsnr\n  ### Bound to `ctrl+0` ... `ctrl+4` ###\n  ts        = S.transcriptors[ tsnr ]\n  ts       ?= S.transcriptors[ 0 ]\n  position  = @cm_get_position()\n  @toggle_tsm_at_position position, tsnr, ts.sigil\n  # @emit_transcribe_event()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @insert_bookmark = ( position = null ) ->\n#   position ?= @cm_get_position()\n#   validate.position position\n#   @log 'µ44644', 'position', position\n#   sigil = 'SIGIL'\n#   settings =\n#     widget:             ( jQuery \"<span class=tsm-bookmark>#{sigil}</span>\" )[ 0 ]\n#     insertLeft:         false\n#     shared:             false\n#     handleMouseEvents:  false\n#   return S.codemirror.editor.setBookmark position, settings\n\n#===========================================================================================================\n# MOVES\n#-----------------------------------------------------------------------------------------------------------\n@cm_jump_to_tsr_or_bracket = -> @log 'µ44455', \"cm_jump_to_tsr_or_bracket not implemented\"\n@cm_mark_tsr_or_bracket    = -> @log 'µ44455', \"cm_mark_tsr_or_bracket not implemented\"\n\n\n#===========================================================================================================\n# INPUT TRANSLATION\n#-----------------------------------------------------------------------------------------------------------\n@emit_transcribe_event = ->\n  ### Called on cursor move in CM and by `insert_tsm()`, `emit_transcribe_event()` parses the current line,\n  looks for the relevant TSM (TranScription Mark), and formulates a transcription event based on the text\n  found between the TSM and the cursor position. That event is then processed by\n  `dispatch_transcribe_event()` (and possibly other listeners). ###\n  ### TAINT consider to always use either TSNR or TS sigil in text marker, displayed text, and only use\n  that piece of data to identify transcriptors in events ###\n  position      = @cm_get_cursor()\n  # @log 'µ36373', 'position', position\n  full_text     = ( @cm_text_from_line_idx position.line )[ ... position.ch ]\n  return null if full_text.length is 0 ### TAINT consider whether transcriptions with empty text might be useful ###\n  ### TAINT precompute, store in S: ###\n  ### TAINT code duplication, see `ops-cm/format_tsr_marks()` ###\n  tsm_prefix    = S.transcriptor_region_markers?.prefix ? '\\u{f11c}'\n  tsm_suffix    = S.transcriptor_region_markers?.suffix ? '\\u{f005}'\n  pattern       = ///\n    ^\n    .*\n    (?<all>\n      (?<mark>\n        #{tsm_prefix}\n        (?<sigil> [^#{tsm_suffix}]+ )\n        #{tsm_suffix}\n        (?<otext> .*? )\n        )\n      )\n      $ ///\n  return unless ( match = full_text.match pattern )?\n  { mark\n    sigil\n    otext\n    all   }     = match.groups\n  tsnr          = S.tsnr_by_sigils[ sigil ]\n  tsnr         ?= 0\n  #.........................................................................................................\n  return null if tsnr is 0\n  #.........................................................................................................\n  ### where to put ntext: ###\n  target =\n    line:           position.line\n    ch:             position.ch - all.length\n  #.........................................................................................................\n  origin =\n    from:\n      line:         position.line\n      ch:           position.ch - otext.length\n    to:\n      line:         position.line\n      ch:           position.ch\n  #.........................................................................................................\n  tsm =\n    from:\n      line:         target.line\n      ch:           target.ch\n    to:\n      line:         target.line\n      ch:           target.ch + mark.length\n  #.........................................................................................................\n  XE.emit PD.new_event '^transcribe', { otext, tsnr, sigil, target, tsm, origin, }\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@dispatch_transcribe_event = ( d ) ->\n  ### Called on `^transcribe` events. If indicated transcription module exists, calls its `on_transcribe()`\n  method (which in turn may cause events like `^replace-text`, `^candidates` to be emitted). ###\n  transcriptor = S.transcriptors[ d.value.tsnr ]\n  #.......................................................................................................\n  unless transcriptor?.module?.on_transcribe?\n    tsnr          = 0\n    transcriptor  = S.transcriptors[ tsnr ]\n  #.......................................................................................................\n  if transcriptor?.module?.on_transcribe?\n    # @log 'µ33111', \"calling #{transcriptor.display_name}\", rpr d\n    transcriptor.module.on_transcribe d\n  #.......................................................................................................\n  else\n    @log 'µ33111', 'no transcriptor'\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n### When `is_frozen()` is `true`, `^transcribe` events as result of cursor activities will not be sent; this\nis to prevent text replacements from causing `^trancribe` events themselves. This simple method *should* be\nOK as JS is single-threaded and interface updates are not possible until `on_replace_text()` (or any\nfunction) has terminated. ###\n@freeze     = -> S.is_frozen = true\n@is_frozen  = -> S.is_frozen\n@thaw       = -> S.is_frozen = false\n\n#-----------------------------------------------------------------------------------------------------------\n@on_replace_text = ( d ) ->\n  ### Called on `^replace-text` events (issued by transcriptors). ###\n  # @log 'µ53486', 'on_replace_text', ( rpr d ), ( isa.replace_text_event d.value )\n  validate.replace_text_event v = d.value\n  @freeze()\n  ### TAINT use own API ###\n  if v.match?\n    target = { line: v.origin.from.line, ch: ( v.origin.from.ch + v.match.length ), }\n    S.codemirror.editor.replaceRange '', v.origin.from, target\n  else\n    S.codemirror.editor.replaceRange '', v.origin.from, v.origin.to ### delete original text ###\n    # @toggle_tsm_at_position v.origin, v.tsnr, v.sigil               ### insert new TSM (where called for) ###\n  #.........................................................................................................\n  S.codemirror.editor.replaceRange v.ntext, v.target              ### insert new text ###\n    # S.codemirror.editor.replaceRange '', v.tsm.from, v.tsm.to       ### delete TSM ###\n    # S.codemirror.editor.replaceRange v.ntext, v.target              ### insert new tsm ###\n  #.........................................................................................................\n  if v.match?\n    @emit_transcribe_event()\n  #.........................................................................................................\n  @thaw()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@display_candidates = ( d ) ->\n  v = d.value\n  ( jQuery '#candidates-flexgrid div' ).remove()\n  #.........................................................................................................\n  if v.candidates.length is 0\n    @focusframe_to_editor if S.focus_is_candidates\n    # @index_candidates()\n    return null\n  #.........................................................................................................\n  @focusframe_to_candidates() if ( not S.focus_is_candidates ) and ( v.focus_candidates ? true )\n  #.........................................................................................................\n  rows = []\n  for entry, idx in v.candidates\n    rows.push T.get_flexgrid_html ( idx + 1 ), entry.candidate\n  ( jQuery '#candidates-flexgrid' ).append rows.join '\\n'\n  #.........................................................................................................\n  ### TAINT code duplication ###\n  glyphboxes = jQuery '#candidates-flexgrid div.glyph'\n  nv          = assign {}, v\n  delete nv.candidates\n  glyphboxes.on 'click', ( e ) =>\n    me = jQuery e.target\n    ### TAINT code duplication ###\n    ### TAINT use API to move selection ###\n    glyphboxes.removeClass  'cdtsel'\n    me.addClass             'cdtsel'\n    #.......................................................................................................\n    lnr   = me.attr 'lnr'\n    # lcol  = me.attr 'lcol'\n    # @log \"µ33983 clicked on #{me.text()} #{jr lnr} / #{jr lcol}\"\n    match = v.candidates[ lnr ]?.reading ? null\n    XE.emit PD.new_event '^replace-text', assign nv, { ntext: me.text(), match, }\n  #.........................................................................................................\n  @index_candidates()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@select_candidate_or_insert_space = ->\n  ### TAINT this implementation precludes any other functionality that the space bar might be associated\n  with in CodeMirror ###\n  ### TAINT code duplication ###\n  return S.codemirror.editor.replaceSelection ' ' unless S.focus_is_candidates\n  cdtsel = jQuery '.cdtsel'\n  ### TAINT honour multiple selection ###\n  if cdtsel.length > 0\n    cdtsel.click()\n  else\n    S.codemirror.editor.replaceSelection ' '\n  @focusframe_to_editor()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@index_candidates = ->\n  ### Add or update each candidate `<div class=glyph> with attributes indicating its left- and right-based\n  column and row numbers, starting from 1. Elements that match `jQuery '[lrow=1]'` are in the first row from\n  the top, while those that match `jQuery '[rrow=1]'` are in the last row from top (first row from the\n  bottom). Likewise, `lcol=1`, `rcol=1` match the leftmost and rightmost elements. These indexes have to be\n  re-calculated after each container resize event, but simplify the code needed to select single and groups\n  of elements. The beauty of the scheme is that we can select e.g. all leftmost elements or all elements\n  in the first row (should the need ever arise). ###\n  ### TAINT code duplication ###\n  glyphboxes      = jQuery '#candidates-flexgrid div.glyph'\n  lcol            = 0\n  lrow            = 0\n  prv_top         = null\n  candidate_count = glyphboxes.length\n  lnr             = 0\n  rnr             = candidate_count + 1\n  rows            = []\n  row             = null\n  #.........................................................................................................\n  @log \"index_candidates() (#{candidate_count})\"\n  #.........................................................................................................\n  for idx in [ 0 ... candidate_count ]\n    glyphbox = glyphboxes.eq idx\n    #.......................................................................................................\n    if ( nxt_top = glyphbox.offset().top ) isnt prv_top\n      if row?\n        rows.push row\n        col_count = row.length\n        for sub_glyphbox, col_idx in row\n          sub_glyphbox.attr 'rcol', col_count - col_idx\n      #.....................................................................................................\n      row = []\n      prv_top = nxt_top\n      lcol    = 0\n      lrow   += +1\n    #.......................................................................................................\n    row.push glyphbox\n    lnr      += +1\n    rnr      += -1\n    lcol     += +1\n    #.......................................................................................................\n    glyphbox.attr 'lnr',  lnr\n    glyphbox.attr 'rnr',  rnr\n    glyphbox.attr 'lcol', lcol\n    glyphbox.attr 'lrow', lrow\n  #.........................................................................................................\n  rows.push row if row?\n  row_count = rows.length\n  for row, row_idx in rows\n    for glyphbox in row\n      glyphbox.attr 'rrow', row_count - row_idx\n  #.........................................................................................................\n  rows.length = 0 ### not strictly needed, just to make de-allocation explicit ###\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@_select_delta_candidate = ( deltas ) ->\n  ### Select next candidate(s) based on `deltas`, which should be an object with one or more of the\n  following members:\n\n  * **`lnr`**:     left-anchored  candidate         number\n  * **`lcol`**:    left-anchored  column            number\n  * **`lrow`**:    left-anchored  row (i.e. line)   number\n  * **`rnr`**:     right-anchored candidate         number\n  * **`rcol`**:    right-anchored column            number\n  * **`rrow`**:    right-anchored row (i.e. line)   number\n\n  Left-anchored values count from the usual (i.e. top or left) end of that dimension, richt-anchored ones\n  from the opposite sides; for example, `lcol: 1` selects the first (leftmost), `rcol: 1` the last\n  (rightmost) entry in each row; `lrow: 1` the first row, `rrow: 1` the last one; in a line with, say, five\n  candidates, `lrow: 4` is equivalent to `rrow: 2`, and `lrow: 5` is the same as `rrow: 1`.\n\n  Each entry may be either a positive or negative integer, or zero, or 'first', or 'last'. A non-zero number\n  indicates the number of steps to go in the respective dimension while zero indicates 'keep this value'.\n  For example, to move right irregardless of line breaks, use `{ lnr: +1, }`. To move to the first entry on\n  the next line, use `{ lcol: 'first', lrow: +1, }`. To go to the last entry of the current row, use `{\n  lrow: 0, lcol: 'last', }` or `{ lrow: 0, rcol: 'first', }`. The selected candidates are the intersection\n  of all sub-selectors.\n\n  This method will have no effect unless there is one or more selected entries to start with. ###\n  #.........................................................................................................\n  R                   = 0\n  prv_cdtsel          = jQuery '.cdtsel'\n  #.........................................................................................................\n  if prv_cdtsel.length is 0\n    @log \"_select_delta_candidate: no candidate selected\"\n    return R\n  #.........................................................................................................\n  ### TAINT code duplication ###\n  glyphboxes    = jQuery '#candidates-flexgrid div.glyph'\n  nxt_selector  = []\n  #.........................................................................................................\n  for delta_key, delta_value of deltas\n    switch type = CND.type_of delta_value\n      when 'text'\n        switch delta_value\n          when 'first'\n            nxt_selector.push \"[#{delta_key}=1]\"\n          when 'last'\n            delta_key = delta_key.replace /^[rl]/, ( $0 ) -> if $0 is 'l' then 'r' else 'l'\n            nxt_selector.push \"[#{delta_key}=1]\"\n          else throw new Error \"µ37634 unknown move command #{rpr delta_value}\"\n      when 'number'\n        prv_value = parseInt ( prv_cdtsel.attr delta_key ),  10\n        nxt_value = prv_value + delta_value\n        nxt_selector.push \"[#{delta_key}=#{nxt_value}]\"\n      else throw new Error \"µ37633 expected a text or a number, got a #{type}\"\n  nxt_selector = nxt_selector.join ''\n  @log \"_select_delta_candidate #{jr deltas} #{jr nxt_selector}\"\n  return R if ( R = ( nxt_cdtsel = glyphboxes.filter nxt_selector ).length ) is 0\n  prv_cdtsel.removeClass  'cdtsel'\n  nxt_cdtsel.addClass     'cdtsel'\n  nxt_cdtsel[ 0 ].scrollIntoViewIfNeeded()\n  return R\n"
  ]
}