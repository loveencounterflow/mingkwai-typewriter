{
  "version": 3,
  "file": "edict2u-kanji.ts.js",
  "sourceRoot": "../..",
  "sources": [
    "src/transcriptors/edict2u-kanji.ts.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/TRANSCRIPTORS/edict2かな漢字変換'\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',     badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPD                        = require 'pipedreams'\n#...........................................................................................................\n{ assign\n  relpath\n  abspath }               = require '../helpers'\n#...........................................................................................................\n{ log\n  db }                    = OPS\n#...........................................................................................................\nXXX_SETTINGS =\n  max_search_results:         500\n  search_with_lower_case:     true\n#...........................................................................................................\n@initialized              = false\n\n#-----------------------------------------------------------------------------------------------------------\n@display_name = 'edict2かな漢字変換'\n@sigil        = 'か漢'\n@table_name   = 'edict2u'\n\n#-----------------------------------------------------------------------------------------------------------\n@kanji_from_pinyin = ( text ) ->\n  text            = text.toLowerCase() if XXX_SETTINGS.search_with_lower_case\n  results         = kanji_triode.find text\n  R               = []\n  for [ pinyin, lemmata, ] in results\n    R.push lemma for lemma in lemmata\n    if R.length > XXX_SETTINGS.max_search_results\n      R.length = XXX_SETTINGS.max_search_results\n      break\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@initialize = ->\n  @initialized = true\n  return if ( db.$.type_of @table_name ) is 'table'\n  t0      = Date.now()\n  db[ \"create_table_#{@table_name}\" ]()\n  path    = abspath '.cache/edict2u.sql'\n  log \"reading #{relpath path}\"\n  db.$.read path\n  log \"creating indexes for #{@table_name}\"\n  db.create_indexes_for_table_edict2u()\n  dt      = Date.now() - t0\n  log \"created table #{@table_name} and indexes in #{dt}ms\"\n\n#-----------------------------------------------------------------------------------------------------------\n@on_transcribe = ( d ) ->\n  @initialize() unless @initialized\n  { otext, }  = d.value\n  return null unless otext.length > 0\n  ntext       = \"[#{otext}]\"\n  XE.emit PD.new_event '^replace-text', assign {}, d.value, { ntext, }\n  return null\n\n\n\n\n\n"
  ]
}