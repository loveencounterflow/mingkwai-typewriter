// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, PD, XXX_SETTINGS, alert, badge, debug, echo, help, info, kanji_triode, log, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/TRANSCRIPTORS/SIMPLE-HANZI';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  alert = CND.get_logger('alert', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PD = require('pipedreams');

  //...........................................................................................................
  XXX_SETTINGS = {
    max_search_results: 500,
    search_with_lower_case: true
  };

  //-----------------------------------------------------------------------------------------------------------
  this.load_keyboard = function() {
    /* TAINT compare filedates, refresh cache */
    var R, t0, t1;
    t0 = Date.now();
    R = require('../../.cache/cedict_ts.u8.js');
    t1 = Date.now();
    debug('µ33344', `took ${t1 - t0}ms to load dictionary`);
    return R;
  };

  kanji_triode = this.load_keyboard();

  //-----------------------------------------------------------------------------------------------------------
  this.kanji_from_pinyin = function(text) {
    var R, i, j, lemma, lemmata, len, len1, pinyin, results;
    if (XXX_SETTINGS.search_with_lower_case) {
      text = text.toLowerCase();
    }
    results = kanji_triode.find(text);
    R = [];
    for (i = 0, len = results.length; i < len; i++) {
      [pinyin, lemmata] = results[i];
      for (j = 0, len1 = lemmata.length; j < len1; j++) {
        lemma = lemmata[j];
        R.push(lemma);
      }
      if (R.length > XXX_SETTINGS.max_search_results) {
        R.length = XXX_SETTINGS.max_search_results;
        break;
      }
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.on_input = function(input) {
    var candidates;
    candidates = this.kanji_from_pinyin(input.text);
    XE.emit(PD.new_event('^candidates', {candidates}));
    return null;
  };

}).call(this);

//# sourceMappingURL=simple-hanzi.trs.js.map
