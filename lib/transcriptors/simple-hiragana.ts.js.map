{
  "version": 3,
  "file": "simple-hiragana.ts.js",
  "sourceRoot": "../..",
  "sources": [
    "src/transcriptors/simple-hiragana.ts.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,YAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,IAAA;;;EAKA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAhB5B;;;EAkBA,CAAA,CAAE,OAAF,CAAA,GAA4B,OAAA,CAAQ,MAAR,CAA5B;;EACA,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,OAAA,CAAQ,CAAR,EAAW;MAAE,MAAA,EAAQ,IAAV;MAAe,WAAA,EAAa,KAA5B;MAAsC,cAAA,EAAgB,KAAtD;MAAgE,KAAA,EAAO;IAAvE,CAAX;EAAT;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,YAAR,EApB5B;;;EAuBA,IAAC,CAAA,aAAD,GAAiB,QAAA,CAAA,CAAA,EAAA;;AAEf,WAAO,OAAA,CAAQ,2CAAR;EAFQ,EAvBjB;;;EA2BA,YAAA,GAAe,IAAC,CAAA,aAAD,CAAA,EA3Bf;;;EA8BA,IAAC,CAAA,YAAD,GAAgB,UA9BhB;;;EAiCA,IAAC,CAAA,IAAD,GAAQ,QAAA,CAAA,CAAA;WAAG,GAAG,CAAC,GAAJ,CAAQ,CAAA,CAAA,CAAG,KAAH,CAAS,OAAT,CAAR;EAAH,EAjCR;;;EAoCA,IAAC,CAAA,QAAD,GAAY,MAAA,QAAA,CAAE,KAAF,CAAA;AAGV,QAAA,QAAA;;;IAAA,QAAA,GAAW,YAAA,CAAa,KAAK,CAAC,IAAnB;IACX,IAAsE,KAAK,CAAC,IAAN,KAAgB,QAAtF;MAAA,GAAG,CAAC,GAAJ,CAAQ,QAAR,EAAkB,CAAE,IAAA,CAAK,KAAK,CAAC,IAAX,CAAF,CAAA,GAAsB,MAAtB,GAA+B,CAAE,IAAA,CAAK,QAAL,CAAF,CAAjD,EAAA;KADA;;;;;;IAOA,MAAM,EAAE,CAAC,IAAH,CAAQ,EAAE,CAAC,SAAH,CAAa,gBAAb,CAAR;IACN,UAAU,CAAC,QAAQ,CAAC,SAApB,CAAgC,CAAC,CAAC,UAAU,CAAC,MAA7C;IACA,UAAU,CAAC,QAAQ,CAAC,WAApB,CAAgC,CAAC,CAAC,UAAU,CAAC,MAA7C;IACA,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAxB,CAAyC,QAAzC;AACA,WAAO;EAdG;AApCZ",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/TRANSCRIPTORS/SIMPLE-HIRAGANA'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',     badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nPD                        = require 'pipedreams'\n\n#-----------------------------------------------------------------------------------------------------------\n@load_keyboard = ->\n  ### TAINT compare filedates, refresh cache ###\n  return require '../../.cache/jp_kana.hrgn.keyboard.wsv.js'\n  # return require '../../.cache/gr_gr.keyboard.wsv.js'\nkey_replacer = @load_keyboard()\n\n#-----------------------------------------------------------------------------------------------------------\n@display_name = '簡単なひらがな'\n\n#-----------------------------------------------------------------------------------------------------------\n@init = -> OPS.log \"#{badge}/init()\"\n\n#-----------------------------------------------------------------------------------------------------------\n@on_input = ( input ) ->\n  #.........................................................................................................\n  # whisper 'µ34343', xrpr change\n  new_text = key_replacer input.text\n  OPS.log 'µ34343', ( xrpr input.text ) + ' -> ' + ( xrpr new_text ) if input.text isnt new_text\n  ### TAINT just emit single event, do not deal w/ MKTW internals here ###\n  ### TAINT replacing the text of the entire line is one way to insert new text, but it would conceivably\n  more elegant and / or more correct if we just replaced in the editor what we're replacing in the text ###\n  ### TAINT consider to build micro shim so we get rid of these (for our use case) bizarre API choices ###\n  ### Announce to ignore next `+delete` event as it did not originate from user input: ###\n  await XE.emit PD.new_event '^ignore-delete'\n  CodeMirror.commands.goLineEnd   S.codemirror.editor\n  CodeMirror.commands.delLineLeft S.codemirror.editor\n  S.codemirror.editor.doc.replaceSelection new_text\n  return null\n\n\n\n\n"
  ]
}