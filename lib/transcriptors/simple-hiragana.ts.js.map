{
  "version": 3,
  "file": "simple-hiragana.ts.js",
  "sourceRoot": "../..",
  "sources": [
    "src/transcriptors/simple-hiragana.ts.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/TRANSCRIPTORS/SIMPLE-HIRAGANA'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',     badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nassign                    = Object.assign\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nPD                        = require 'pipedreams'\n\n#-----------------------------------------------------------------------------------------------------------\n@load_keyboard = ->\n  ### TAINT compare filedates, refresh cache ###\n  return require '../../.cache/jp_kana.hrgn.keyboard.wsv.js'\n  # return require '../../.cache/gr_gr.keyboard.wsv.js'\n_transcribe = @load_keyboard()\n\n#-----------------------------------------------------------------------------------------------------------\n@transcribe = ( text ) ->\n  R = ''\n  R = ( _transcribe R + chr ) for chr in Array.from text\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@display_name = '簡単なひらがな'\n\n#-----------------------------------------------------------------------------------------------------------\n@init = -> OPS.log \"#{badge}/init()\"\n\n#-----------------------------------------------------------------------------------------------------------\n@on_transcribe = ( d ) ->\n  #.........................................................................................................\n  # whisper 'µ34343', xrpr change\n  text = @transcribe d.value.text\n  if d.value.text is text\n    OPS.log 'µ34343', \"no matches:\", ( xrpr d.value.text )\n  else\n    OPS.log 'µ34343', ( xrpr d.value.text ) + ' -> ' + ( xrpr text )\n    XE.emit PD.new_event '^replace-text', assign {}, d.value, { text: text, }\n  # ### TAINT just emit single event, do not deal w/ MKTW internals here ###\n  # ### TAINT replacing the text of the entire line is one way to insert new text, but it would conceivably\n  # more elegant and / or more correct if we just replaced in the editor what we're replacing in the text ###\n  # ### TAINT consider to build micro shim so we get rid of these (for our use case) bizarre API choices ###\n  # ### Announce to ignore next `+delete` event as it did not originate from user input: ###\n  # await XE.emit PD.new_event '^ignore-delete'\n  # CodeMirror.commands.goLineEnd   S.codemirror.editor\n  # CodeMirror.commands.delLineLeft S.codemirror.editor\n  # S.codemirror.editor.doc.replaceSelection text\n  return null\n\n\n\n\n"
  ]
}