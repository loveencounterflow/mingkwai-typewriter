// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, PD, XXX_SETTINGS, abspath, alert, assign, badge, db, debug, echo, help, info, log, relpath, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/TRANSCRIPTORS/edict2かな漢字変換';

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  alert = CND.get_logger('alert', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PD = require('pipedreams');

  //...........................................................................................................
  ({assign, relpath, abspath} = require('../helpers'));

  //...........................................................................................................
  ({log, db} = OPS);

  //...........................................................................................................
  XXX_SETTINGS = {
    max_search_results: 500,
    search_with_lower_case: true
  };

  //...........................................................................................................
  this.initialized = false;

  //-----------------------------------------------------------------------------------------------------------
  this.display_name = 'edict2かな漢字変換';

  this.sigil = 'か漢';

  this.table_name = 'edict2u';

  //-----------------------------------------------------------------------------------------------------------
  this.initialize = function() {
    var dt, path, t0;
    this.initialized = true;
    if ((db.$.type_of(this.table_name)) === 'table') {
      return;
    }
    t0 = Date.now();
    db[`create_table_${this.table_name}`]();
    path = abspath('.cache/edict2u.sql');
    log(`reading ${relpath(path)}`);
    db.$.read(path);
    log(`creating indexes for ${this.table_name}`);
    db.create_indexes_for_table_edict2u();
    dt = Date.now() - t0;
    return log(`created table ${this.table_name} and indexes in ${dt}ms`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.kanji_from_kana = function(q, limit = 50) {
    var row;
    return (function() {
      var ref, results;
      ref = db.longest_matching_prefix_in_edict2u({q, limit});
      results = [];
      for (row of ref) {
        results.push(row.candidate);
      }
      return results;
    })();
  };

  //-----------------------------------------------------------------------------------------------------------
  this.on_transcribe = function(d) {
    var candidates, otext;
    if (!this.initialized) {
      this.initialize();
    }
    ({otext} = d.value);
    if (!(otext.length > 0)) {
      return null;
    }
    // XE.emit PD.new_event '^replace-text', assign {}, d.value, { ntext, }
    candidates = this.kanji_from_kana(otext);
    XE.emit(PD.new_event('^candidates', assign({candidates}, d.value)));
    return null;
  };

}).call(this);

//# sourceMappingURL=edict2u-kanji.ts.js.map
