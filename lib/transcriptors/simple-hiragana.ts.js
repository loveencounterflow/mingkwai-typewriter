// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, PD, alert, assign, badge, debug, echo, help, info, inspect, log, rpr, urge, warn, whisper, xrpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/TRANSCRIPTORS/SIMPLE-HIRAGANA';

  log = CND.get_logger('plain', badge);

  debug = CND.get_logger('debug', badge);

  info = CND.get_logger('info', badge);

  warn = CND.get_logger('warn', badge);

  alert = CND.get_logger('alert', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  assign = Object.assign;

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  PD = require('pipedreams');

  //-----------------------------------------------------------------------------------------------------------
  this.display_name = '簡単なひらがな';

  this.sigil = 'ひ';

  this.focus_candidates = false;

  this._transcribe = null;

  this._hiragana_triode = null;

  //-----------------------------------------------------------------------------------------------------------
  this.init = function() {
    /* TAINT compare filedates, refresh cache */
    this._transcribe = require('../../.cache/jp_kana.kbd.js');
    return this._hiragana_triode = require('../../.cache/jp_kana.cdt.js');
  };

  //-----------------------------------------------------------------------------------------------------------
  this.transcribe = function(text) {
    var R, chr, i, len, ref;
    R = '';
    ref = Array.from(text);
    for (i = 0, len = ref.length; i < len; i++) {
      chr = ref[i];
      R = this._transcribe(R + chr);
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.on_transcribe = function(d) {
    var candidates, focus_candidates, lemma, ntext, otext, transcription;
    if (!((this._transcribe != null) && (this._hiragana_triode != null))) {
      this.init();
    }
    //.........................................................................................................
    ({otext} = d.value);
    focus_candidates = this.focus_candidates;
    //.........................................................................................................
    /* Candidates: */
    if (otext.length === 0) {
      XE.emit(PD.new_event('^candidates', {
        candidates: [],
        focus_candidates
      }));
    } else {
      candidates = (function() {
        var i, len, ref, results;
        ref = this._hiragana_triode.find(otext);
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          [transcription, lemma] = ref[i];
          results.push(lemma);
        }
        return results;
      }).call(this);
      XE.emit(PD.new_event('^candidates', assign({candidates, focus_candidates}, d.value)));
    }
    //.........................................................................................................
    /* Keyboard: */
    ntext = this.transcribe(otext);
    if (otext !== ntext) {
      OPS.log('µ34343', (rpr(otext)) + ' -> ' + (rpr(ntext)));
      XE.emit(PD.new_event('^replace-text', assign({}, d.value, {ntext})));
    }
    return null;
  };

}).call(this);

//# sourceMappingURL=simple-hiragana.ts.js.map
