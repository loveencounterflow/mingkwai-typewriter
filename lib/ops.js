// Generated by CoffeeScript 2.3.2
(function() {
  //###########################################################################################################
  var $, $async, CND, PD, STATE, T, XE, alert, badge, debug, help, info, inspect, jr, rpr, urge, warn, whisper, xrpr;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  inspect = (require('util')).inspect;

  // log                       = ( P... ) -> process.stdout.write ( rpr P ) + '\n'
  // TRAP                      = require 'mousetrap'
  // { app, globalShortcut, }  = require 'electron'
  // PTVR                      = require '../lib/lib/ptv-reader'
  // IME                       = require '../lib/ime'
  STATE = require('../lib/state');

  T = require('../lib/templates');

  /* https://github.com/sindresorhus/electron-unhandled */
  //...........................................................................................................
  require('../lib/exception-handler');

  require('../lib/kana-input');

  //...........................................................................................................
  PD = require('pipedreams');

  ({jr} = CND);

  ({$, $async} = PD);

  // XE                        = null
  XE = require('../lib/xemitter');

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  // #-----------------------------------------------------------------------------------------------------------
  // XE.listen_to 'KEYS/kblevels/change', @, ( { S, key, } ) ->
  //   ### TAINT bind keys using configuration ###
  //   { name, toggle, } = key
  //   #.........................................................................................................
  //   S.bind_left   = ( toggle is 'on' ) if name is 'alt'
  //   S.bind_right  = ( toggle is 'on' ) if name is 'altgr'
  //   #.........................................................................................................
  //   if S.bind_left  then  ( jQuery 'lbbar' ).show() ### TAINT ###
  //   else                  ( jQuery 'lbbar' ).hide() ### TAINT ###
  //   if S.bind_right then  ( jQuery 'rbbar' ).show() ### TAINT ###
  //   else                  ( jQuery 'rbbar' ).hide() ### TAINT ###
  //   #.........................................................................................................
  //   return null

  // #-----------------------------------------------------------------------------------------------------------
  // @on_add_selection = ( uie ) ->
  //   { S, } = uie
  //   debug '44545', 'selected row nr:', S.row_idx + 1
  //   chr = S.rows?[ S.row_idx ]?.glyph
  //   XE.emit 'IME/input/add', { S, row_idx: S.row_idx, chr, }
  //   uie.event.preventDefault()
  //   return null

  // #-----------------------------------------------------------------------------------------------------------
  // XE.listen_to 'IME/input/add', @, ( { S, row_idx, chr, } ) ->
  //   debug "update output area"
  //   debug "reset candidates area, input box"
  //   ### TAINT remove buffer ###
  //   S.buffer.push chr
  //   # ( jQuery '#output-area .inbox' ).text S.buffer.join ''
  //   S.codemirror.editor.replaceSelection chr
  //   ( jQuery '#text-input' ).text ''
  //   return null

  //-----------------------------------------------------------------------------------------------------------
  this.on_scroll = (S, event) => {
    var delta_px;
    // if event.originalEvent.deltaY < 0 then  @navigate_vertically S, -1
    // else                                    @navigate_vertically S, +1
    if (S.ignore_next_scroll_events >= 0) {
      S.ignore_next_scroll_events += -1;
      // debug 'scroll', 'discard'
      return true;
    }
    S.ignore_next_scroll_events = 1;
    delta_px = (S.scroller.scrollTop() - S.scroller_last_top) / S.candidates_tr_height;
    S.scroller_last_top = S.scroller.scrollTop();
    // debug 'scroll', delta_px
    // CND.dir event
    // return false if delta_px is 0
    if (delta_px < 0) {
      this.navigate_vertically(S, -1);
    } else {
      this.navigate_vertically(S, +1);
    }
    return false;
  };

  this.on_wheel = (S, event) => {
    if (event.originalEvent.deltaY < 0) {
      this.navigate_vertically(S, -1);
    } else {
      this.navigate_vertically(S, +1);
    }
    return false;
  };

  this.on_vertical_navigation = function(uie) {
    var delta;
    switch (uie.name) {
      case 'up':
        delta = -1;
        break;
      case 'down':
        delta = +1;
        break;
      case 'page-up':
        delta = -10;
        break;
      case 'page-down':
        delta = +10;
    }
    this.navigate_vertically(uie.S, delta);
    uie.event.preventDefault();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.navigate_vertically = function(S, delta) {
    var corrected_row_idx, delta_px, element, element_offset, new_row_idx;
    new_row_idx = S.row_idx + delta;
    corrected_row_idx = Math.max(0, new_row_idx);
    corrected_row_idx = Math.min(S.rows.length - 1, corrected_row_idx);
    //.........................................................................................................
    XE.emit('WINDOW/scroll/vertical', {
      S,
      from: S.row_idx + 1,
      via: new_row_idx + 1,
      to: corrected_row_idx + 1
    });
    //.........................................................................................................
    S.row_idx = corrected_row_idx;
    element = $('#candidates tr').eq(S.row_idx);
    if (((element != null ? element.offset : void 0) != null) && ((element_offset = element.offset()) != null)) {
      delta_px = element_offset.top - S.shade_offset_top;
      S.scroller_last_top = S.scroller.scrollTop() + delta_px;
      S.ignore_next_scroll_events += +1;
      S.scroller.scrollTop(S.scroller_last_top);
    }
    // ( ( jQuery element ).find '.glyph' ).css 'font-size', '125%'
    return null;
  };

  // # #-----------------------------------------------------------------------------------------------------------
  // # XE.listen_to 'WINDOW/scroll/vertical', @, ({ S, from, via, to, }) ->
  // #   whisper "WINDOW/scroll/vertical #{from} -> #{via} -> #{to}"

  //-----------------------------------------------------------------------------------------------------------
  this.on_input = async function(S, event) {
    var replacement;
    debug('µ23244', (await XE.emit(PD.new_event('^input', S.input.text()))));
    if ((replacement = (await XE.delegate(PD.new_event('^input', S.input.text())))) != null) {
      S.input.text('');
      S.codemirror.editor.replaceSelection(replacement);
    }
    // rows    = []
    // columns = [ 'short_iclabel', 'glyph', 'value', ]
    // for row, idx in S.rows
    //   rows.push T.get_row_html [ [ 'nr', idx + 1, ], ( [ key, row[ key ], ] for key in columns )..., ]
    // rows = rows.join '\n'
    // ( jQuery '#candidates tr'    ).remove()
    // ( jQuery '#candidates tbody' ).append rows
    // ( jQuery '#qdt'              ).text S.qdt
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.init = function() {
    var S, caused_change, property;
    // { remote, }               = require 'electron'
    // XE                        = remote.require './xemitter'
    //.........................................................................................................
    /* Instantiate state, add important UI elements */
    S = STATE.new();
    S.candidates = jQuery('#candidates');
    S.shade_offset_top = (jQuery('shade.foreground')).offset().top;
    S.input = jQuery('#text-input');
    S.scroller = jQuery('scroller');
    //.........................................................................................................
    // ### Make sure focus is on input element ###
    // ( jQuery '#text-input' ).focus()
    //.........................................................................................................
    /* TAINT temporary; will use KB event, icon, dedicated method for this */
    /* Switch focus on click on editor */
    // ( jQuery 'leftbar content' ).on 'click', ( event ) =>
    //   if S.codemirror.is_enlarged then  property = { 'height': ( jQuery 'leftbar content' ).css 'min-height' }
    //   else                              property = { 'height': ( jQuery 'leftbar content' ).css 'max-height' }
    //   S.codemirror.is_enlarged = not S.codemirror.is_enlarged
    //   ( jQuery 'leftbar content' ).animate property, 100
    property = {
      'height': (jQuery('leftbar content')).css('max-height')
    };
    (jQuery('leftbar content')).animate(property, 100);
    //.........................................................................................................
    /* Register key and mouse events */
    S.scroller.on('wheel', (event) => {
      return this.on_wheel(S, event);
    });
    S.scroller.on('scroll', (event) => {
      return this.on_scroll(S, event);
    });
    S.input.on('input', (event) => {
      return this.on_input(S, event);
    });
    /* use event for this? */
    S.scroller_last_top = S.scroller.scrollTop();
    //.........................................................................................................
    /* Measure table row height, adjust shade */
    S.candidates_tr_height = (jQuery('#candidates tr')).height();
    (jQuery('shade')).height(S.candidates_tr_height * 1.1);
    //.........................................................................................................
    /* Initialize CodeMirror */
    S.codemirror.editor = CodeMirror.fromTextArea((jQuery('#codemirror'))[0], S.codemirror.settings);
    S.codemirror.editor.setSize(null, '100%');
    // S.codemirror.editor.replaceSelection 'this is the editor'
    //.........................................................................................................
    // S.codemirror.editor.on 'change',          ( me, change      ) -> whisper 'µ66653', 'change',        jr change
    // S.codemirror.editor.on 'changes',         ( me, changes     ) -> whisper 'µ66653', 'changes',       jr changes
    // S.codemirror.editor.on 'beforeChange',    ( me, change      ) -> whisper 'µ66653', 'beforeChange',  jr change
    // S.codemirror.editor.on 'cursorActivity',  ( me              ) -> whisper 'µ66653', 'cursorActivity'
    // S.codemirror.editor.on 'keyHandled',      ( me, name, event ) -> whisper 'µ66653', 'keyHandled',    jr name
    // S.codemirror.editor.on 'inputRead',       ( me, change      ) -> whisper 'µ66653', 'inputRead',     jr change
    // debug 'µ46674', S.codemirror.editor
    // doc = S.codemirror.getDoc()
    // S.codemirror.editor.on 'beforeChange', ( me, change ) ->
    caused_change = false;
    S.codemirror.editor.on('inputRead', function(me, change) {
      // whisper 'µ66653', 'inputRead',     jr change
      XE.emit(PD.new_event('^input', {S, change}));
      return null;
    });
    // S.codemirror.editor.on 'change', ( me, change ) ->
    //   if caused_change
    //     caused_change = false
    //     return null
    //   doc = S.codemirror.editor.doc
    //   # debug 'µ77763', 'getCursor',  jr doc.getCursor()
    //   line_idx    = doc.getCursor().line
    //   line_text   = doc.getLine       line_idx
    //   line_handle = doc.getLineHandle line_idx
    //   debug 'µ82218', ( xrpr line_text ), ( xrpr change ) #, ( xrpr ( k for k of line_handle ) )
    //   text      = change.text[ 0 ]
    //   is_input  = change.origin is '+input'
    //   if is_input and text?.length > 0
    //     # debug 'µ44455', change
    //     # collapse multiple selections into a single one to prevent regress:
    //     # debug 'µ23200', doc.setBookmark { line: 1, ch: 2, }
    //     doc.setCursor doc.getCursor()
    //     doc.replaceSelection '123', 'around'
    //     caused_change = true
    //   return null
    //   #   from_pos  = { line: change.from.line, ch: change.from.ch, }
    //   #   to_pos    = { line: change.to.line, ch: change.to.ch, }
    //   #   to_pos.ch += +2
    //   #   # change.update from_pos, to_pos, "[#{text}]"
    //     # change.update null, null, "[#{text}]"
    //     # change.update null, null, "helo world"
    // # S.codemirror.editor.on 'cursorActivity', ( me ) ->
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  jQuery(init.bind(this));

  /*
cm.findPosH(start: {line, ch}, amount: integer, unit: string, visually: boolean) → {line, ch, ?hitSide: boolean}
cm.findPosV(start: {line, ch}, amount: integer, unit: string) → {line, ch, ?hitSide: boolean}
cm.findWordAt(pos: {line, ch}) → {anchor: {line, ch}, head: {line, ch}}
cm.hasFocus() → boolean

doc.addSelection        = (anchor: {line, ch}, ?head: {line, ch})
doc.changeGeneration    = (?closeEvent: boolean) → integer
doc.eachLine            = (f: (line: LineHandle))
doc.eachLine            = (start: integer, end: integer, f: (line: LineHandle))
doc.extendSelection     = (from: {line, ch}, ?to: {line, ch}, ?options: object)
doc.extendSelections    = (heads: array<{line, ch}>, ?options: object)
doc.extendSelectionsBy  = (f: function(range: {anchor, head}) → {line, ch}), ?options: object)
doc.firstLine           = () → integer
doc.getCursor           = (?start: string) → {line, ch}
doc.getExtending        = () → boolean
doc.getLine             = (n: integer) → string
doc.getLineHandle       = (num: integer) → LineHandle
doc.getLineNumber       = (handle: LineHandle) → integer
doc.getRange            = (from: {line, ch}, to: {line, ch}, ?separator: string) → string
doc.getSelection        = (?lineSep: string) → string
doc.getSelections       = (?lineSep: string) → array<string>
doc.getValue            = (?separator: string) → string
doc.isClean             = (?generation: integer) → boolean
doc.lastLine            = () → integer
doc.lineCount           = () → integer
doc.listSelections      = () → array<{anchor, head}>
doc.markClean           = ()
doc.replaceRange        = (replacement: string, from: {line, ch}, to: {line, ch}, ?origin: string)
doc.replaceSelection    = (replacement: string, ?select: string)
doc.replaceSelections   = (replacements: array<string>, ?select: string)
doc.setCursor           = (pos: {line, ch}|number, ?ch: number, ?options: object)
doc.setExtending        = (value: boolean)
doc.setSelection        = (anchor: {line, ch}, ?head: {line, ch}, ?options: object)
doc.setSelections       = (ranges: array<{anchor, head}>, ?primary: integer, ?options: object)
doc.setValue            = (content: string)
doc.somethingSelected   = () → boolean
*/

}).call(this);

//# sourceMappingURL=ops.js.map
