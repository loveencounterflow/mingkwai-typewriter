// Generated by CoffeeScript 2.3.2
(function() {
  /* TAINTs

  * separate:

    * `focus` (a mechanism used by the browser)

    * ?`select`, `choose`? for the action of selecting one particular candidate

    * ??? for what is called `focusframe` now

    these are three different things and should be called different names.

  * accordingly, rename `focusframe` and those `*_focus*` methods that refer to it instead of to browser focus

  * use module-global `S`: this code will only ever run a single input instance; where it does use modules
    that potentially serve several independent consumers, `S` will not be used as argument anyway

  * refactor code into (local) modules

   */
  var $, $async, CND, FS, KEYS, PATH, PD, S, STATE, T, XE, after, alert, badge, debug, defer, help, info, inspect, jr, rpr, urge, warn, whisper, xrpr;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/OPS';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  inspect = (require('util')).inspect;

  // TRAP                      = require 'mousetrap'
  KEYS = require('../lib/keys');

  STATE = require('../lib/state');

  T = require('../lib/templates');

  PATH = require('path');

  FS = require('fs');

  //...........................................................................................................
  require('../lib/exception-handler');

  require('../lib/kana-input');

  require('../lib/kanji-input');

  //...........................................................................................................
  PD = require('pipedreams');

  ({jr} = CND);

  ({after} = CND.suspend);

  defer = setImmediate;

  ({$, $async} = PD);

  // XE                        = null
  XE = require('../lib/xemitter');

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //...........................................................................................................
  // `S` is the module-global configuration and editor state object; this will probably factored out into a
  // separate local module to make it `require`able to other modules running in the renderer process:
  S = null;

  //-----------------------------------------------------------------------------------------------------------
  XE.listen_to_all(function(key, d) {
    var k, logger, message, ref, toggle, v;
    // whisper 'µ99823', key #, jr d
    v = (ref = d.value) != null ? ref : {};
    logger = jQuery('#logger');
    while (logger.children().length > 10) {
      (logger.find(':first-child')).remove();
    }
    message = (function() {
      switch (key) {
        case '^kblevel':
          return ((function() {
            var ref1, results;
            ref1 = S.kblevels;
            results = [];
            for (k in ref1) {
              toggle = ref1[k];
              if (toggle) {
                results.push(k);
              }
            }
            return results;
          })()).join(', ');
        default:
          return ((function() {
            var results;
            results = [];
            for (k in d.value) {
              results.push(k);
            }
            return results;
          })()).join(', ');
      }
    })();
    //.........................................................................................................
    logger.append(`<div>${Date.now()}: ${rpr(key)}: ${message}</div>`);
    console.log('µ33499', Date.now(), key, d);
    // if ( kblevels = d.value?.S?.kblevels )
    //   logger.append ( "<div>#{Date.now()}: kblevels: #{rpr kblevels}</div>" )
    logger.scrollTop(logger[0].scrollHeight);
    //.........................................................................................................
    return null;
  });

  //-----------------------------------------------------------------------------------------------------------
  this.log = function(text) {
    /* TAINT code duplication */
    var logger;
    logger = jQuery('#logger');
    while (logger.children().length > 10) {
      (logger.find(':first-child')).remove();
    }
    /* TAINT should escape text (or accept HTML?) */
    logger.append(`<div>${Date.now()}: ${text}</div>`);
    console.log('µ33499', Date.now(), text);
    logger.scrollTop(logger[0].scrollHeight);
    return null;
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @on_add_selection = ( uie ) ->
  //   { S, } = uie
  //   debug '44545', 'selected row nr:', S.row_idx + 1
  //   chr = S.rows?[ S.row_idx ]?.glyph
  //   XE.emit 'IME/input/add', { S, row_idx: S.row_idx, chr, }
  //   uie.event.preventDefault()
  //   return null

  // #-----------------------------------------------------------------------------------------------------------
  // XE.listen_to 'IME/input/add', @, ( { S, row_idx, chr, } ) ->
  //   debug "update output area"
  //   debug "reset candidates area, input box"
  //   ### TAINT remove buffer ###
  //   S.buffer.push chr
  //   # ( jQuery '#output-area .inbox' ).text S.buffer.join ''
  //   S.codemirror.editor.replaceSelection chr
  //   ( jQuery '#text-input' ).text ''
  //   return null

  //-----------------------------------------------------------------------------------------------------------
  this.on_scroll = (S, event) => {
    var delta_px;
    // if event.originalEvent.deltaY < 0 then  @navigate_vertically S, -1
    // else                                    @navigate_vertically S, +1
    if (S.ignore_next_scroll_events >= 0) {
      S.ignore_next_scroll_events += -1;
      // debug 'scroll', 'discard'
      return true;
    }
    S.ignore_next_scroll_events = 1;
    delta_px = (S.scroller.scrollTop() - S.scroller_last_top) / S.candidates_tr_height;
    S.scroller_last_top = S.scroller.scrollTop();
    // debug 'scroll', delta_px
    // CND.dir event
    // return false if delta_px is 0
    if (delta_px < 0) {
      this.navigate_vertically(S, -1);
    } else {
      this.navigate_vertically(S, +1);
    }
    return false;
  };

  this.on_wheel = (S, event) => {
    if (event.originalEvent.deltaY < 0) {
      this.navigate_vertically(S, -1);
    } else {
      this.navigate_vertically(S, +1);
    }
    return false;
  };

  this.on_vertical_navigation = function(uie) {
    var delta;
    switch (uie.name) {
      case 'up':
        delta = -1;
        break;
      case 'down':
        delta = +1;
        break;
      case 'page-up':
        delta = -10;
        break;
      case 'page-down':
        delta = +10;
    }
    this.navigate_vertically(uie.S, delta);
    uie.event.preventDefault();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.navigate_vertically = function(S, delta) {
    var corrected_row_idx, delta_px, element, element_offset, new_row_idx;
    new_row_idx = S.row_idx + delta;
    corrected_row_idx = Math.max(0, new_row_idx);
    corrected_row_idx = Math.min(S.rows.length - 1, corrected_row_idx);
    //.........................................................................................................
    XE.emit('WINDOW/scroll/vertical', {
      S,
      from: S.row_idx + 1,
      via: new_row_idx + 1,
      to: corrected_row_idx + 1
    });
    //.........................................................................................................
    S.row_idx = corrected_row_idx;
    element = (jQuery('#candidates tr')).eq(S.row_idx);
    if (((element != null ? element.offset : void 0) != null) && ((element_offset = element.offset()) != null)) {
      delta_px = element_offset.top - S.shade_offset_top;
      S.scroller_last_top = S.scroller.scrollTop() + delta_px;
      S.ignore_next_scroll_events += +1;
      S.scroller.scrollTop(S.scroller_last_top);
    }
    // ( ( jQuery element ).find '.glyph' ).css 'font-size', '125%'
    return null;
  };

  // # #-----------------------------------------------------------------------------------------------------------
  // # XE.listen_to 'WINDOW/scroll/vertical', @, ({ S, from, via, to, }) ->
  // #   whisper "WINDOW/scroll/vertical #{from} -> #{via} -> #{to}"

  //-----------------------------------------------------------------------------------------------------------
  XE.listen_to('^candidates', this, function(d) {
    var glyph, idx, rows, v;
    if (!S.focus_is_candidates) {
      this.focusframe_to_candidates(S);
    }
    v = d.value;
    ({S} = v);
    rows = ((function() {
      var i, len, ref, results;
      ref = v.candidates;
      results = [];
      for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
        glyph = ref[idx];
        results.push(T.get_flexgrid_html(idx + 1, glyph));
      }
      return results;
    })()).join('\n');
    (jQuery('#candidates-flexgrid div')).remove();
    (jQuery('#candidates-flexgrid')).append(rows);
    //.........................................................................................................
    /* TAINT code duplication */
    S.glyphboxes = jQuery('#candidates-flexgrid div.glyph');
    S.glyphboxes.on('click', (e) => {
      var me;
      me = jQuery(e.target);
      /* TAINT code duplication */
      /* TAINT use API to move selection */
      S.glyphboxes.removeClass('cdtsel');
      me.addClass('cdtsel');
      return this.log(`µ33983-1 ${me.text()} ${jr(me.offset())}`);
    });
    //.........................................................................................................
    this.index_candidates();
    return null;
  });

  //-----------------------------------------------------------------------------------------------------------
  this.index_candidates = function() {
    var candidate_count, col_count, col_idx, glyphbox, i, idx, j, l, lcol, len, len1, len2, lnr, lrow, m, nxt_top, prv_top, ref, rnr, row, row_count, row_idx, rows, sub_glyphbox;
    /* Add or update each candidate `<div class=glyph> with attributes indicating its left- and right-based
    column and row numbers, starting from 1. Elements that match `jQuery '[lrow=1]'` are in the first row from
    the top, while those that match `jQuery '[rrow=1]'` are in the last row from top (first row from the
    bottom). Likewise, `lcol=1`, `rcol=1` match the leftmost and rightmost elements. These indexes have to be
    re-calculated after each container resize event, but simplify the code needed to select single and groups
    of elements. The beauty of the scheme is that we can select e.g. all leftmost elements or all elements
    in the first row (should the need ever arise). */
    /* TAINT code duplication */
    if (S.glyphboxes == null) {
      S.glyphboxes = jQuery('#candidates-flexgrid div.glyph');
    }
    lcol = 0;
    lrow = 0;
    prv_top = null;
    candidate_count = S.glyphboxes.length;
    lnr = 0;
    rnr = candidate_count + 1;
    rows = [];
    row = null;
    //.........................................................................................................
    this.log(`index_candidates() (${candidate_count})`);
//.........................................................................................................
    for (idx = i = 0, ref = candidate_count; (0 <= ref ? i < ref : i > ref); idx = 0 <= ref ? ++i : --i) {
      glyphbox = S.glyphboxes.eq(idx);
      //.......................................................................................................
      if ((nxt_top = glyphbox.offset().top) !== prv_top) {
        if (row != null) {
          rows.push(row);
          col_count = row.length;
          for (col_idx = j = 0, len = row.length; j < len; col_idx = ++j) {
            sub_glyphbox = row[col_idx];
            sub_glyphbox.attr('rcol', col_count - col_idx);
          }
        }
        //.....................................................................................................
        row = [];
        prv_top = nxt_top;
        lcol = 0;
        lrow += +1;
      }
      //.......................................................................................................
      row.push(glyphbox);
      lnr += +1;
      rnr += -1;
      lcol += +1;
      //.......................................................................................................
      glyphbox.attr('lnr', lnr);
      glyphbox.attr('rnr', rnr);
      glyphbox.attr('lcol', lcol);
      glyphbox.attr('lrow', lrow);
    }
    if (row != null) {
      //.........................................................................................................
      rows.push(row);
    }
    row_count = rows.length;
    for (row_idx = l = 0, len1 = rows.length; l < len1; row_idx = ++l) {
      row = rows[row_idx];
      for (m = 0, len2 = row.length; m < len2; m++) {
        glyphbox = row[m];
        glyphbox.attr('rrow', row_count - row_idx);
      }
    }
    //.........................................................................................................
    rows.length = 0/* not strictly needed, just to make de-allocation explicit */
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.insert_space_or_selection = function() {
    /* TAINT this implementation precludes any other functionality that the space bar might be associated
    with in CodeMirror */
    /* TAINT honour multiple selection */
    var cdtsel, text;
    cdtsel = jQuery('.cdtsel');
    text = cdtsel.length > 0 ? cdtsel.text() : ' ';
    S.codemirror.editor.replaceSelection(text);
    this.focusframe_to_editor();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._select_delta_candidate = function(deltas) {
    var R, delta_key, delta_value, glyphboxes, nxt_cdtsel, nxt_selector, nxt_value, prv_cdtsel, prv_value, type;
    /* Select next candidate(s) based on `deltas`, which should be an object with one or more of the
    following members:

    * **`lnr`**:     left-anchored  candidate         number
    * **`lcol`**:    left-anchored  column            number
    * **`lrow`**:    left-anchored  row (i.e. line)   number
    * **`rnr`**:     right-anchored candidate         number
    * **`rcol`**:    right-anchored column            number
    * **`rrow`**:    right-anchored row (i.e. line)   number

    Left-anchored values count from the usual (i.e. top or left) end of that dimension, richt-anchored ones
    from the opposite sides; for example, `lcol: 1` selects the first (leftmost), `rcol: 1` the last
    (rightmost) entry in each row; `lrow: 1` the first row, `rrow: 1` the last one; in a line with, say, five
    candidates, `lrow: 4` is equivalent to `rrow: 2`, and `lrow: 5` is the same as `rrow: 1`.

    Each entry may be either a positive or negative integer, or zero, or 'first', or 'last'. A non-zero number
    indicates the number of steps to go in the respective dimension while zero indicates 'keep this value'.
    For example, to move right irregardless of line breaks, use `{ lnr: +1, }`. To move to the first entry on
    the next line, use `{ lcol: 'first', lrow: +1, }`. To go to the last entry of the current row, use `{
    lrow: 0, lcol: 'last', }` or `{ lrow: 0, rcol: 'first', }`. The selected candidates are the intersection
    of all sub-selectors.

    This method will have no effect unless there is one or more selected entries to start with.  */
    //.........................................................................................................
    R = 0;
    prv_cdtsel = jQuery('.cdtsel');
    //.........................................................................................................
    if (prv_cdtsel.length === 0) {
      this.log("_select_delta_candidate: no candidate selected");
      return R;
    }
    //.........................................................................................................
    /* TAINT code duplication */
    /* TAINT use `S.glyphboxes`? */
    glyphboxes = jQuery('#candidates-flexgrid div.glyph');
    nxt_selector = [];
//.........................................................................................................
    for (delta_key in deltas) {
      delta_value = deltas[delta_key];
      switch (type = CND.type_of(delta_value)) {
        case 'text':
          switch (delta_value) {
            case 'first':
              nxt_selector.push(`[${delta_key}=1]`);
              break;
            case 'last':
              delta_key = delta_key.replace(/^[rl]/, function($0) {
                if ($0 === 'l') {
                  return 'r';
                } else {
                  return 'l';
                }
              });
              nxt_selector.push(`[${delta_key}=1]`);
              break;
            default:
              throw new Error(`µ37634 unknown move command ${rpr(delta_value)}`);
          }
          break;
        case 'number':
          prv_value = parseInt(prv_cdtsel.attr(delta_key), 10);
          nxt_value = prv_value + delta_value;
          nxt_selector.push(`[${delta_key}=${nxt_value}]`);
          break;
        default:
          throw new Error(`µ37633 expected a text or a number, got a ${type}`);
      }
    }
    nxt_selector = nxt_selector.join('');
    this.log(`_select_delta_candidate ${jr(deltas)} ${jr(nxt_selector)}`);
    if ((R = (nxt_cdtsel = glyphboxes.filter(nxt_selector)).length) === 0) {
      return R;
    }
    prv_cdtsel.removeClass('cdtsel');
    nxt_cdtsel.addClass('cdtsel');
    nxt_cdtsel[0].scrollIntoViewIfNeeded();
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  XE.listen_to('^load-documents', this, function(d) {
    /* Will be used to restore previous state, open new documents; for now, just opens the default file. */
    /* TAINT auto-create file when not present */
    var file_path;
    file_path = PATH.resolve(PATH.join(__dirname, '../.cache/default.md'));
    d.value.S.codemirror.editor.doc.setValue(FS.readFileSync(file_path, {
      encoding: 'utf-8'
    }));
    return null;
  });

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT use proper keybinding API to define key bindings */
  XE.listen_to('^keyboard', this, function(d) {
    var key;
    ({key, S} = d.value);
    if ((key.name === 'ctrl+s') && (key.move === 'up')) {
      XE.emit(PD.new_event('^save-document', {S}));
    }
    return null;
  });

  //-----------------------------------------------------------------------------------------------------------
  XE.listen_to('^save-document', this, function(d) {
    /* Will be used to save active document; currently just saves default file. */
    var file_path;
    file_path = PATH.resolve(PATH.join(__dirname, '../.cache/default.md'));
    this.log(`saving document to ${rpr(file_path)}`);
    FS.writeFileSync(file_path, d.value.S.codemirror.editor.doc.getValue());
    return null;
  });

  //-----------------------------------------------------------------------------------------------------------
  this.focusframe_to_editor = function() {
    this._focusframe_to(S, 'leftbar');
    /* TAINT use method, must be possible to remap */
    return S.focus_is_candidates = false;
  };

  // S.kblevels.shift      = false
  this.focusframe_to_candidates = function() {
    this._focusframe_to(S, 'rightbar');
    /* TAINT use method, must be possible to remap */
    return S.focus_is_candidates = true;
  };

  // S.kblevels.shift      = false
  this.focusframe_to_logger = function() {
    this._focusframe_to(S, '#logger');
    /* TAINT use method, must be possible to remap */
    return S.focus_is_candidates = false;
  };

  // S.kblevels.shift      = false

  //-----------------------------------------------------------------------------------------------------------
  this._focusframe_to = function(S, target) {
    var ff, height, left, tgto, top, width;
    if (CND.isa_text(target)) {
      // target      = jQuery( document.activeElement )
      target = jQuery(target);
    }
    ff = jQuery('focusframe');
    if (target.length < 1) {
      return;
    }
    // ff.offset     target.offset()
    // ff.width      target.width()
    // ff.height     target.height()
    tgto = target.offset();
    if (tgto == null) {
      return;
    }
    left = tgto.left - 1;
    top = tgto.top - 1;
    width = target.width() + 2;
    height = target.height() + 2;
    ff.animate({left, top, width, height}, 100);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT use proper keybinding API to define key bindings */
  XE.listen_to('^kblevel', this, function(d) {
    /* map kblevel 'shift' to manual editor/candidates focus selection */
    var v;
    v = d.value;
    ({S} = v);
    // debug 'µ87444', S.kblevels.shift
    if ((S.focus_is_candidates = S.kblevels.shift)) {
      this.focusframe_to_candidates();
    } else {
      this.focusframe_to_editor();
    }
    /* TAINT consider to re-set focus after mouse clicks to elsewhere in GUI */
    /* Make browser focus always stay on editor: */
    return null;
  });

  //-----------------------------------------------------------------------------------------------------------
  this.always_focus_editor = function() {
    this.always_focus_editor = function()/* do not add any more handlers with this method after first call */ {};
    (jQuery('div.CodeMirror-code')).on('blur', function() {
      return this.focus();
    });
    (jQuery('div.CodeMirror-code')).focus();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._cm_keymap_move = function(cm, editor_method_name, candidates_method) {
    if (!S.focus_is_candidates) {
      return CodeMirror.commands[editor_method_name](cm);
    }
    return candidates_method.apply(this);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.move_right = function(cm) {
    return this._cm_keymap_move(cm, 'goCharRight', () => {
      return this._select_delta_candidate({
        lnr: +1
      });
    });
  };

  this.move_left = function(cm) {
    return this._cm_keymap_move(cm, 'goCharLeft', () => {
      return this._select_delta_candidate({
        lnr: -1
      });
    });
  };

  this.move_nxtline_first = function(cm) {
    return this._cm_keymap_move(cm, 'defaultTab', () => {
      return this._select_delta_candidate({
        lcol: 'first',
        lrow: +1
      });
    });
  };

  this.move_prvline_first = function(cm) {
    return this._cm_keymap_move(cm, 'indentLess', () => {
      return this._select_delta_candidate({
        lcol: 'first',
        lrow: -1
      });
    });
  };

  this.move_up = function(cm) {
    return this._cm_keymap_move(cm, 'goLineUp', () => {
      return this.log('######### move_up');
    });
  };

  this.move_down = function(cm) {
    return this._cm_keymap_move(cm, 'goLineDown', () => {
      return this.log('######### move_down');
    });
  };

  this.move_to_home = function(cm) {
    return this._cm_keymap_move(cm, 'defaultHome', () => {
      return this._select_delta_candidate({
        lrow: 0,
        lcol: 'first'
      });
    });
  };

  // @move_to_end        = ( cm ) -> @_cm_keymap_move cm, 'defaultEnd',  => @_select_delta_candidate { lrow: 0, rcol: 'first',  }
  this.move_to_end = function(cm) {
    return this._cm_keymap_move(cm, 'defaultEnd', () => {
      return this._select_delta_candidate({
        lrow: 0,
        lcol: 'last'
      });
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.init_cm_keymap = function(S) {
    var mktw_keymap;
    mktw_keymap = {
      'Left': (cm) => {
        return this.move_left(cm);
      },
      'Right': (cm) => {
        return this.move_right(cm);
      },
      'Up': (cm) => {
        return this.move_up(cm);
      },
      'Down': (cm) => {
        return this.move_down(cm);
      },
      'Tab': (cm) => {
        return this.move_nxtline_first(cm);
      },
      'Shift-Tab': (cm) => {
        return this.move_prvline_first(cm);
      },
      'Home': (cm) => {
        return this.move_to_home(cm);
      },
      'End': (cm) => {
        return this.move_to_end(cm);
      },
      'Space': (cm) => {
        return this.insert_space_or_selection(cm);
      }
    };
    //.........................................................................................................
    S.codemirror.editor.addKeyMap(mktw_keymap);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.init = function() {
    // { remote, }               = require 'electron'
    // XE                        = remote.require './xemitter'
    //.........................................................................................................
    /* Instantiate state, add important UI elements */
    S = STATE.new();
    S.candidates = {
      jq: jQuery('#candidates'),
      selected: {
        id: null
      }
    };
    S.focus_is_candidates = false;
    //.........................................................................................................
    // ### Register key and mouse events ###
    // S.scroller.on 'wheel',                ( event ) => @on_wheel                S, event
    // S.scroller.on 'scroll',               ( event ) => @on_scroll               S, event
    // S.input.on 'input',                   ( event ) => @on_input                S, event
    // ### use event for this? ###
    // S.scroller_last_top = S.scroller.scrollTop()
    //.........................................................................................................
    /* Initialize CodeMirror */
    S.codemirror.editor = CodeMirror.fromTextArea((jQuery('#codemirror'))[0], S.codemirror.settings);
    S.codemirror.editor.setSize(null, '100%');
    S.codemirror.editor.on('inputRead', function(me, change) {
      return XE.emit(PD.new_event('^raw-input', {S, change}));
    });
    XE.listen_to('^ignore-delete', function() {
      return S.ignore_delete += +1;
    });
    S.codemirror.editor.on('change', function(me, change) {
      if (change.origin !== '+delete') {
        /* TAINT when inserting results, will there be a change event? */
        return null;
      }
      /* ignore event if it has been generated: */
      if (S.ignore_delete > 0) {
        S.ignore_delete += -1;
        return null;
      }
      return XE.emit(PD.new_event('^raw-input', {S, change}));
    });
    this.always_focus_editor();
    //.........................................................................................................
    // S.codemirror.editor.on 'beforeChange',    ( me, change      ) -> whisper 'µ66653', 'beforeChange',  jr change
    // S.codemirror.editor.on 'change',          ( me, change      ) -> whisper 'µ66653', 'change',        jr change
    // S.codemirror.editor.on 'changes',         ( me, changes     ) -> whisper 'µ66653', 'changes',       jr changes
    // S.codemirror.editor.on 'cursorActivity',  ( me              ) -> whisper 'µ66653', 'cursorActivity'
    // S.codemirror.editor.on 'keyHandled',      ( me, name, event ) -> whisper 'µ66653', 'keyHandled',    jr name
    // S.codemirror.editor.on 'inputRead',       ( me, change      ) -> whisper 'µ66653', 'inputRead',     jr change
    //.........................................................................................................
    /* Register key and mouse events */
    KEYS.syphon_key_and_mouse_events(S, jQuery('html'));
    // KEYS.register 'axis', 'vertical',     ( uie )   => @on_vertical_navigation  uie
    // KEYS.register 'slot', 'Enter',        ( uie )   => @on_add_selection        uie
    XE.emit(PD.new_event('^load-documents', {S}));
    this.focusframe_to_editor(S);
    this.init_cm_keymap(S);
    //.........................................................................................................
    /* Detect resizing events: */
    /* TAINT won't work when panes are shifted (probably) */
    (jQuery(window)).on('resize', () => {
      debug("resize window");
      this.index_candidates();
      return null;
    });
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  jQuery(init.bind(this));

  /*
cm.findPosH(start: {line, ch}, amount: integer, unit: string, visually: boolean) → {line, ch, ?hitSide: boolean}
cm.findPosV(start: {line, ch}, amount: integer, unit: string) → {line, ch, ?hitSide: boolean}
cm.findWordAt(pos: {line, ch}) → {anchor: {line, ch}, head: {line, ch}}
cm.hasFocus() → boolean

doc.addSelection        = (anchor: {line, ch}, ?head: {line, ch})
doc.changeGeneration    = (?closeEvent: boolean) → integer
doc.eachLine            = (f: (line: LineHandle))
doc.eachLine            = (start: integer, end: integer, f: (line: LineHandle))
doc.extendSelection     = (from: {line, ch}, ?to: {line, ch}, ?options: object)
doc.extendSelections    = (heads: array<{line, ch}>, ?options: object)
doc.extendSelectionsBy  = (f: function(range: {anchor, head}) → {line, ch}), ?options: object)
doc.firstLine           = () → integer
doc.getCursor           = (?start: string) → {line, ch}
doc.getExtending        = () → boolean
doc.getLine             = (n: integer) → string
doc.getLineHandle       = (num: integer) → LineHandle
doc.getLineNumber       = (handle: LineHandle) → integer
doc.getRange            = (from: {line, ch}, to: {line, ch}, ?separator: string) → string
doc.getSelection        = (?lineSep: string) → string
doc.getSelections       = (?lineSep: string) → array<string>
doc.getValue            = (?separator: string) → string
doc.isClean             = (?generation: integer) → boolean
doc.lastLine            = () → integer
doc.lineCount           = () → integer
doc.listSelections      = () → array<{anchor, head}>
doc.markClean           = ()
doc.replaceRange        = (replacement: string, from: {line, ch}, to: {line, ch}, ?origin: string)
doc.replaceSelection    = (replacement: string, ?select: string)
doc.replaceSelections   = (replacements: array<string>, ?select: string)
doc.setCursor           = (pos: {line, ch}|number, ?ch: number, ?options: object)
doc.setExtending        = (value: boolean)
doc.setSelection        = (anchor: {line, ch}, ?head: {line, ch}, ?options: object)
doc.setSelections       = (ranges: array<{anchor, head}>, ?primary: integer, ?options: object)
doc.setValue            = (content: string)
doc.somethingSelected   = () → boolean
*/

}).call(this);

//# sourceMappingURL=ops.js.map
