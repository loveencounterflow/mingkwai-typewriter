{
  "version": 3,
  "file": "ime.js",
  "sourceRoot": "..",
  "sources": [
    "src/ime.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/IME'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n#...........................................................................................................\n# parallel                  = require './parallel-promise'\nDB                        = require './db'\n#...........................................................................................................\n# _format                   = require 'pg-format'\n# I                         = ( value ) -> _format '%I', value\n# L                         = ( value ) -> _format '%L', value\n#...........................................................................................................\n{ jr, }                   = CND\nPD                        = require 'pipedreams'\n{ remote, }               = require 'electron'\nIF                        = require 'interflug'\nXE                        = remote.require './xemitter'\n\nXE.listen_to_all ( key, d ) ->\n  debug       'µ21112-1', 'renderer', jr d\n  console.log 'µ21112-2', 'renderer', jr d\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@query_for_regex_terms = ( S, text, offset, limit ) ->\n  urge 'µ33377'\n  urge 'µ33377', \"#{process.type} process PID #{process.pid}\" #, \"window ID\", await IF.wait_for_window_id_from_pid process.pid\n  browser_window_id = await IF.wait_for_window_id_from_pid remote.process.pid\n  urge 'µ33377', \"#{remote.process.type} remote.process PID #{remote.process.pid}\", \"window ID\", browser_window_id\n  # debug 'µ38733', rpr text\n  # debug 'µ33773', remote.getCurrentWindow()\n  # # debug 'µ33773', ( k for k of remote.getCurrentWindow() )\n  # # debug 'µ33773', ( k for k of remote.getGlobal() )\n  # win = remote.getCurrentWindow()\n  # win.setTitle 'helo world'\n  # state = remote.require './state'\n  ### TAINT don't use `global`, use module-level attribute, XEmitter ###\n  # XE.emit PD.new_event '^test-event', 42\n  if ( shared = remote.getGlobal 'shared' )?\n    warn 'µ46632', shared.foo\n    warn 'µ46632', shared.main.pid\n    warn 'µ46632', \"Window ID (1)\", shared.main.wid\n  return\n\n  ##########################################################################################################\n  ##########################################################################################################\n  ##########################################################################################################\n  terms     = ( term for term in text.split /\\s+/ when term isnt '' )\n  if S.bind_left or S.bind_right\n    prefix = if S.bind_left   then '^' else ''\n    suffix = if S.bind_right  then '$' else ''\n    terms  = ( prefix + term + suffix for term in terms )\n  R         = []\n  R.push \"select distinct\"\n  R.push \"    -- e1.nr                                                         as nr,\"\n  R.push \"    -- e1.source                                                     as source,\"\n  R.push \"    e1.iclabel                                                    as iclabel,\"\n  R.push \"    regexp_replace( e1.iclabel, ':.$', '' )                       as short_iclabel,\"\n  R.push \"    e1.glyph                                                      as glyph,\"\n  R.push \"    string_agg( e1.value, ' ' ) over w                            as value\"\n  R.push \"  from IME.entries as e1\"\n  for term, idx in terms\n    nr = idx + 2\n    R.push \"  join IME.entries as e#{nr} on ( e1.iclabel = e#{nr}.iclabel )\"\n  R.push \"  where true                                                    \"\n  for term, idx in terms\n    nr = idx + 2\n    R.push \"    and ( e#{nr}.value ~ #{L term} )\"\n  R.push \"  window w as ( partition by e1.iclabel\"\n  R.push \"    order by e1.source\"\n  R.push \"    range between unbounded preceding and unbounded following )\"\n  R.push \"  offset #{offset} limit #{limit};\"\n  return R.join '\\n'\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@fetch_rows = ( S, text ) ->\n  # S.query  = S.keys.join ''\n  # S.query  = '^' + S.query        if S.bind_left\n  # S.query  =       S.query + '$'  if S.bind_right\n  offset    = S.page_idx * S.page_height\n  S.query   = @query_for_regex_terms S, text, offset, S.page_height\n  # debug 'µ77633', S.query\n  t0        = Date.now()\n  try\n    S.rows    = await DB.query S.query\n    S.qdt     = Date.now() - t0\n  catch error\n    switch error.code\n      when '2201B'\n        warn \"illegal regex #{rpr S.query}\"\n        rows = []\n      else\n        alert rpr error.code\n        alert rpr error.name\n        alert rpr error.message\n        throw error\n  @postprocess_rows S\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@postprocess_rows = ( S ) ->\n  for row, idx in S.rows\n    row.value = row.value.replace /[<>]/g, ''\n  null\n\n#-----------------------------------------------------------------------------------------------------------\n@on_state_changed = ( S ) ->\n  S.page_idx = 0\n  S.row_idx  = 0\n\n#-----------------------------------------------------------------------------------------------------------\n###\n???\nXE.listen_to 'IME/input/add', @,\n@on_ime_input_add = ( { S, row_idx, chr, } ) ->\n  debug \"update IME state with input #{chr}\"\n  # if ( row = S.rows[ S.row_idx ] )?\n  #   S.buffer.push row.glyph\n  #   CLIPBOARD.write S.buffer.join ''\n  # S.keys.length = 0\n  # S.query      = null\n  # return null\n###\n\n#-----------------------------------------------------------------------------------------------------------\n@announce = ( S, level, P... ) ->\n  switch level\n    when 'warn' then echo CND.red CND.reverse P...\n    when 'help' then help CND.lime P...\n    else\n      throw new Error \"(internal errror) unknown announcement level #{rpr level}\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@label = ( S, position ) ->\n  switch position\n    when 'query'\n      echo CND.blue ( CND.reverse ' ' + S.query + ' ' )\n    when 'page_nr'\n      echo CND.blue \"page: #{S.page_idx + 1}\"\n    when 'qdt'\n      echo CND.gold \"qdt: #{S.qdt}\"\n    # when 'count' then help P...\n    else\n      throw new Error \"(internal errror) unknown label position #{rpr label}\"\n  return null\n\n###\n  see https://electronjs.org/docs/api/accelerator\n  see https://github.com/avocode/combokeys#readme\n\n  #.........................................................................................................\n  debug '45778', rpr key.name ? key.text\n  switch key.name ? key.text\n    when 'up'               then S.row_idx     = S.row_idx  - 1\n    when 'down'             then S.row_idx     = S.row_idx  + 1\n    when 'page-up'          then S.page_idx    = S.page_idx - 1\n    when 'page-down'        then S.page_idx    = S.page_idx + 1\n    when '^'                then S.bind_left   = not S.bind_left\n    when '$'                then S.bind_right  = not S.bind_right\n    when 'backspace'        then @pop S\n    when 'space', 'return'  then @choose S\n    else\n      if ( /[()\\[\\]]/ ).test key.text\n        @announce S, 'warn', \"ignored key #{rpr key.name} #{rpr key.text}\"\n      else\n        text = key.text\n        # ## TAINT parametrize fuzzification ##\n        if      text in [ 'o', 'u', ]   then text = '(?:o|u)'\n        else if text == 'e'             then text = '(?:e|o)'\n        @push S, text\n  #.........................................................................................................\n  S.row_idx  = Math.max 0, S.row_idx\n  S.row_idx  = Math.min ( Math.max 0, Math.min S.rows.length - 1, S.page_height - 1 ), S.row_idx\n  S.page_idx = Math.max 0, S.page_idx\n  S.page_idx = Math.min 100, S.page_idx\n  debug '38991', S.row_idx\n###\n\n# #-----------------------------------------------------------------------------------------------------------\n# @find_matches = ( S, text ) ->\n#   # echo CND.clear\n#   # echo CND.grey key.name, ( rpr key.text )\n#   # return\n#   #.........................................................................................................\n#   await @fetch_rows S\n#   debug '55542-1', rpr S.query\n#   if S.rows.length is 0\n#     @announce S, 'warn', \"no matches for #{rpr S.query}\"\n#     # S.keys.pop()\n#     # [ S.query, S.rows, ] = await @fetch_rows()\n#     # debug '55542-2', rpr S.query\n#   #.........................................................................................................\n#   @label S, 'query'\n#   @label S, 'page_nr'\n#   @label S, 'qdt'\n#   for row, row_idx in S.rows\n#     color   = if row_idx == S.row_idx then CND.white else CND.lime\n#     iclabel = row.iclabel.replace /:.$/u, ''\n#     echo color S.selectors[ row_idx ], iclabel, row.glyph, row.value, row.source, ( row.rank ? '/' )\n#   #.........................................................................................................\n#   echo CND.plum S.buffer.join ''\n#   #.........................................................................................................\n#   return null\n\n# @key_handler = @key_handler.bind @\n\n# ############################################################################################################\n# unless module.parent?\n#   IME       = @\n#   help \"matching strokeorders\"\n#   @key_handler { name: null, text: null, }\n#   @listen_to_keys IME.key_handler\n\n\n\n"
  ]
}