// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, FS, L, PATH, PD, TRIODE, assign, badge, debug, echo, help, info, jr, rpr, select, urge, warn, whisper, xray;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/DS-TRANSFORMS/WRITE-KANA-KEYBOARD';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  TRIODE = require('triode');

  this._drop_extension = function(path) {
    return path.slice(0, path.length - (PATH.extname(path)).length);
  };

  //-----------------------------------------------------------------------------------------------------------
  xray = function(text) {
    var chr, i, len, ref, results;
    ref = Array.from(text);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      chr = ref[i];
      results.push((chr.codePointAt(0)).toString(16));
    }
    return results;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$as_line = function() {
    return $((d, send) => {
      return send((jr(d)) + '\n');
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$name_fields = function() {
    return $((d, send) => {
      var target, transliteration;
      [transliteration, target] = d;
      return send({transliteration, target});
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$feed_triode = function() {
    var last, triode;
    last = Symbol('last');
    triode = TRIODE.new();
    return $({last}, (d, send) => {
      if (d === last) {
        return send(triode);
      }
      triode.set(d.transliteration, d.target);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$write_kbd = (target_path) => {
    var pipeline;
    pipeline = [];
    pipeline.push($((triode, send) => {
      return send(triode.replacements_as_js_module_text());
    }));
    pipeline.push(PD.write_to_file(target_path));
    return PD.$tee(PD.pull(...pipeline));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$write_cdt = (target_path) => {
    var pipeline;
    pipeline = [];
    pipeline.push($((triode, send) => {
      return send(triode.as_js_module_text());
    }));
    pipeline.push(PD.write_to_file(target_path));
    return PD.$tee(PD.pull(...pipeline));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.write_cache = function(settings) {
    return new Promise((resolve, reject) => {
      var cdt_target_filename, cdt_target_path, convert, kbd_target_filename, kbd_target_path;
      kbd_target_filename = (this._drop_extension(PATH.basename(settings.source_path))) + '.kbd.js';
      cdt_target_filename = (this._drop_extension(PATH.basename(settings.source_path))) + '.cdt.js';
      kbd_target_path = PATH.resolve(PATH.join(__dirname, '../../.cache', kbd_target_filename));
      cdt_target_path = PATH.resolve(PATH.join(__dirname, '../../.cache', cdt_target_filename));
      help(`translating ${rpr(PATH.relative(process.cwd(), settings.source_path))}`);
      //.........................................................................................................
      convert = () => {
        var pipeline;
        pipeline = [];
        pipeline.push(PD.read_from_file(settings.source_path));
        pipeline.push(PD.$split_wsv(2));
        pipeline.push(this.$name_fields());
        pipeline.push(this.$feed_triode());
        if (settings.postprocess != null) {
          pipeline.push(PD.$watch(function(triode) {
            return settings.postprocess(triode);
          }));
        }
        // pipeline.push PD.$show()
        pipeline.push(this.$write_kbd(kbd_target_path));
        pipeline.push(this.$write_cdt(cdt_target_path));
        pipeline.push(PD.$drain(() => {
          help(`wrote output to ${rpr(PATH.relative(process.cwd(), kbd_target_path))}`);
          return resolve();
        }));
        PD.pull(...pipeline);
        return null;
      };
      //.........................................................................................................
      convert();
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    L = this;
    (async function() {
      var settings;
      //.......................................................................................................
      settings = {
        source_path: PATH.resolve(PATH.join(__dirname, '../../db/jp_kana.wsv')),
        postprocess: function(triode) {
          var ref, subkey, superkeys;
          triode.disambiguate_subkey('n', 'n.');
          triode.disambiguate_subkey('v', 'v.');
          ref = triode.get_all_superkeys();
          for (subkey in ref) {
            superkeys = ref[subkey];
            help(`µ46474 resolving ${rpr(subkey)} -> ${rpr(superkeys)}`);
            triode.apply_replacements_recursively(subkey);
          }
          return null;
        }
      };
      return (await L.write_cache(settings));
    })();
  }

  // #.......................................................................................................
// settings =
//   source_path:  PATH.resolve PATH.join __dirname, '../../db/gr_gr.keyboard.wsv'
//   postprocess: ( triode ) ->
//     debug 'µ77622', triode.get_all_superkeys()
//   #   triode.disambiguate_subkey 'n', 'n.'
//   #   triode.disambiguate_subkey 'v', 'v.'
//   #   for subkey, superkeys of triode.get_all_superkeys()
//   #     help "µ46474 resolving #{rpr subkey} -> #{rpr superkeys}"
//   #     triode.apply_replacements_recursively subkey
//   #   return null
// await L.write_cache settings
// help 'ok'

}).call(this);

//# sourceMappingURL=write-kana-keyboard.js.map
