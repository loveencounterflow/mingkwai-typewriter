// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, FS, JACONV, L, PATH, PD, PSPG, as_sql, assign, badge, debug, declare, echo, help, info, isa, jr, last_of, rpr, select, size_of, to_width, type_of, types, urge, validate, warn, whisper, width_of;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/DS-TRANSFORMS/WRITE-CEDICT-PINYIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  JACONV = require('jaconv');

  this._drop_extension = function(path) {
    return path.slice(0, path.length - (PATH.extname(path)).length);
  };

  types = require('../types');

  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  require('../exception-handler');

  PSPG = require('pspg');

  //...........................................................................................................
  /* TAINT needed for tabular output, to be moved to a package or submodule: */
  ({to_width, width_of} = require('to-width'));

  //-----------------------------------------------------------------------------------------------------------
  last_of = function(x) {
    return x[(size_of(x)) - 1];
  };

  this.$as_line = () => {
    return $((line, send) => {
      return send(line + '\n');
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  as_sql = function(x) {
    var R;
    validate.text(x);
    R = x;
    R = R.replace(/'/g, "''");
    return `'${R}'`;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$split_fields = function() {
    var pattern;
    // 臈たける;臈長ける;臈闌ける,[ろうたける],/(v1,vi)
    pattern = /^(?<candidates>\S+)(\x20\[(?<readings>[^\]]+)\]|)\x20\/(?<glosses>.*)\/$/;
    return $((line, send) => {
      var candidates, gloss, glosses, match, readings;
      if ((match = line.match(pattern)) == null) {
        warn(`unexpected format: ${rpr(line)}`);
        return null;
      }
      ({candidates, readings, glosses} = match.groups);
      candidates = candidates.trim().split(';');
      glosses = glosses.trim().split('/');
      if ((last_of(glosses)).startsWith('EntL')) {
        glosses.pop();
      }
      gloss = glosses.join('; ');
      if (readings != null) {
        readings = readings.trim().split(';');
      } else {
        readings = null;
      }
      return send({line, candidates, readings, gloss});
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$skip_blank_lines_and_comments = () => {
    return PD.$filter((line) => {
      if (isa.blank_text(line)) {
        return false;
      }
      if (line.startsWith('#')) {
        return false;
      }
      if (line.startsWith('　？？？ ')) { // first line of edict2u as downloaded
        return false;
      }
      return true;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$fan_out = () => {
    return $((row, send) => {
      var candidate, i, j, len, len1, reading, ref, ref1;
      if (row.readings == null) {
        return null;
      }
      ref = row.readings;
      for (i = 0, len = ref.length; i < len; i++) {
        reading = ref[i];
        ref1 = row.candidates;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          candidate = ref1[j];
          send({
            reading,
            candidate,
            gloss: row.gloss,
            line: row.line
          });
        }
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$distribute_refined_readings = () => {
    /* Takes care of `reading`s like `いっさくねん(一昨年)` that are only valid for a subset of candidates. */
    var refinements_pattern;
    refinements_pattern = /^(?<reading>[^(]+)\((?<refinements>[^)]+)\)$/;
    return $((row, send) => {
      var candidate, gloss, i, len, line, match, reading, refinements, results;
      ({reading, candidate, gloss, line} = row);
      if ((match = reading.match(refinements_pattern)) == null) {
        // send { nr: 'µ33734', match: reading.match refinements_pattern }
        return send(row);
      }
      ({reading, refinements} = match.groups);
      refinements = refinements.split(/,/);
      results = [];
      for (i = 0, len = refinements.length; i < len; i++) {
        candidate = refinements[i];
        results.push(send({reading, candidate, gloss, line}));
      }
      return results;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$validate_plural_row = () => {
    return PD.$watch((row) => {
      return validate.edict2u_plural_row(row);
    });
  };

  this.$validate_singular_row = () => {
    return PD.$watch((row) => {
      return validate.edict2u_singular_row(row);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$normalize = () => {
    return PD.$watch((row) => {
      if (!isa.edict2u_singular_row(row)) {
        return null;
      }
      row.reading = JACONV.toHanAscii(row.reading);
      row.candidate = JACONV.toHanAscii(row.candidate);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$remove_annotations = () => {
    /* see http://www.edrdg.org/jmdictdb/cgi-bin/edhelp.py?svc=jmdict&sid=#kw_misc */
    var pattern;
    pattern = /\((?:ateji|gikun|iK|ik|io|oK|ok|P)\)/g;
    return PD.$watch((row) => {
      if (!isa.edict2u_singular_row(row)) {
        return null;
      }
      row.reading = row.reading.replace(pattern, '');
      row.candidate = row.candidate.replace(pattern, '');
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$collect_remarkables = () => {
    var pattern, seen;
    // pattern = /\((?<annotation>[\x00-\xff]+)\)/
    pattern = /\((?<annotation>[^)]+)\)/;
    seen = new Set();
    return PD.$watch((row) => {
      var annotation, i, key, len, match, ref, text;
      if (!isa.edict2u_singular_row(row)) {
        return null;
      }
      ref = ['reading', 'candidate'];
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        text = row[key];
        if (seen.has(text)) {
          continue;
        }
        seen.add(text);
        if ((match = text.match(pattern)) == null) {
          //.....................................................................................................
          continue;
        }
        //.....................................................................................................
        ({annotation} = match.groups);
        if (seen.has(annotation)) {
          continue;
        }
        seen.add(annotation);
        //.....................................................................................................
        // color = if key is 'reading' then CND.orange else CND.lime
        // debug 'µ33982', key, text
        debug('µ33982', jr([key, row]));
      }
      // help 'µ43993', 'reading:    ', row.reading   if ( row.reading.match    pattern )?
      // urge 'µ43993', 'candidate:  ', row.candidate if ( row.candidate.match  pattern )?
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$remove_duplicates = () => {
    var count, last, seen;
    seen = new Set();
    count = 0;
    last = Symbol('last');
    return $((row, send) => {
      var key;
      if (row === last) {
        help(`µ33392 skipped ${count} duplicates`);
        return null;
      }
      key = `${row.reading}\x00${row.candidate}`;
      if (seen.has(key)) {
        count += +1;
        // whisper "duplicate: #{rpr key}"
        return null;
      }
      seen.add(key);
      return send(row);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$as_sql = () => {
    var first, is_first_record, last;
    first = Symbol('first');
    last = Symbol('last');
    is_first_record = true;
    return $({first, last}, (row, send) => {
      if (!isa.edict2u_singular_row(row)) {
        return;
      }
      //.......................................................................................................
      if (row === first) {
        return send("insert into edict2u ( reading, candidate, gloss ) values");
      //.......................................................................................................
      } else if (row === last) {
        return send(";");
      } else {
        //.......................................................................................................
        if (is_first_record) {
          is_first_record = false;
          return send(`( ${as_sql(row.reading)}, ${as_sql(row.candidate)}, ${as_sql(row.gloss)} )`);
        } else {
          return send(`,( ${as_sql(row.reading)}, ${as_sql(row.candidate)}, ${as_sql(row.gloss)} )`);
        }
      }
    });
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$tee_write_sql = (target_path) => {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$as_sql());
    pipeline.push(this.$as_line());
    pipeline.push(PD.write_to_file(target_path));
    return PD.$tee(PD.pull(...pipeline));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.write_dictionary = function(settings) {
    return new Promise((resolve, reject) => {
      /* TAINT normalize fullwidth characters */
      /* TAINT remove annotations from readings (e.g. 'おひいさま(ok)') */
      /* TAINT recognize, repair conflated entries like
        一昨年(P);おと年 [いっさくねん(一昨年)(P);おととし(P)] /(n-adv,n-t) year before last/(P)/EntL1576060X/
        上枝;秀つ枝 [うわえだ(上枝);うわえ(上枝);ほつえ] /(n) (See 下枝) upper branches of a tree/EntL2579960/

        try to recognize entries where

        * one or more (stretches) kana from a term that has kana and kanji do not appear in a corresponding
          kana-only term. (This test is, strictly speaking, not sufficient.)
        * there are different kana-only (hg & kt) terms.

       */
      /* TAINT some entries are loosing data:

      子猫(P);仔猫;子ネコ;小猫;子ねこ;仔ネコ [こねこ(子猫,仔猫,小猫,子ねこ)(P);こネコ(子ネコ,仔ネコ);コネコ] /(n) (1) kitten/(2) small cat/(P)/EntL1593380X/

      'reading',
      '子猫,仔猫,小猫,子ねこ',
      {
        reading: 'こねこ(子猫,仔猫,小猫,子ねこ)',
        candidate: '子ねこ',
        glosses: '(n) (1) kitten; (2) small cat; (P)'
      }

      `コネコ` is in source, but not in target.
      */
      var convert, target_filename, target_path;
      target_filename = (this._drop_extension(PATH.basename(settings.source_path))) + '.sql';
      target_path = PATH.resolve(PATH.join(__dirname, '../../.cache', target_filename));
      help(`translating ${rpr(PATH.relative(process.cwd(), settings.source_path))}`);
      //.........................................................................................................
      convert = () => {
        var pipeline;
        pipeline = [];
        pipeline.push(PD.read_from_file(settings.source_path));
        pipeline.push(PD.$split());
        pipeline.push(this.$skip_blank_lines_and_comments());
        pipeline.push(this.$split_fields());
        pipeline.push(this.$validate_plural_row());
        pipeline.push(this.$fan_out());
        // pipeline.push PD.$sample 100 / 200000
        pipeline.push(this.$validate_singular_row());
        pipeline.push(this.$distribute_refined_readings());
        pipeline.push(this.$normalize());
        pipeline.push(this.$remove_annotations());
        // pipeline.push PD.$show()
        pipeline.push(this.$collect_remarkables());
        pipeline.push(this.$remove_duplicates());
        pipeline.push(PSPG.$tee_as_table());
        pipeline.push(this.$tee_write_sql(target_path));
        pipeline.push(PD.$drain(() => {
          help(`wrote output to ${rpr(PATH.relative(process.cwd(), target_path))}`);
          return resolve();
        }));
        PD.pull(...pipeline);
        return null;
      };
      //.........................................................................................................
      convert();
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    L = this;
    (async function() {
      var settings;
      //.......................................................................................................
      settings = {
        // source_path:  PATH.resolve PATH.join __dirname, '../../db/edict2u'
        source_path: PATH.resolve(PATH.join(__dirname, '../../db/edict2u-test'))
      };
      // postprocess: ( triode ) ->
      //   triode.disambiguate_subkey 'n', 'n.'
      //   triode.disambiguate_subkey 'v', 'v.'
      //   for subkey, superkeys of triode.get_all_superkeys()
      //     help "µ46474 resolving #{rpr subkey} -> #{rpr superkeys}"
      //     triode.apply_replacements_recursively subkey
      //   return null
      await L.write_dictionary(settings);
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=write-edict2u-as-sql.js.map
