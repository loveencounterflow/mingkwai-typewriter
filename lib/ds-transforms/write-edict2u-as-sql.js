// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var $, $async, CND, FS, JACONV, L, PATH, PD, as_sql, assign, badge, debug, declare, echo, help, info, isa, jr, last_of, rpr, select, size_of, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/DS-TRANSFORMS/WRITE-CEDICT-PINYIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  JACONV = require('jaconv');

  this._drop_extension = function(path) {
    return path.slice(0, path.length - (PATH.extname(path)).length);
  };

  types = require('../types');

  ({isa, validate, declare, size_of, type_of} = types);

  //...........................................................................................................
  require('../exception-handler');

  //-----------------------------------------------------------------------------------------------------------
  last_of = function(x) {
    return x[(size_of(x)) - 1];
  };

  this.$as_line = () => {
    return $((line, send) => {
      return send(line + '\n');
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  as_sql = function(x) {
    var R;
    validate.text(x);
    R = x;
    R = R.replace(/'/g, "''");
    return `'${R}'`;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$split_fields = function() {
    var pattern;
    // 臈たける;臈長ける;臈闌ける,[ろうたける],/(v1,vi)
    pattern = /^(?<candidates>\S+)(\x20\[(?<readings>[^\]]+)\]|)\x20\/(?<glosses>.*)\/$/;
    return $((line, send) => {
      var candidates, glosses, match, readings;
      if ((match = line.match(pattern)) == null) {
        warn(`unexpected format: ${rpr(line)}`);
        return null;
      }
      ({candidates, readings, glosses} = match.groups);
      candidates = candidates.trim().split(';');
      glosses = glosses.trim().split('/');
      if ((last_of(glosses)).startsWith('EntL')) {
        glosses.pop();
      }
      glosses = glosses.join('; ');
      if (readings != null) {
        readings = readings.trim().split(';');
      } else {
        readings = null;
      }
      return send({candidates, readings, glosses});
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  declare('edict2u_plural_row', {
    tests: {
      '? is an object': function(x) {
        return this.isa.object(x);
      },
      '? has keys': function(x) {
        return this.has_keys(x, 'readings', 'candidates', 'glosses');
      },
      '?.readings is a *list': function(x) {
        return (x.readings == null) || this.isa.list(x.readings);
      },
      '?.candidates is a list': function(x) {
        return this.isa.list(x.candidates);
      },
      '?.glosses is a text': function(x) {
        return this.isa.text(x.glosses);
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  declare('edict2u_singular_row', {
    tests: {
      '? is an object': function(x) {
        return this.isa.object(x);
      },
      '? has keys': function(x) {
        return this.has_keys(x, 'reading', 'candidate', 'glosses');
      },
      '?.reading is a text': function(x) {
        return this.isa.text(x.reading);
      },
      '?.candidate is a text': function(x) {
        return this.isa.text(x.candidate);
      },
      '?.glosses is a text': function(x) {
        return this.isa.text(x.glosses);
      }
    }
  });

  //-----------------------------------------------------------------------------------------------------------
  this.$fan_out = () => {
    return $((row, send) => {
      var candidate, i, j, len, len1, reading, ref, ref1;
      validate.edict2u_plural_row(row);
      if (row.readings == null) {
        return null;
      }
      ref = row.readings;
      for (i = 0, len = ref.length; i < len; i++) {
        reading = ref[i];
        ref1 = row.candidates;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          candidate = ref1[j];
          send({
            reading,
            candidate,
            glosses: row.glosses
          });
        }
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$normalize = () => {
    return PD.$watch((row) => {
      validate.edict2u_singular_row(row);
      row.reading = JACONV.toHanAscii(row.reading);
      row.candidate = JACONV.toHanAscii(row.candidate);
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$remove_annotations = () => {
    var pattern;
    pattern = /[-(\[,;.:#~+*\])]/;
    return PD.$watch((row) => {
      validate.edict2u_singular_row(row);
      row.reading = row.reading.replace(/\(gikun|ateji|P|io|gikun|ok|\)/g, '');
      row.candidate = row.candidate.replace(/\(gikun|ateji|P|io|gikun|ok|\)/g, '');
      // help 'µ43993', 'reading:    ', row.reading   if ( row.reading.match    pattern )?
      // urge 'µ43993', 'candidate:  ', row.candidate if ( row.candidate.match  pattern )?
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$remove_duplicates = () => {
    var count, last, seen;
    seen = new Set();
    count = 0;
    last = Symbol('last');
    return $((row, send) => {
      var key;
      if (row === last) {
        help(`µ33392 skipped ${count} duplicates`);
        return null;
      }
      validate.edict2u_singular_row(row);
      key = `${row.reading}\x00${row.candidate}`;
      if (seen.has(key)) {
        count += +1;
        // whisper "duplicate: #{rpr key}"
        return null;
      }
      seen.add(key);
      return send(row);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$as_sql = () => {
    var first, is_first_record, last;
    first = Symbol('first');
    last = Symbol('last');
    is_first_record = true;
    return $({first, last}, (row, send) => {
      //.......................................................................................................
      if (row === first) {
        return send("insert into edict2u ( reading, candidate, glosses ) values");
      //.......................................................................................................
      } else if (row === last) {
        return send(";");
      } else {
        //.......................................................................................................
        validate.edict2u_singular_row(row);
        if (is_first_record) {
          is_first_record = false;
          return send(`( ${as_sql(row.reading)}, ${as_sql(row.candidate)}, ${as_sql(row.glosses)} )`);
        } else {
          return send(`,( ${as_sql(row.reading)}, ${as_sql(row.candidate)}, ${as_sql(row.glosses)} )`);
        }
      }
    });
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$write_sql = (target_path) => {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$as_sql());
    pipeline.push(this.$as_line());
    pipeline.push(PD.write_to_file(target_path));
    return PD.$tee(PD.pull(...pipeline));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.write_dictionary = function(settings) {
    return new Promise((resolve, reject) => {
      /* TAINT normalize fullwidth characters */
      /* TAINT remove annotations from readings (e.g. 'おひいさま(ok)') */
      /* TAINT recognize, repair conflated entries like
        一昨年(P);おと年 [いっさくねん(一昨年)(P);おととし(P)] /(n-adv,n-t) year before last/(P)/EntL1576060X/
      */
      var convert, target_filename, target_path;
      target_filename = (this._drop_extension(PATH.basename(settings.source_path))) + '.sql';
      target_path = PATH.resolve(PATH.join(__dirname, '../../.cache', target_filename));
      help(`translating ${rpr(PATH.relative(process.cwd(), settings.source_path))}`);
      //.........................................................................................................
      convert = () => {
        var pipeline;
        pipeline = [];
        pipeline.push(PD.read_from_file(settings.source_path));
        pipeline.push(PD.$split());
        // pipeline.push PD.$sample 20 / 183000 #, seed: 12
        pipeline.push(this.$split_fields());
        pipeline.push(this.$fan_out());
        pipeline.push(this.$normalize());
        pipeline.push(this.$remove_annotations());
        pipeline.push(this.$remove_duplicates());
        pipeline.push(this.$write_sql(target_path));
        // pipeline.push @$populate_db()
        pipeline.push(PD.$drain(() => {
          help(`wrote output to ${rpr(PATH.relative(process.cwd(), target_path))}`);
          return resolve();
        }));
        PD.pull(...pipeline);
        return null;
      };
      //.........................................................................................................
      convert();
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    L = this;
    (async function() {
      var settings;
      //.......................................................................................................
      settings = {
        source_path: PATH.resolve(PATH.join(__dirname, '../../db/edict2u'))
      };
      // postprocess: ( triode ) ->
      //   triode.disambiguate_subkey 'n', 'n.'
      //   triode.disambiguate_subkey 'v', 'v.'
      //   for subkey, superkeys of triode.get_all_superkeys()
      //     help "µ46474 resolving #{rpr subkey} -> #{rpr superkeys}"
      //     triode.apply_replacements_recursively subkey
      //   return null
      await L.write_dictionary(settings);
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=write-edict2u-as-sql.js.map
