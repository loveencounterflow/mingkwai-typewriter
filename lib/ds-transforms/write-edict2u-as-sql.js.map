{
  "version": 3,
  "file": "write-edict2u-as-sql.js",
  "sourceRoot": "../..",
  "sources": [
    "src/ds-transforms/write-edict2u-as-sql.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/DS-TRANSFORMS/WRITE-CEDICT-PINYIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\nJACONV                    = require 'jaconv'\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nrequire                   '../exception-handler'\n\n#-----------------------------------------------------------------------------------------------------------\nlast_of   = ( x ) -> x[ ( size_of x ) - 1 ]\n@$as_line = => $ ( line, send ) => send line + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\nas_sql = ( x ) ->\n  validate.text x\n  R = x\n  R = R.replace /'/g, \"''\"\n  return \"'#{R}'\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_fields = ->\n  # 臈たける;臈長ける;臈闌ける,[ろうたける],/(v1,vi)\n  pattern = ///\n    ^\n    (?<candidates> \\S+ )\n    (\n      \\x20\n      \\[\n        (?<readings> [^\\]]+ )\n        \\]\n      |\n      )\n    \\x20 \\/\n    (?<glosses> .* )\n    \\/\n    $\n    ///\n  return $ ( line, send ) =>\n    unless ( match = line.match pattern )?\n      warn \"unexpected format: #{rpr line}\"\n      return null\n    { candidates\n      readings\n      glosses   } = match.groups\n    candidates    = candidates.trim().split ';'\n    glosses       = glosses.trim().split '/'\n    glosses.pop() if ( last_of glosses ).startsWith 'EntL'\n    glosses       = glosses.join '; '\n    if readings? then readings  = readings.trim().split ';'\n    else              readings  = null\n    send { candidates, readings, glosses, }\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'edict2u_plural_row',\n  tests:\n    '? is an object':           ( x ) -> @isa.object   x\n    '? has keys':               ( x ) -> @has_keys x, 'readings', 'candidates', 'glosses'\n    '?.readings is a *list':    ( x ) -> ( not x.readings? ) or @isa.list x.readings\n    '?.candidates is a list':   ( x ) -> @isa.list x.candidates\n    '?.glosses is a text':      ( x ) -> @isa.text x.glosses\n\n#-----------------------------------------------------------------------------------------------------------\ndeclare 'edict2u_singular_row',\n  tests:\n    '? is an object':           ( x ) -> @isa.object   x\n    '? has keys':               ( x ) -> @has_keys x, 'reading', 'candidate', 'glosses'\n    '?.reading is a text':      ( x ) -> @isa.text x.reading\n    '?.candidate is a text':    ( x ) -> @isa.text x.candidate\n    '?.glosses is a text':      ( x ) -> @isa.text x.glosses\n\n#-----------------------------------------------------------------------------------------------------------\n@$fan_out = =>\n  return $ ( row, send ) =>\n    return null unless row.readings?\n    for reading in row.readings\n      for candidate in row.candidates\n        send { reading, candidate, glosses: row.glosses, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$validate_plural_row   = PD.$watch ( row ) => validate.edict2u_plural_row   row\n@$validate_singular_row = PD.$watch ( row ) => validate.edict2u_singular_row row\n\n#-----------------------------------------------------------------------------------------------------------\n@$normalize = =>\n  return PD.$watch ( row ) =>\n    row.reading   = JACONV.toHanAscii row.reading\n    row.candidate = JACONV.toHanAscii row.candidate\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$remove_annotations = =>\n  pattern = /[-(\\[,;.:#~+*\\])]/\n  return PD.$watch ( row ) =>\n    row.reading   = row.reading.replace     /\\(gikun|ateji|P|io|gikun|ok|\\)/g,     ''\n    row.candidate = row.candidate.replace   /\\(gikun|ateji|P|io|gikun|ok|\\)/g,     ''\n    # help 'µ43993', 'reading:    ', row.reading   if ( row.reading.match    pattern )?\n    # urge 'µ43993', 'candidate:  ', row.candidate if ( row.candidate.match  pattern )?\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$remove_duplicates = =>\n  seen  = new Set()\n  count = 0\n  last  = Symbol 'last'\n  return $ ( row, send ) =>\n    if row is last\n      help \"µ33392 skipped #{count} duplicates\"\n      return null\n    key = \"#{row.reading}\\x00#{row.candidate}\"\n    if seen.has key\n      count += +1\n      # whisper \"duplicate: #{rpr key}\"\n      return null\n    seen.add key\n    send row\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_sql = =>\n  first           = Symbol 'first'\n  last            = Symbol 'last'\n  is_first_record = true\n  return $ { first, last, }, ( row, send ) =>\n    #.......................................................................................................\n    if row is first\n      send \"insert into edict2u ( reading, candidate, glosses ) values\"\n    #.......................................................................................................\n    else if row is last\n      send \";\"\n    #.......................................................................................................\n    else\n      if is_first_record\n        is_first_record = false\n        send \"( #{as_sql row.reading}, #{as_sql row.candidate}, #{as_sql row.glosses} )\"\n      else\n        send \",( #{as_sql row.reading}, #{as_sql row.candidate}, #{as_sql row.glosses} )\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$write_sql = ( target_path ) =>\n  pipeline = []\n  pipeline.push @$as_sql()\n  pipeline.push @$as_line()\n  pipeline.push PD.write_to_file target_path\n  return PD.$tee PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@write_dictionary = ( settings ) -> new Promise ( resolve, reject ) =>\n  ### TAINT normalize fullwidth characters ###\n  ### TAINT remove annotations from readings (e.g. 'おひいさま(ok)') ###\n  ### TAINT recognize, repair conflated entries like\n    一昨年(P);おと年 [いっさくねん(一昨年)(P);おととし(P)] /(n-adv,n-t) year before last/(P)/EntL1576060X/\n  ###\n  target_filename   = ( @_drop_extension PATH.basename settings.source_path ) + '.sql'\n  target_path       = PATH.resolve PATH.join __dirname, '../../.cache', target_filename\n  help \"translating #{rpr PATH.relative process.cwd(), settings.source_path}\"\n  #.........................................................................................................\n  convert = =>\n    pipeline = []\n    pipeline.push PD.read_from_file settings.source_path\n    pipeline.push PD.$split()\n    # pipeline.push PD.$sample 20 / 183000 #, seed: 12\n    pipeline.push @$split_fields()\n    pipeline.push @$validate_plural_row()\n    pipeline.push @$fan_out()\n    pipeline.push @$validate_singular_row()\n    pipeline.push @$normalize()\n    pipeline.push @$remove_annotations()\n    pipeline.push @$remove_duplicates()\n    pipeline.push @$write_sql target_path\n    # pipeline.push @$populate_db()\n    pipeline.push PD.$drain =>\n      help \"wrote output to #{rpr PATH.relative process.cwd(), target_path}\"\n      resolve()\n    PD.pull pipeline...\n    return null\n  #.........................................................................................................\n  convert()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  L = @\n  do ->\n    #.......................................................................................................\n    settings =\n      source_path:  PATH.resolve PATH.join __dirname, '../../db/edict2u'\n      # postprocess: ( triode ) ->\n      #   triode.disambiguate_subkey 'n', 'n.'\n      #   triode.disambiguate_subkey 'v', 'v.'\n      #   for subkey, superkeys of triode.get_all_superkeys()\n      #     help \"µ46474 resolving #{rpr subkey} -> #{rpr superkeys}\"\n      #     triode.apply_replacements_recursively subkey\n      #   return null\n    await L.write_dictionary settings\n    help 'ok'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}