{
  "version": 3,
  "file": "write-edict2u-as-sql.js",
  "sourceRoot": "../..",
  "sources": [
    "src/ds-transforms/write-edict2u-as-sql.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/DS-TRANSFORMS/WRITE-CEDICT-PINYIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\nTRIODE                    = require 'triode'\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\ntypes                     = require '../types'\n{ isa\n  validate\n  size_of\n  type_of }               = types\n#...........................................................................................................\nrequire                   '../exception-handler'\n\n#-----------------------------------------------------------------------------------------------------------\nlast_of   = ( x ) -> x[ ( size_of x ) - 1 ]\n@$as_line = => $ ( line, send ) => send line + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\nas_sql = ( x ) ->\n  validate.text x\n  R = x\n  R = R.replace /'/g, \"''\"\n  return \"'#{R}'\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_fields = ->\n  # 臈たける;臈長ける;臈闌ける,[ろうたける],/(v1,vi)\n  pattern = ///\n    ^\n    (?<candidates> \\S+ )\n    (\n      \\x20\n      \\[\n        (?<readings> [^\\]]+ )\n        \\]\n      |\n      )\n    \\x20 \\/\n    (?<glosses> .* )\n    \\/\n    $\n    ///\n  return $ ( line, send ) =>\n    unless ( match = line.match pattern )?\n      warn \"unexpected format: #{rpr line}\"\n      return null\n    { candidates\n      readings\n      glosses   } = match.groups\n    candidates    = candidates.trim().split ';'\n    glosses       = glosses.trim().split '/'\n    glosses.pop() if ( last_of glosses ).startsWith 'EntL'\n    glosses       = glosses.join '; '\n    if readings? then readings  = readings.trim().split ';'\n    else              readings  = null\n    send { candidates, readings, glosses, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_sql = =>\n  first = Symbol 'first'\n  last  = Symbol 'last'\n  return $ { first, last, }, ( record, send ) =>\n    #.......................................................................................................\n    if record is first\n      send \"insert into dictionary ( readings, candidates, glosses ) values\"\n    #.......................................................................................................\n    else if record is last\n      send \";\"\n    #.......................................................................................................\n    else\n      { candidates\n        readings\n        glosses   } = record\n      return null unless readings?\n      for reading in readings\n        for candidate in candidates\n          send \"( #{as_sql reading}, #{as_sql candidate}, #{as_sql glosses} )\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$write_sql = ( target_path ) =>\n  pipeline = []\n  # pipeline.push @$distill_traditional()\n  # pipeline.push @$feed_triode()\n  # pipeline.push $ ( triode, send ) => send triode.as_js_module_text()\n  pipeline.push @$as_sql()\n  pipeline.push @$as_line()\n  pipeline.push PD.$show()\n  pipeline.push PD.write_to_file target_path\n  return PD.$tee PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@write_dictionary = ( settings ) -> new Promise ( resolve, reject ) =>\n  target_filename   = ( @_drop_extension PATH.basename settings.source_path ) + '.sql'\n  target_path       = PATH.resolve PATH.join __dirname, '../../.cache', target_filename\n  help \"translating #{rpr PATH.relative process.cwd(), settings.source_path}\"\n  #.........................................................................................................\n  convert = =>\n    pipeline = []\n    pipeline.push PD.read_from_file settings.source_path\n    pipeline.push PD.$split()\n    pipeline.push PD.$sample 20 / 183000 #, seed: 12\n    pipeline.push @$split_fields()\n    # pipeline.push $ ( line, send ) -> send line.replace /\\s+$/, '\\n' # prepare for line-splitting in WSV reader\n    # pipeline.push PD.$split_wsv 3\n    # pipeline.push @$split_pinyin_and_gloss()\n    # pipeline.push @$cleanup_pinyin()\n    pipeline.push @$write_sql target_path\n    pipeline.push PD.$drain =>\n      help \"wrote output to #{rpr PATH.relative process.cwd(), target_path}\"\n      resolve()\n    PD.pull pipeline...\n    return null\n  #.........................................................................................................\n  convert()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  L = @\n  do ->\n    #.......................................................................................................\n    settings =\n      source_path:  PATH.resolve PATH.join __dirname, '../../db/edict2u'\n      # postprocess: ( triode ) ->\n      #   triode.disambiguate_subkey 'n', 'n.'\n      #   triode.disambiguate_subkey 'v', 'v.'\n      #   for subkey, superkeys of triode.get_all_superkeys()\n      #     help \"µ46474 resolving #{rpr subkey} -> #{rpr superkeys}\"\n      #     triode.apply_replacements_recursively subkey\n      #   return null\n    await L.write_dictionary settings\n    help 'ok'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}