{
  "version": 3,
  "file": "write-edict2u-as-sql.js",
  "sourceRoot": "../..",
  "sources": [
    "src/ds-transforms/write-edict2u-as-sql.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/DS-TRANSFORMS/WRITE-CEDICT-PINYIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\nJACONV                    = require 'jaconv'\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\ntypes                     = require '../types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\nrequire                   '../exception-handler'\nPSPG                      = require 'pspg'\n#...........................................................................................................\n### TAINT needed for tabular output, to be moved to a package or submodule: ###\n{ to_width, width_of, }   = require 'to-width'\n\n\n#-----------------------------------------------------------------------------------------------------------\nlast_of   = ( x ) -> x[ ( size_of x ) - 1 ]\n@$as_line = => $ ( line, send ) => send line + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\nas_sql = ( x ) ->\n  validate.text x\n  R = x\n  R = R.replace /'/g, \"''\"\n  return \"'#{R}'\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_fields = ->\n  # 臈たける;臈長ける;臈闌ける,[ろうたける],/(v1,vi)\n  pattern = ///\n    ^\n    (?<candidates> \\S+ )\n    (\n      \\x20\n      \\[\n        (?<readings> [^\\]]+ )\n        \\]\n      |\n      )\n    \\x20 \\/\n    (?<glosses> .* )\n    \\/\n    $\n    ///\n  return $ ( line, send ) =>\n    unless ( match = line.match pattern )?\n      warn \"unexpected format: #{rpr line}\"\n      return null\n    { candidates\n      readings\n      glosses   } = match.groups\n    candidates    = candidates.trim().split ';'\n    glosses       = glosses.trim().split '/'\n    glosses.pop() if ( last_of glosses ).startsWith 'EntL'\n    gloss         = glosses.join '; '\n    if readings? then readings  = readings.trim().split ';'\n    else              readings  = null\n    send { line, candidates, readings, gloss, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_blank_lines_and_comments = => PD.$filter ( line ) =>\n  return false if ( isa.blank_text line )\n  return false if ( line.startsWith '#' )\n  return false if ( line.startsWith '　？？？ ' ) # first line of edict2u as downloaded\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@$fan_out = =>\n  return $ ( row, send ) =>\n    return null unless row.readings?\n    for reading in row.readings\n      for candidate in row.candidates\n        send { reading, candidate, gloss: row.gloss, line: row.line, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$distribute_refined_readings = =>\n  ### Takes care of `reading`s like `いっさくねん(一昨年)` that are only valid for a subset of candidates. ###\n  refinements_pattern = /^(?<reading>[^(]+)\\((?<refinements>[^)]+)\\)$/\n  return $ ( row, send ) =>\n    { reading\n      candidate\n      gloss\n      line }      = row\n    return send row unless ( match = reading.match refinements_pattern )?\n    { reading\n      refinements }   = match.groups\n    refinements       = refinements.split /,/\n    # send { badge: 'µ33734', reading, refinements: ( jr refinements ), }\n    for candidate in refinements\n      send { reading, candidate, gloss, line, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$validate_plural_row   = => PD.$watch ( row ) => validate.edict2u_plural_row   row\n@$validate_singular_row = => PD.$watch ( row ) => validate.edict2u_singular_row row\n\n#-----------------------------------------------------------------------------------------------------------\n@$normalize = =>\n  return PD.$watch ( row ) =>\n    return null unless isa.edict2u_singular_row row\n    row.reading   = JACONV.toHanAscii row.reading\n    row.reading   = JACONV.toHiragana row.reading\n    row.candidate = JACONV.toHanAscii row.candidate\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_kana_candidates = =>\n  return $ ( row, send ) =>\n    return null unless isa.edict2u_singular_row row\n    # send { row..., candidate: row.reading, }\n    # send { row..., candidate: ( JACONV.toKatakana row.reading ), }\n    send { row..., candidate: ( JACONV.toHiragana row.candidate ), }\n    send { row..., candidate: ( JACONV.toKatakana row.candidate ), }\n    send { row..., candidate: ( JACONV.toZenAscii row.candidate ), }\n    send { row..., candidate: ( JACONV.toHanKana  row.candidate ), }\n    send row\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$remove_annotations = =>\n  ### see http://www.edrdg.org/jmdictdb/cgi-bin/edhelp.py?svc=jmdict&sid=#kw_misc ###\n  pattern = /\\((?:ateji|gikun|iK|ik|io|oK|ok|P)\\)/g\n  return PD.$watch ( row ) =>\n    return null unless isa.edict2u_singular_row row\n    row.reading   = row.reading.replace     pattern, ''\n    row.candidate = row.candidate.replace   pattern, ''\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_remarkables = =>\n  # pattern = /\\((?<annotation>[\\x00-\\xff]+)\\)/\n  pattern = /\\((?<annotation>[^)]+)\\)/\n  seen = new Set()\n  return PD.$watch ( row ) =>\n    return null unless isa.edict2u_singular_row row\n    for key in [ 'reading', 'candidate', ]\n      text = row[ key ]\n      continue if seen.has text\n      seen.add text\n      #.....................................................................................................\n      continue unless ( match = text.match pattern )?\n      #.....................................................................................................\n      { annotation, } = match.groups\n      continue if seen.has annotation\n      seen.add annotation\n      #.....................................................................................................\n      # color = if key is 'reading' then CND.orange else CND.lime\n      # debug 'µ33982', key, text\n      debug 'µ33982', jr [ key, row, ]\n    # help 'µ43993', 'reading:    ', row.reading   if ( row.reading.match    pattern )?\n    # urge 'µ43993', 'candidate:  ', row.candidate if ( row.candidate.match  pattern )?\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$remove_duplicates = =>\n  seen  = new Set()\n  count = 0\n  last  = Symbol 'last'\n  return $ ( row, send ) =>\n    if row is last\n      help \"µ33392 skipped #{count} duplicates\"\n      return null\n    key = \"#{row.reading}\\x00#{row.candidate}\"\n    if seen.has key\n      count += +1\n      # whisper \"duplicate: #{rpr key}\"\n      return null\n    seen.add key\n    send row\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_sql = =>\n  first           = Symbol 'first'\n  last            = Symbol 'last'\n  is_first_record = true\n  return $ { first, last, }, ( row, send ) =>\n    return unless isa.edict2u_singular_row row\n    #.......................................................................................................\n    if row is first\n      send \"insert into edict2u ( reading, candidate, gloss ) values\"\n    #.......................................................................................................\n    else if row is last\n      send \";\"\n    #.......................................................................................................\n    else\n      if is_first_record\n        is_first_record = false\n        send \"( #{as_sql row.reading}, #{as_sql row.candidate}, #{as_sql row.gloss} )\"\n      else\n        send \",( #{as_sql row.reading}, #{as_sql row.candidate}, #{as_sql row.gloss} )\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_write_sql = ( target_path ) =>\n  pipeline = []\n  pipeline.push @$as_sql()\n  pipeline.push @$as_line()\n  pipeline.push PD.write_to_file target_path\n  return PD.$tee PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@write_dictionary = ( settings ) -> new Promise ( resolve, reject ) =>\n  ### TAINT normalize fullwidth characters ###\n  ### TAINT remove annotations from readings (e.g. 'おひいさま(ok)') ###\n  ### TAINT recognize, repair conflated entries like\n    一昨年(P);おと年 [いっさくねん(一昨年)(P);おととし(P)] /(n-adv,n-t) year before last/(P)/EntL1576060X/\n    上枝;秀つ枝 [うわえだ(上枝);うわえ(上枝);ほつえ] /(n) (See 下枝) upper branches of a tree/EntL2579960/\n\n    try to recognize entries where\n\n    * one or more (stretches) kana from a term that has kana and kanji do not appear in a corresponding\n      kana-only term. (This test is, strictly speaking, not sufficient.)\n    * there are different kana-only (hg & kt) terms.\n\n  ###\n  ### TAINT some entries are loosing data:\n\n  子猫(P);仔猫;子ネコ;小猫;子ねこ;仔ネコ [こねこ(子猫,仔猫,小猫,子ねこ)(P);こネコ(子ネコ,仔ネコ);コネコ] /(n) (1) kitten/(2) small cat/(P)/EntL1593380X/\n\n  'reading',\n  '子猫,仔猫,小猫,子ねこ',\n  {\n    reading: 'こねこ(子猫,仔猫,小猫,子ねこ)',\n    candidate: '子ねこ',\n    glosses: '(n) (1) kitten; (2) small cat; (P)'\n  }\n\n  `コネコ` is in source, but not in target.\n  ###\n  target_filename   = ( @_drop_extension PATH.basename settings.source_path ) + '.sql'\n  target_path       = PATH.resolve PATH.join __dirname, '../../.cache', target_filename\n  help \"translating #{rpr PATH.relative process.cwd(), settings.source_path}\"\n  #.........................................................................................................\n  return new Promise ( resolve ) =>\n    pipeline = []\n    pipeline.push PD.read_from_file settings.source_path\n    pipeline.push PD.$split()\n    pipeline.push @$skip_blank_lines_and_comments()\n    pipeline.push @$split_fields()\n    pipeline.push @$validate_plural_row()\n    pipeline.push @$fan_out()\n    # pipeline.push PD.$sample 100 / 200000\n    pipeline.push @$validate_singular_row()\n    pipeline.push @$normalize()\n    pipeline.push @$remove_annotations()\n    pipeline.push @$distribute_refined_readings()\n    pipeline.push @$add_kana_candidates()\n    pipeline.push @$collect_remarkables()\n    pipeline.push @$remove_duplicates()\n    pipeline.push PSPG.$tee_as_table -> resolve()\n    pipeline.push @$tee_write_sql target_path\n    pipeline.push PD.$drain =>\n      help \"wrote output to #{rpr PATH.relative process.cwd(), target_path}\"\n      resolve()\n    PD.pull pipeline...\n    #.......................................................................................................\n    return null\n\n\n############################################################################################################\nunless module.parent?\n  L = @\n  do ->\n    #.......................................................................................................\n    settings =\n      # source_path:  PATH.resolve PATH.join __dirname, '../../db/edict2u'\n      source_path:  PATH.resolve PATH.join __dirname, '../../db/edict2u-test'\n      # postprocess: ( triode ) ->\n      #   triode.disambiguate_subkey 'n', 'n.'\n      #   triode.disambiguate_subkey 'v', 'v.'\n      #   for subkey, superkeys of triode.get_all_superkeys()\n      #     help \"µ46474 resolving #{rpr subkey} -> #{rpr superkeys}\"\n      #     triode.apply_replacements_recursively subkey\n      #   return null\n    await L.write_dictionary settings\n    help 'ok'\n\n    debug 'µ33441', JACONV.toHiragana 'カブ'\n    debug 'µ33441', JACONV.toHiragana '仔ネコ'\n    demo_jaconv_methods = ->\n      probes = [\n        'hyakupaasento'\n        'ｈａｋｕｐａａｓｅｎｔｏ'\n        '100ぱーせんと'\n        '100パーセント'\n        '100ﾊﾟｰｾﾝﾄ'\n        'ひゃくぱーせんと'\n        '１００パーセント' ]\n      method_names = [\n        'normalize'\n        'toHan'\n        # 'toHanAscii'\n        # 'toHanKana'\n        # 'toHebon'\n        'toHiragana'\n        'toKatakana'\n        'toZen'\n        # 'toZenAscii'\n        # 'toZenKana'\n        ]\n      pipeline = []\n      pipeline.push PD.new_value_source probes\n      pipeline.push $ ( probe, send ) =>\n        send null\n        for method_name in method_names\n          result = JACONV[ method_name ] probe\n          send { probe, m: method_name, result, }\n      pipeline.push PSPG.$tee_as_table()\n      pipeline.push do =>\n        first = Symbol 'first'\n        last  = Symbol 'last'\n        return PD.$watch { first, last }, ( d ) =>\n          urge 'first' if d is first\n          urge 'last'  if d is last\n      pipeline.push PD.$show()\n      pipeline.push PD.$drain()\n      PD.pull pipeline...\n\n"
  ]
}