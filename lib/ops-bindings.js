// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var KEYS, PD, XE;

  //###########################################################################################################
  // CND                       = require 'cnd'
  // rpr                       = CND.rpr
  // badge                     = '明快打字机/OPS-BINDINGS'
  // debug                     = CND.get_logger 'debug',     badge
  // alert                     = CND.get_logger 'alert',     badge
  // whisper                   = CND.get_logger 'whisper',   badge
  // warn                      = CND.get_logger 'warn',      badge
  // help                      = CND.get_logger 'help',      badge
  // urge                      = CND.get_logger 'urge',      badge
  // info                      = CND.get_logger 'info',      badge
  PD = require('pipedreams');

  KEYS = require('./keys');

  XE = require('./xemitter');

  //===========================================================================================================
  // KEY BINDINGS
  //-----------------------------------------------------------------------------------------------------------
  this._cm_keymap_move = function(cm, editor_method_name, candidates_method) {
    var error;
    try {
      if (!S.focus_is_candidates) {
        return CodeMirror.commands[editor_method_name](cm);
      }
      return candidates_method.apply(this);
    } catch (error1) {
      error = error1;
      alert(`when trying to call \`CodeMirror.commands.${editor_method_name}\`, an error was thrown`);
      throw error;
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT the defaults for cursor moves are taken from
  * public/codemirror/src/edit/commands.js
  * public/codemirror/keymap/sublime.js
  it would be advantageous to derive them somehow from the source or the running instance
   */
  this.move_right = function(cm) {
    return this._cm_keymap_move(cm, 'goCharRight', () => {
      return this._select_delta_candidate({
        lnr: +1
      });
    });
  };

  this.move_left = function(cm) {
    return this._cm_keymap_move(cm, 'goCharLeft', () => {
      return this._select_delta_candidate({
        lnr: -1
      });
    });
  };

  this.move_nxtline_first = function(cm) {
    return this._cm_keymap_move(cm, 'defaultTab', () => {
      return this._select_delta_candidate({
        lcol: 'first',
        lrow: +1
      });
    });
  };

  this.move_prvline_first = function(cm) {
    return this._cm_keymap_move(cm, 'indentLess', () => {
      return this._select_delta_candidate({
        lcol: 'first',
        lrow: -1
      });
    });
  };

  this.move_up = function(cm) {
    return this._cm_keymap_move(cm, 'goLineUp', () => {
      return this.log('######### move_up');
    });
  };

  this.move_down = function(cm) {
    return this._cm_keymap_move(cm, 'goLineDown', () => {
      return this.log('######### move_down');
    });
  };

  this.move_to_home = function(cm) {
    return this._cm_keymap_move(cm, 'goLineStartSmart', () => {
      return this._select_delta_candidate({
        lrow: 0,
        lcol: 'first'
      });
    });
  };

  this.move_to_end = function(cm) {
    return this._cm_keymap_move(cm, 'goLineEnd', () => {
      return this._select_delta_candidate({
        lrow: 0,
        lcol: 'last'
      });
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.set_codemirror_keybindings = function() {
    var mktw_keymap;
    mktw_keymap = {
      'Left': (cm) => {
        return this.move_left(cm);
      },
      'Right': (cm) => {
        return this.move_right(cm);
      },
      'Up': (cm) => {
        return this.move_up(cm);
      },
      'Down': (cm) => {
        return this.move_down(cm);
      },
      'Tab': (cm) => {
        return this.move_nxtline_first(cm);
      },
      'Shift-Tab': (cm) => {
        return this.move_prvline_first(cm);
      },
      'Home': (cm) => {
        return this.move_to_home(cm);
      },
      'End': (cm) => {
        return this.move_to_end(cm);
      },
      'Space': (cm) => {
        return this.select_candidate_or_insert_space(cm);
      },
      'Ctrl-M': (cm) => {
        return this.cm_mark_tsrs();
      },
      'Ctrl-0': (cm) => {
        return this.cm_set_tsrs(0);
      },
      'Ctrl-1': (cm) => {
        return this.cm_set_tsrs(1);
      },
      'Ctrl-2': (cm) => {
        return this.cm_set_tsrs(2);
      },
      'Ctrl-3': (cm) => {
        return this.cm_set_tsrs(3);
      },
      'Ctrl-4': (cm) => {
        return this.cm_set_tsrs(4);
      }
    };
    //.........................................................................................................
    S.codemirror.editor.addKeyMap(mktw_keymap);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.set_codemirror_event_bindings = function() {
    S.codemirror.editor.on('cursorActivity', (cm) => {
      if (!this.is_frozen()) {
        return this.emit_transcribe_event();
      }
    });
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.set_app_keybindings = function() {
    KEYS.bind('alt', this, this.show_or_hide_menu_bar);
    KEYS.bind('shift', this, this.toggle_focusframe);
    KEYS.bind('ctrl+s', this, this.save_document);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.set_xe_event_bindings = function() {
    XE.listen_to_all(this, this.log_almost_all_events);
    XE.listen_to('^candidates', this, this.display_candidates);
    XE.listen_to('^replace-text', this, this.on_replace_text);
    XE.listen_to('^window-resize', this, this.index_candidates);
    XE.listen_to('^window-resize', this, this.adjust_focusframe);
    XE.listen_to('^transcribe', this, this.dispatch_transcribe_event);
    return XE.listen_to('^open-document', this, this.format_tsr_marks);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.set_dom_event_bindings = function() {
    /* TAINT won't work when panes are shifted (probably) */
    return (jQuery(window)).on('resize', () => {
      return XE.emit(PD.new_event('^window-resize'));
    });
  };

}).call(this);

//# sourceMappingURL=ops-bindings.js.map
