// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, PD, S, XE, alert, assign, badge, debug, echo, help, info, jr, log, rpr, urge, warn, whisper;

  /* TAINT consider using e.g. https://www.npmjs.com/package/combokeys */
  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = '明快打字机/KEYS';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  urge = CND.get_logger('urge', badge);

  whisper = CND.get_logger('whisper', badge);

  help = CND.get_logger('help', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  jr = JSON.stringify;

  assign = Object.assign;

  //...........................................................................................................
  PD = require('pipedreams');

  XE = require('./xemitter');

  S = require('./settings');

  //-----------------------------------------------------------------------------------------------------------
  this./* module-global configuration and editor state object */keycodes = require('./blaidddrwg-keycodes');

  //-----------------------------------------------------------------------------------------------------------
  this._preprocess_key_up_or_down_event = (event) => {
    var code, label, name;
    // code      = event.keyCode ? event.which
    code = event.which;
    name = [];
    if (code === 18 || event.altKey) {
      //.........................................................................................................
      name.push('alt');
    }
    if (code === 225 || event.originalEvent.getModifierState("AltGraph")) {
      name.push('altgr');
    }
    if (code === 17 || event.ctrlKey) {
      name.push('ctrl');
    }
    if (code === 20) {
      name.push('capslock');
    }
    if (code === 16 || event.shiftKey) {
      name.push('shift');
    }
    label = this.keycodes.get(code);
    if (label !== 'alt' && label !== 'altgr' && label !== 'ctrl' && label !== 'capslock' && label !== 'shift') {
      name.push(label != null ? label : code);
    }
    name = name.join('+');
    return {name, code};
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$on_key_down = function() {
    return (event) => {
      var d, ref;
      d = this._preprocess_key_up_or_down_event(event);
      if ((ref = d.name) === 'alt' || ref === 'altgr' || ref === 'ctrl' || ref === 'shift' || ref === 'capslock') {
        S.kblevels.prv_down = d.name;
      } else {
        S.kblevels.prv_down = null;
      }
      return null;
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$on_key_up = function() {
    return (event) => {
      var key, prv_down, ref;
      key = this._preprocess_key_up_or_down_event(event);
      prv_down = S.kblevels.prv_down;
      S.kblevels.prv_down = null;
      //.........................................................................................................
      if ((ref = key.name) === 'alt' || ref === 'altgr' || ref === 'ctrl' || ref === 'shift' || ref === 'capslock') {
        if (key.name !== prv_down) {
          return;
        }
      }
      //.........................................................................................................
      XE.emit(PD.new_event('^keyboard', key));
      return true;
    };
  };

  //-----------------------------------------------------------------------------------------------------------
  this.generate_keboard_events = function(jquery_element) {
    jquery_element.on('keydown', this.$on_key_down());
    return jquery_element.on('keyup', this.$on_key_up());
  };

  /*
document.onkeypress = (e) ->
console.log 'µ22982', e
debug 'µ22982', e.keyIdentifier, e.getModifierState
 * cid = parseInt ( e[ 'keyIdentifier' ].replace /^U\+/, '' ), 16
 * cid = 0x3013 if ( CND.type_of cid ) isnt 'number'
 * debug '©sz3Ku', 'keyIdentifier',    e[ 'keyIdentifier'    ], rpr String.fromCodePoint cid
 * debug '©hRgmv', 'getModifierState "Alt"       ', e.getModifierState "Alt"
 * debug '©hRgmv', 'getModifierState "AltGraph"  ', e.getModifierState "AltGraph"
 * debug '©hRgmv', 'getModifierState "CapsLock"  ', e.getModifierState "CapsLock"
 * debug '©hRgmv', 'getModifierState "Control"   ', e.getModifierState "Control"
 * debug '©hRgmv', 'getModifierState "Fn"        ', e.getModifierState "Fn"
 * debug '©hRgmv', 'getModifierState "FnLock"    ', e.getModifierState "FnLock"
 * debug '©hRgmv', 'getModifierState "Hyper"     ', e.getModifierState "Hyper"
 * debug '©hRgmv', 'getModifierState "Meta"      ', e.getModifierState "Meta"
 * debug '©hRgmv', 'getModifierState "NumLock"   ', e.getModifierState "NumLock"
 * debug '©hRgmv', 'getModifierState "OS"        ', e.getModifierState "OS"
 * debug '©hRgmv', 'getModifierState "ScrollLock"', e.getModifierState "ScrollLock"
 * debug '©hRgmv', 'getModifierState "Shift"     ', e.getModifierState "Shift"
 * debug '©hRgmv', 'getModifierState "Super"     ', e.getModifierState "Super"
 * debug '©hRgmv', 'getModifierState "Symbol"    ', e.getModifierState "Symbol"
 * debug '©hRgmv', 'getModifierState "SymbolLock"', e.getModifierState "SymbolLock"
 * return null
 */

}).call(this);

//# sourceMappingURL=keys.js.map
