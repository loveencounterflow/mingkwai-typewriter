{
  "version": 3,
  "file": "keys.js",
  "sourceRoot": "..",
  "sources": [
    "src/keys.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n### TAINT consider using e.g. https://www.npmjs.com/package/combokeys ###\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = '明快打字机/KEYS'\nlog                       = CND.get_logger 'plain',   badge\ninfo                      = CND.get_logger 'info',    badge\nalert                     = CND.get_logger 'alert',   badge\ndebug                     = CND.get_logger 'debug',   badge\nwarn                      = CND.get_logger 'warn',    badge\nurge                      = CND.get_logger 'urge',    badge\nwhisper                   = CND.get_logger 'whisper', badge\nhelp                      = CND.get_logger 'help',    badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\njr                        = JSON.stringify\nassign                    = Object.assign\n#...........................................................................................................\nPD                        = require 'pipedreams'\nXE                        = require './xemitter'\n\n#-----------------------------------------------------------------------------------------------------------\n@keycodes = require './BLAIDDDRWG-keycodes'\n\n#-----------------------------------------------------------------------------------------------------------\n@_preprocess_key_up_or_down_event = ( S, event ) =>\n  # code      = event.keyCode ? event.which\n  code    = event.which\n  name    = []\n  #.........................................................................................................\n  name.push 'alt'       if code is  18  or event.altKey\n  name.push 'altgr'     if code is 225  or event.originalEvent.getModifierState \"AltGraph\"\n  name.push 'ctrl'      if code is  17  or event.ctrlKey\n  name.push 'shift'     if code is  16  or event.shiftKey\n  # name.push 'capslock'  if code is   0\n  label = @keycodes.get code\n  unless label in [ 'alt', 'altgr', 'ctrl', 'shift', ]\n    name.push label ? code\n  name  = name.join '+'\n  #.........................................................................................................\n  move = switch event.type\n    when 'keyup'    then 'up'\n    when 'keydown'  then 'down'\n    else null\n  #.........................................................................................................\n  return { name, code, move, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@$on_key_down = ( S ) -> ( event ) =>\n  # debug 'µ56545', event\n  ### thx to https://stackoverflow.com/a/22029109/7568091 ###\n  oe        = event.originalEvent\n  chr       = oe.key\n  slot      = oe.code\n  #.........................................................................................................\n  location  = switch oe.location\n    when KeyboardEvent.DOM_KEY_LOCATION_STANDARD        then 'standard'\n    when KeyboardEvent.DOM_KEY_LOCATION_LEFT            then 'left'\n    when KeyboardEvent.DOM_KEY_LOCATION_RIGHT           then 'right'\n    when KeyboardEvent.DOM_KEY_LOCATION_NUMPAD          then 'numpad'\n    else null\n  #.........................................................................................................\n  kind = switch slot\n    when 'ArrowUp', 'ArrowDown', 'PageUp', 'PageDown', 'ArrowLeft', 'ArrowRight', 'Home', 'End' then 'navigation'\n    when 'Space', 'Tab', 'Return', 'Enter' then 'spacing'\n    else null\n  #.........................................................................................................\n  axis = switch slot\n    when 'ArrowUp', 'ArrowDown', 'PageUp', 'PageDown'   then 'vertical'\n    when 'ArrowLeft', 'ArrowRight'                      then 'horizontal'\n    when 'Home', 'End'                                  then 'either'\n    else null\n  #.........................................................................................................\n  direction = switch slot\n    when 'ArrowLeft'                                    then 'left'\n    when 'ArrowRight'                                   then 'right'\n    when 'ArrowUp', 'PageUp'                            then 'up'\n    when 'ArrowDown', 'PageDown'                        then 'down'\n    else null\n  #.........................................................................................................\n  ### UIE: User Interaction Event ###\n  uie           = { chr, slot, location, kind, axis, direction, }\n  uie           = assign uie, { S, event, }, ( @_preprocess_key_up_or_down_event S, event )\n  #.........................................................................................................\n  if uie.name in [ 'alt', 'altgr', 'ctrl', 'shift', 'capslock', ] then  S.kblevels.prv_down = uie.name\n  else                                                                  S.kblevels.prv_down = null\n  #.........................................................................................................\n  XE.emit PD.new_event '^uie', uie\n  # return handler uie if ( handler = @_get_key_handler uie )?\n  return null\n\n###\n'ArrowLeft':  [ 'navigation', 'horizontal', 'left' ]\n'ArrowRight': [ 'navigation', 'horizontal', 'right' ]\n'ArrowUp':    [ 'navigation', 'vertical', 'up' ]\n'ArrowDown':  [ 'navigation', 'vertical', 'down' ]\n'PageUp':     [ 'navigation', 'vertical', 'up' ]\n'PageDown':   [ 'navigation', 'vertical', 'down' ]\n'Home':       [ 'navigation', 'vertical', 'horizontal', 'home' ]\n'End':        [ 'navigation', 'vertical', 'horizontal', 'end' ]\n###\n\n#-----------------------------------------------------------------------------------------------------------\n@$on_key_up = ( S ) -> ( event ) =>\n  key = @_preprocess_key_up_or_down_event S, event\n  #.........................................................................................................\n  if key.name in [ 'alt', 'altgr', 'ctrl', 'shift', 'capslock', ] and S.kblevels.prv_down is key.name\n    S.kblevels[ key.name ]  = toggle = not S.kblevels[ key.name ]\n    key.toggle              = if toggle then 'on' else 'off'\n    XE.emit PD.new_event '^kblevel', { S, key, }\n  S.kblevels.prv_down = null\n  #.........................................................................................................\n  XE.emit PD.new_event '^keyboard', { S, key, }\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@$on_other = ( S ) -> ( event ) =>\n  # info '77363', event.type, event.originalEvent.data\n  return true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\nXE.listen_to 'KEYS/kblevels/change', @, ( { S, key, } ) ->\n  whisper 'KEYS/kblevels/change', jr key\n\n# #-----------------------------------------------------------------------------------------------------------\n# XE.listen_to 'KEYS/key/down', @, ( { S, key, } ) ->\n#   whisper 'KEYS/key/down', jr key\n\n# #-----------------------------------------------------------------------------------------------------------\n# XE.listen_to 'KEYS/key/up', @, ( { S, key, } ) ->\n#   whisper 'KEYS/key/up', jr key\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@syphon_key_and_mouse_events = ( S, jquery_element ) ->\n  jquery_element.on 'keydown',            @$on_key_down S\n  jquery_element.on 'keyup',              @$on_key_up   S\n  jquery_element.on 'beforeinput',        @$on_other    S\n  jquery_element.on 'input',              @$on_other    S\n  jquery_element.on 'compositionstart',   @$on_other    S\n  jquery_element.on 'compositionupdate',  @$on_other    S\n  jquery_element.on 'compositionend ',    @$on_other    S\n\n###\n    document.onkeypress = (e) ->\n      cid = parseInt ( e[ 'keyIdentifier' ].replace /^U\\+/, '' ), 16\n      cid = 0x3013 if ( CND.type_of cid ) isnt 'number'\n      debug '©sz3Ku', 'keyIdentifier',    e[ 'keyIdentifier'    ], rpr String.fromCodePoint cid\n      debug '©hRgmv', 'getModifierState \"Alt\"       ', e.getModifierState \"Alt\"\n      debug '©hRgmv', 'getModifierState \"AltGraph\"  ', e.getModifierState \"AltGraph\"\n      debug '©hRgmv', 'getModifierState \"CapsLock\"  ', e.getModifierState \"CapsLock\"\n      debug '©hRgmv', 'getModifierState \"Control\"   ', e.getModifierState \"Control\"\n      debug '©hRgmv', 'getModifierState \"Fn\"        ', e.getModifierState \"Fn\"\n      debug '©hRgmv', 'getModifierState \"FnLock\"    ', e.getModifierState \"FnLock\"\n      debug '©hRgmv', 'getModifierState \"Hyper\"     ', e.getModifierState \"Hyper\"\n      debug '©hRgmv', 'getModifierState \"Meta\"      ', e.getModifierState \"Meta\"\n      debug '©hRgmv', 'getModifierState \"NumLock\"   ', e.getModifierState \"NumLock\"\n      debug '©hRgmv', 'getModifierState \"OS\"        ', e.getModifierState \"OS\"\n      debug '©hRgmv', 'getModifierState \"ScrollLock\"', e.getModifierState \"ScrollLock\"\n      debug '©hRgmv', 'getModifierState \"Shift\"     ', e.getModifierState \"Shift\"\n      debug '©hRgmv', 'getModifierState \"Super\"     ', e.getModifierState \"Super\"\n      debug '©hRgmv', 'getModifierState \"Symbol\"    ', e.getModifierState \"Symbol\"\n      debug '©hRgmv', 'getModifierState \"SymbolLock\"', e.getModifierState \"SymbolLock\"\n\n###\n\n\n###\n\n'key' events\n  * move / flank / gesture\n    * down / press\n    * up / release\n    * hold / repeat (single glyph and DNS only)\n    * on  (toggles only)\n    * off (toggles only)\n  * kind\n    * glyph (printable character)\n      * single\n      * partial (e.g. ´e -> é)\n    * DNS (deletion, navigation, spacing)\n      * deletion (backspace, delete)\n      * navigation (left, right, up, down, page-down, home)\n      * spacing (space, tab, return, enter)\n      * IME (input method e.g. for East Asian languages)\n      * insertion\n      * correction\n      * result\n    * KBL (keyboard levels, a.k.a. modifiers)\n      * chorded (alt, shift, ctrl)\n      * toggles (capslock, numlock, scrolllock, insert)\n\n\n* can we catch all DOM events?\n\n* cursor styling in input field? -> caret-color\n* text input, textarea or contenteditable? -> contenteditable allows styling, so this\n* difference between jquery `.on`, `.on` methods? -> new vs. old\n* does Chrome have a beforeinput event? -> OK with update to Electron 3\n* why is the data attribute not used? -> OK with update to Electron 3\n\n###\n\n\n"
  ]
}