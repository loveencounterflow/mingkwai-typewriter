{
  "version": 3,
  "file": "ops-cm.js",
  "sourceRoot": "..",
  "sources": [
    "src/ops-cm.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B,EAb5B;;;EAeA,EAAA,GAA4B,OAAA,CAAQ,YAAR,EAf5B;;;EAmBA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,CAAF,CAAA;WAAS;MAAE,IAAA,EAAM,CAAC,CAAC,IAAV;MAAgB,EAAA,EAAI,CAAC,CAAC;IAAtB;EAAT,EAnBd;;;EAsBA,IAAC,kCAAA,mBAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;WAAiB,SAAS,CAAC,IAAV,CAAe,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;MACtD,IAAa,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAxB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAxB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAC,CAAC,EAAF,GAAS,CAAC,CAAC,EAAxB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAC,CAAC,EAAF,GAAS,CAAC,CAAC,EAAxB;AAAA,eAAO,CAAC,EAAR;;AACA,aAAQ;IAL8C,CAAf;EAAjB,EAtBxB;;;EA8BA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,KAAF,CAAA,EAAA;;;;;AAKvB,QAAA,CAAA,EAAA;IAAA,CAAE,CAAF,EAAK,CAAL,CAAA,GAAY,IAAC,CAAA,mBAAD,CAAqB,CAAI,IAAC,CAAA,UAAD,CAAY,KAAK,CAAC,MAAlB,CAAJ,EAAkC,IAAC,CAAA,UAAD,CAAY,KAAK,CAAC,IAAlB,CAAlC,CAArB;AACZ,WAAO;MAAE,IAAA,EAAM,CAAR;MAAW,EAAA,EAAI;IAAf;EANgB,EA9BzB;;;;;EA0CA,IAAC,CAAA,aAAD,GAAoC,QAAA,CAAA,CAAA;WAAG,UAAU,CAAC,QAAQ,CAAC,SAApB,CAAqC,CAAC,CAAC,UAAU,CAAC,MAAlD;EAAH;;EACpC,IAAC,CAAA,oBAAD,GAAoC,QAAA,CAAA,CAAA;WAAG,UAAU,CAAC,QAAQ,CAAC,eAApB,CAAqC,CAAC,CAAC,UAAU,CAAC,MAAlD;EAAH;;EACpC,IAAC,CAAA,iBAAD,GAAoC,QAAA,CAAA,CAAA;WAAG,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,cAAxB,CAAA;EAAH;;EACpC,IAAC,CAAA,sBAAD,GAAoC,QAAA,CAAA,CAAA;WAAG,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,aAAxB,CAAA;EAAH;;EACpC,IAAC,CAAA,4BAAD,GAAoC,QAAA,CAAA,CAAA;AAAG,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAA2B;AAAA;IAAA,KAAA,qCAAA;;mBAAzB,IAAC,CAAA,qBAAD,CAAuB,CAAvB;IAAyB,CAAA;;EAA9B,EA9CpC;;;;;;EAmDA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,MAAF,EAAU,KAAV,CAAA;AACb,QAAA;IAAA,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,CAAA,aAAA,CAAA,CAAgB,GAAA,CAAI,MAAJ,CAAhB,CAA2B,EAA3B,CAAA,CAA+B,GAAA,CAAI,KAAJ,CAA/B,CAAA,CAAf;IACA,QAAA,GACE;MAAA,SAAA,EAAgB,KAAhB;MACA,aAAA,EAAgB,IADhB;MAEA,cAAA,EAAgB;IAFhB;AAGF,WAAO,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,QAApB,CAA6B,MAAM,CAAC,IAApC,EAA0C,MAAM,CAAC,EAAjD,EAAqD,QAArD;EANM,EAnDf;;;;;;;;;;EAmEA,IAAC,CAAA,qBAAD,GAAgC,QAAA,CAAE,MAAF,CAAA;WAAiB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,SAApB,CAA8B,MAAM,CAAC,IAArC,EAA2C,MAAM,CAAC,EAAlD;EAAjB;;EAChC,IAAC,CAAA,4BAAD,GAAgC,QAAA,CAAE,MAAF,CAAA;AAAiB,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAA2B;AAAA;IAAA,KAAA,qCAAA;;mBAAvB,IAAC,CAAA,UAAD,CAAY,CAAC,CAAC,IAAF,CAAA,CAAZ;IAAuB,CAAA;;EAA5C;;EAChC,IAAC,CAAA,wBAAD,GAAgC,QAAA,CAAE,QAAF,CAAA;WAAiB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,WAApB,CAAgC,QAAhC;EAAjB;;EAChC,IAAC,CAAA,aAAD,GAA8C,QAAA,CAAA,CAAA;WAAG,IAAC,CAAA,UAAD,CAAY,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,SAApB,CAA8B,MAA9B,CAAZ;EAAH;;EAC9C,IAAC,CAAA,aAAD,GAAgC,QAAA,CAAE,QAAF,CAAA;WAAiB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,SAApB,CAA8B,QAA9B;EAAjB;;EAChC,IAAC,sCAAA,WAAD,GAAgC,QAAA,CAAE,MAAF,CAAA;WAAiB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,QAApB,CAA6B,MAAM,CAAC,IAApC,EAA0C,MAAM,CAAC,EAAjD;EAAjB;;EAChC,IAAC,CAAA,iBAAD,GAAgC,QAAA,CAAE,IAAF,CAAA;WAAiB,IAAC,CAAA,WAAD,CAAa,IAAI,CAAC,IAAL,CAAA,CAAb;EAAjB;;EAChC,IAAC,CAAA,qBAAD,GAAgC,QAAA,CAAE,QAAF,CAAA;WAAiB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,OAApB,CAA4B,QAA5B;EAAjB;;EAChC,IAAC,CAAA,oBAAD,GAAgC,QAAA,CAAE,IAAF,CAAA;WAAiB,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,gBAAxB,CAAyC,IAAzC;EAAjB;;EAChC,IAAC,CAAA,iBAAD,GAAgC,QAAA,CAAE,MAAF,CAAA;WAAiB,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,IAAlB,EAAwB,MAAM,CAAC,EAA/B;EAAjB,EA5EhC;;;EA+EA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAE,MAAF,CAAA;IACX,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,CAAA,WAAA,CAAA,CAAc,GAAA,CAAI,MAAJ,CAAd,CAAA,CAAf;AACA,WAAO,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,YAApB,CAAiC,MAAM,CAAC,IAAxC,EAA8C,MAAM,CAAC,EAArD;EAFI,EA/Eb;;;EAoFA,IAAC,CAAA,4BAAD,GAAgC,QAAA,CAAE,IAAF,CAAA;AAC9B,QAAA,MAAA,EAAA;IAAA,MAAA,GAAS,IAAI,CAAC,IAAL,CAAA;AACT,WAAO;MAAE,IAAA,EAAQ,IAAC,CAAA,UAAD,CAAY,MAAM,CAAC,IAAnB,CAAV;MAAqC,EAAA,EAAM,IAAC,CAAA,UAAD,CAAY,MAAM,CAAC,EAAnB,CAA3C;MAAoE,KAAA,yCAA0B;IAA9F;EAFuB,EApFhC;;;;;EA4FA,IAAC,CAAA,cAAD,GAAkB,QAAA,CAAE,IAAF,CAAA,EAAA;;AAEhB,QAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,QAAA,EAAA;IAAA,MAAA,GAAa,IAAA,KAAQ,CAAX,GAAkB,OAAlB,GAA+B;IACzC,IAAG,MAAA,KAAU,OAAb;MACE,IAAC,CAAA,GAAD,CAAK,UAAL,EAAiB,2BAAjB;AACA,aAAO,KAFT;;IAGA,KAAA,GAAa,MAAA,KAAU,OAAb,GAA0B,CAAC,CAA3B,GAAkC,CAAC;IAC7C,KAAA,GAAU,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA;AACV;IAAA,KAAA,qCAAA;;MACE,IAAA,CAAO,IAAC,CAAA,iBAAD,CAAmB,MAAnB,CAAP;QACE,IAAC,CAAA,GAAD,CAAK,UAAL,EAAiB,kCAAjB;AACA,eAAO,KAFT;;MAGA,IAAC,CAAA,GAAD,CAAK,UAAL,EAAiB,GAAA,CAAI,MAAJ,CAAjB,EAHA;;;;MAOA,aAAA,GAAgB,CAAA,EAAA,CAAA,CAAK,IAAL,CAAU,CAAV;MAChB,KAAA,GAAgB,CAAA,WAAA,CAAA,CAAc,IAAd,CAAA;MAChB,YAAA,GAAgB;QAAE,IAAA,EAAM,MAAM,CAAC,IAAI,CAAC,IAApB;QAA0B,EAAA,EAAM,MAAM,CAAC,IAAI,CAAC,EAAZ,GAAiB,aAAa,CAAC;MAA/D;MAChB,QAAA,GACE;QAAA,SAAA,EAAkB,KAAlB;QACA,MAAA,EAAkB,IADlB;QAEA,aAAA,EAAkB,KAFlB;QAGA,cAAA,EAAkB;MAHlB;MAIF,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,YAApB,CAAiC,aAAjC,EAAgD,MAAM,CAAC,IAAvD;MACA,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,QAApB,CAA6B,MAAM,CAAC,IAApC,EAA0C,YAA1C,EAAwD,QAAxD;IAjBF;IAkBA,CAAC,CAAC,wBAAF,CAAA;AACA,WAAO;EA3BS,EA5FlB;;;EA0HA,IAAC,CAAA,wBAAD,GAA4B,QAAA,CAAA,CAAA;AAC1B,QAAA,KAAA,EAAA;IAAA,IAAA,GAAO,IAAC,CAAA,qBAAD,CAAuB,IAAC,CAAA,aAAD,CAAA,CAAgB,CAAC,IAAxC;IACP,IAAe,IAAI,CAAC,MAAL,KAAe,CAA9B;AAAA,aAAO,KAAP;;IACA,IAAc,iEAAd;AAAA,aAAA;;IACA,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,GAAA,CAAI,KAAK,CAAC,MAAV,CAAf;AACA,WAAO;EALmB,EA1H5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4MA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAA,CAAA;AAId,QAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA;AAAA;;;;IAAA,KAAA,qCAAA;;MACE,IAAG,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,IAAlB,EAAwB,MAAM,CAAC,EAA/B,CAAH;QAA0C,KAAA,GAAQ,IAAC,CAAA,wBAAD,CAA2B,MAAM,CAAC,IAAlC,EAAlD;OAAA,MAAA;QAC0C,KAAA,GAAQ,IAAC,CAAA,qBAAD,CAA2B,MAA3B,EADlD;;MAEA,IAAG,KAAK,CAAC,MAAN,KAAgB,CAAnB;QACE,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,CAAA,yBAAA,CAAA,CAA4B,GAAA,CAAI,MAAJ,CAA5B,CAAA,CAAf,EADF;OAAA,MAAA;QAGE,KAAA,yCAAA;;UACE,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,CAAA,qBAAA,CAAA,CAAwB,GAAA,CAAI,IAAC,CAAA,4BAAD,CAA8B,IAA9B,CAAJ,CAAxB,CAAA,CAAf;UACA,CAAA,CAAE,IAAF,EAAQ,EAAR,EAAY,KAAZ,CAAA,GAAuB,IAAC,CAAA,4BAAD,CAA8B,IAA9B,CAAvB;UACA,IAAI,CAAC,KAAL,CAAA;UACA,KAAA,GAAW,mCAAH,GAAsC,KAAK,CAAC,OAAN,CAAc,eAAd,EAA+B,GAA/B,CAAtC,GAA8E,KAAA,GAAQ;UAC9F,IAAC,CAAA,WAAD,CAAa,CAAE,IAAF,EAAQ,EAAR,CAAb,EAA4B,KAA5B;QALF,CAHF;;IAHF;AAYA,WAAO;EAhBO;AA5MhB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/OPS-CM'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n#...........................................................................................................\nPD                        = require 'pipedreams'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_cm_as_pos = ( x ) -> { line: x.line, ch: x.ch, } ### Unify position-like objects ###\n\n#-----------------------------------------------------------------------------------------------------------\n@_cm_order_positions  = ( positions ) -> positions.sort ( a, b ) ->\n  return -1 if a.line < b.line\n  return +1 if a.line > b.line\n  return -1 if a.ch   < b.ch\n  return +1 if a.ch   > b.ch\n  return  0\n\n#-----------------------------------------------------------------------------------------------------------\n@_cm_fromto_from_range = ( range ) ->\n  ### Given a `range` with `anchor` and `head` properties (which must both be positions, i.e.\n  `{ line, ch, }` objects), return a `{ from, to, }` object where `from` comes always before or coincides\n  with `to` in the document. This is needed to convert an object returned e.g. as selection to an\n  argument that can be used by `markText()`. ###\n  [ p, q, ] = @_cm_order_positions [ ( @_cm_as_pos range.anchor ), ( @_cm_as_pos range.head ), ]\n  return { from: p, to: q, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cm_select_all                    = -> CodeMirror.commands.selectAll        S.codemirror.editor\n@cm_select_only_first             = -> CodeMirror.commands.singleSelection  S.codemirror.editor\n@cm_get_selections                = -> S.codemirror.editor.doc.listSelections()\n@cm_get_selection_texts           = -> S.codemirror.editor.doc.getSelections()\n@cm_get_selections_as_fromtos     = -> ( @_cm_fromto_from_range s for s in @cm_get_selections() )\n# #-----------------------------------------------------------------------------------------------------------\n# @cm_select_only_in_single_line = ->\n\n#-----------------------------------------------------------------------------------------------------------\n@cm_set_mark = ( fromto, clasz ) ->\n  @log 'µ52981', \"@cm_set_mark #{rpr fromto}, #{rpr clasz}\"\n  settings =\n    className:      clasz\n    inclusiveLeft:  true\n    inclusiveRight: true\n  return S.codemirror.editor.markText fromto.from, fromto.to, settings\n\n#-----------------------------------------------------------------------------------------------------------\n# @cm_clear_translation_mark = ->\n#   return 0 unless S.translation_mark?\n#   S.translation_mark.clear()\n#   S.translation_mark = null\n#   return 1\n\n#-----------------------------------------------------------------------------------------------------------\n@cm_get_marks_in_range        = ( fromto    ) -> S.codemirror.editor.findMarks fromto.from, fromto.to\n@cm_get_mark_fromtos_in_range = ( fromto    ) -> ( ( @_cm_as_pos t.find() ) for t in @cm_get_marks_in_position fromto )\n@cm_get_marks_in_position     = ( position  ) -> S.codemirror.editor.findMarksAt position\n@cm_get_cursor                =               -> @_cm_as_pos S.codemirror.editor.getCursor 'head'\n@cm_set_cursor                = ( position  ) -> S.codemirror.editor.setCursor position ### TAINT might want to use options ###\n@cm_get_text                  = ( fromto    ) -> S.codemirror.editor.getRange fromto.from, fromto.to\n@cm_text_from_mark            = ( mark      ) -> @cm_get_text mark.find()\n@cm_text_from_line_idx        = ( line_idx  ) -> S.codemirror.editor.getLine line_idx\n@cm_replace_selection         = ( text      ) -> S.codemirror.editor.doc.replaceSelection text\n@cm_range_is_point            = ( fromto    ) -> CND.equals fromto.from, fromto.to\n\n#-----------------------------------------------------------------------------------------------------------\n@cm_select = ( fromto ) ->\n  @log 'µ53082', \"cm_select: #{rpr fromto}\"\n  return S.codemirror.editor.setSelection fromto.from, fromto.to\n\n#-----------------------------------------------------------------------------------------------------------\n@position_and_clasz_from_mark = ( mark ) ->\n  fromto = mark.find()\n  return { from: ( @_cm_as_pos fromto.from ), to: ( @_cm_as_pos fromto.to ), clasz: ( mark.className ? '' ), }\n\n\n#===========================================================================================================\n# SET TSRs, TRANSCRIPTORS\n#-----------------------------------------------------------------------------------------------------------\n@cm_set_tsrs_NG = ( tsnr ) ->\n  ### Bound to `ctrl+0` ... `ctrl+4` ###\n  action  = if tsnr is 0 then 'clear' else 'set'\n  if action is 'clear'\n    @log 'µ48733-1', \"clear TSR not implemented\"\n    return null\n  delta   = if action is 'clear' then -1 else +1\n  clasz   = \"tsr tsr#{tsnr}\"\n  for fromto in @cm_get_selections_as_fromtos()\n    unless @cm_range_is_point fromto\n      @log 'µ48733-2', \"non-point ranges not implemented\"\n      return null\n    @log 'µ48733-4', rpr fromto\n    ### TAINT use own API ###\n    ### TAINT allow to configure appearance of TSR mark ###\n    # tsr_mark_left = \"[#{S.transcriptors[ tsnr ].display_name}:\"\n    tsr_mark_left = \"🛸#{tsnr}:\"\n    clasz         = \"tsrNG tsrNG#{tsnr}\"\n    fromto_right  = { line: fromto.from.line, ch: ( fromto.from.ch + tsr_mark_left.length ), }\n    settings      =\n      className:        clasz\n      atomic:           true\n      inclusiveLeft:    false\n      inclusiveRight:   false\n    S.codemirror.editor.replaceRange tsr_mark_left, fromto.from\n    S.codemirror.editor.markText fromto.from, fromto_right, settings\n  S.emit_transcribe_event_NG()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@emit_transcribe_event_NG = ->\n  text = @cm_text_from_line_idx @cm_get_cursor().line\n  return null if text.length is 0\n  return unless ( match = text.match /🛸(?<tsnr>[0-9]+):(?<text>[.*?])$/ )?\n  @log 'µ76663', rpr match.groups\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cm_set_tsrs = ( tsnr ) ->\n#   ### Bound to `ctrl+0` ... `ctrl+4` ###\n#   ### TAINT code duplication ###\n#   # @cm_select_only_in_single_line()\n#   # @cm_clear_translation_mark()\n#   action  = if tsnr is 0 then 'clear' else 'set'\n#   delta   = if action is 'clear' then -1 else +1\n#   clasz   = \"tsr tsr#{tsnr}\"\n#   count   = 0\n#   for fromto in @cm_get_selections_as_fromtos()\n#     range_is_point = @cm_range_is_point fromto\n#     if range_is_point then  old_marks = @cm_get_marks_in_position  fromto.from\n#     else                    old_marks = @cm_get_marks_in_range     fromto\n#     for old_mark in old_marks\n#       do ( old_mark ) =>\n#         @log 'µ53183', \"found old mark: #{rpr @position_and_clasz_from_mark old_mark}\"\n#         old_mark.clear()\n#     if action is 'set'\n#       if range_is_point\n#         ### TAINT use own API ###\n#         S.codemirror.editor.replaceRange '\\ue044', fromto.from\n#         fromto1 = { from: fromto.from, to: { line: fromto.from.line, ch: ( fromto.from.ch + 1 ), }, }\n#         @cm_select fromto1\n#         mark    = @cm_set_mark fromto1, clasz\n#       else\n#         ### TAINT trailing newlines, empty lines are probably a bad idea; if CodeMirror would only visibly\n#         mark those, but it doesn't ###\n#         if ( nl_count = ( ( @cm_get_text fromto ).match /(\\n*)$/ )[ 1 ].length ) > 0\n#           @log 'µ53284', \"fromto #{rpr fromto} contains empty lines\"\n#         mark = @cm_set_mark fromto, clasz\n#       ### TAINT this is doing too much work for this case: ###\n#       @emit_transcribe_event()\n#   return count\n\n# #-----------------------------------------------------------------------------------------------------------\n# @emit_transcribe_event = ->\n#   ### Called on CM `CursorActivity`, reads text from current TSR if any, emits XE `^transcribe` ###\n#   # @log 'µ53486', 'cm_find_ts', \"cursor at #{rpr @cm_get_cursor()}\"\n#   marks = @cm_get_marks_in_position @cm_get_cursor()\n#   #.........................................................................................................\n#   if marks.length is 0\n#     S.tsnr          = 0\n#     S.tsr           = null\n#     S.tsr_text      = null\n#     S.transcriptor  = S.transcriptors[ 0 ]\n#   #.........................................................................................................\n#   else\n#     S.transcriptor  = null\n#     ### TAINT this call may crash the app when text marker has length zero ###\n#     try\n#       { clasz\n#         from\n#         to  }         = @position_and_clasz_from_mark marks[ 0 ]\n#     catch error\n#       @log 'µ44774', \"failed when trying to get position, class from mark:\", rpr error.message\n#       return null\n#     S.tsnr          = parseInt ( clasz.replace /^.*\\btsr([0-9]+)\\b.*$/, '$1' ), 10\n#     S.tsnr          = 0 unless CND.isa_number S.tsnr\n#     S.tsr_text      = @cm_text_from_mark marks[ 0 ]\n#     S.transcriptor  = S.transcriptors[ S.tsnr ]\n#     #.......................................................................................................\n#     unless S.transcriptor?\n#       S.tsnr          = 0\n#       S.transcriptor  = S.transcriptors[ S.tsnr ]\n#   #.........................................................................................................\n#   unless S.tsnr is 0\n#     @log 'µ53587', \"TS##{rpr S.tsnr} (#{rpr S.transcriptor.display_name})\"\n#     XE.emit PD.new_event '^transcribe', { text: S.tsr_text, from, to, }\n#   return null\n\n\n#===========================================================================================================\n# DIAGNOSTICS\n#-----------------------------------------------------------------------------------------------------------\n@cm_mark_tsrs = ->\n  ### Currently only used for diagnostics, will toggle CSS class `hilite` on all TSRs the selection is\n  touching when `ctrl+m` is hit ###\n  ### TAINT code duplication ###\n  for fromto in @cm_get_selections_as_fromtos()\n    if CND.equals fromto.from, fromto.to then marks = @cm_get_marks_in_position  fromto.from\n    else                                      marks = @cm_get_marks_in_range     fromto\n    if marks.length is 0\n      @log 'µ53688', \"didn't find any marks at #{rpr fromto}\"\n    else\n      for mark in marks\n        @log 'µ53789', \"found existing mark: #{rpr @position_and_clasz_from_mark mark}\"\n        { from, to, clasz, } = @position_and_clasz_from_mark mark\n        mark.clear()\n        clasz = if ( clasz.match /\\bhilite\\b/ )? then clasz.replace /\\s*hilite\\s*/g, ' ' else clasz + ' hilite'\n        @cm_set_mark { from, to, }, clasz\n  return null\n\n\n\n"
  ]
}