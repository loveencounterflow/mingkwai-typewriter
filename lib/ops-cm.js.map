{
  "version": 3,
  "file": "ops-cm.js",
  "sourceRoot": "..",
  "sources": [
    "src/ops-cm.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B,EAb5B;;;EAeA,EAAA,GAA4B,OAAA,CAAQ,YAAR,EAf5B;;;EAmBA,IAAC,CAAA,UAAD,GAAc,QAAA,CAAE,CAAF,CAAA;WAAS;MAAE,IAAA,EAAM,CAAC,CAAC,IAAV;MAAgB,EAAA,EAAI,CAAC,CAAC;IAAtB;EAAT,EAnBd;;;EAsBA,IAAC,kCAAA,mBAAD,GAAwB,QAAA,CAAE,SAAF,CAAA;WAAiB,SAAS,CAAC,IAAV,CAAe,QAAA,CAAE,CAAF,EAAK,CAAL,CAAA;MACtD,IAAa,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAxB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAC,CAAC,IAAF,GAAS,CAAC,CAAC,IAAxB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAC,CAAC,EAAF,GAAS,CAAC,CAAC,EAAxB;AAAA,eAAO,CAAC,EAAR;;MACA,IAAa,CAAC,CAAC,EAAF,GAAS,CAAC,CAAC,EAAxB;AAAA,eAAO,CAAC,EAAR;;AACA,aAAQ;IAL8C,CAAf;EAAjB,EAtBxB;;;EA8BA,IAAC,CAAA,qBAAD,GAAyB,QAAA,CAAE,KAAF,CAAA,EAAA;;;;;AAKvB,QAAA,CAAA,EAAA;IAAA,CAAE,CAAF,EAAK,CAAL,CAAA,GAAY,IAAC,CAAA,mBAAD,CAAqB,CAAI,IAAC,CAAA,UAAD,CAAY,KAAK,CAAC,MAAlB,CAAJ,EAAkC,IAAC,CAAA,UAAD,CAAY,KAAK,CAAC,IAAlB,CAAlC,CAArB;AACZ,WAAO;MAAE,IAAA,EAAM,CAAR;MAAW,EAAA,EAAI;IAAf;EANgB,EA9BzB;;;;;EA0CA,IAAC,CAAA,oBAAD,GAAoC,QAAA,CAAA,CAAA;WAAG,UAAU,CAAC,QAAQ,CAAC,eAApB,CAAoC,CAAC,CAAC,UAAU,CAAC,MAAjD;EAAH;;EACpC,IAAC,CAAA,iBAAD,GAAoC,QAAA,CAAA,CAAA;WAAG,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,cAAxB,CAAA;EAAH;;EACpC,IAAC,CAAA,4BAAD,GAAoC,QAAA,CAAA,CAAA;AAAG,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAA2B;AAAA;IAAA,KAAA,qCAAA;;mBAAzB,IAAC,CAAA,qBAAD,CAAuB,CAAvB;IAAyB,CAAA;;EAA9B,EA5CpC;;;;;;;;;EAoDA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,QAAF,EAAY,KAAZ,CAAA;AACb,QAAA;IAAA,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,CAAA,SAAA,CAAA,CAAY,GAAA,CAAI,KAAJ,CAAZ,CAAsB,IAAtB,CAAA,CAA4B,GAAA,CAAI,QAAJ,CAA5B,CAAA,CAAf;IACA,QAAA,GACE;MAAA,SAAA,EAAgB,KAAhB;MACA,aAAA,EAAgB,KADhB;MAEA,cAAA,EAAgB;IAFhB;AAGF,WAAO,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,QAApB,CAA6B,QAAQ,CAAC,IAAtC,EAA4C,QAAQ,CAAC,EAArD,EAAyD,QAAzD;EANM,EApDf;;;;;;;;;;EAoEA,IAAC,CAAA,WAAD,GAAe,QAAA,CAAE,IAAF,CAAA;AAGb,QAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA;;;IAAA,KAAA,GAAQ,CAAA,OAAA,CAAA,CAAU,IAAV,CAAA;AACR;IAAA,KAAA,qCAAA;;AACE;MAAA,KAAA,wCAAA;;QACE,IAAC,CAAA,GAAD,CAAK,QAAL,EAAe,CAAA,UAAA,CAAA,CAAa,GAAA,CAAI,QAAJ,CAAb,CAAA,CAAf;MADF;MAEA,CAAC,CAAC,IAAI,CAAC,IAAP,CAAY,IAAC,CAAA,WAAD,CAAa,QAAb,EAAuB,KAAvB,CAAZ;IAHF,CADA;;AAMA,WAAO;EATM;AApEf",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/OPS-CM'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\n#...........................................................................................................\nPD                        = require 'pipedreams'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@_cm_as_pos = ( x ) -> { line: x.line, ch: x.ch, } ### Unify position-like objects ###\n\n#-----------------------------------------------------------------------------------------------------------\n@_cm_order_positions  = ( positions ) -> positions.sort ( a, b ) ->\n  return -1 if a.line < b.line\n  return +1 if a.line > b.line\n  return -1 if a.ch   < b.ch\n  return +1 if a.ch   > b.ch\n  return  0\n\n#-----------------------------------------------------------------------------------------------------------\n@_cm_fromto_from_range = ( range ) ->\n  ### Given a `range` with `anchor` and `head` properties (which must both be positions, i.e.\n  `{ line, ch, }` objects), return a `{ from, to, }` object where `from` comes always before or coincides\n  with `to` in the document. This is needed to convert an object returned e.g. as selection to an\n  argument that can be used by `markText()`. ###\n  [ p, q, ] = @_cm_order_positions [ ( @_cm_as_pos range.anchor ), ( @_cm_as_pos range.head ), ]\n  return { from: p, to: q, }\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@cm_select_only_first             = -> CodeMirror.commands.singleSelection S.codemirror.editor\n@cm_get_selections                = -> S.codemirror.editor.doc.listSelections()\n@cm_get_selections_as_fromtos     = -> ( @_cm_fromto_from_range s for s in @cm_get_selections() )\n### TAINT actually gets one of the selections; maybe rewrite to obtain first in document order ###\n# @cm_get_first_selection_as_fromto = -> @_cm_fromto_from_range @cm_get_selections()[ 0 ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @cm_select_only_in_single_line = ->\n\n#-----------------------------------------------------------------------------------------------------------\n@cm_set_mark = ( position, clasz ) ->\n  @log 'µ34333', \"set mark #{rpr clasz} at #{rpr position}\"\n  settings =\n    className:      clasz\n    inclusiveLeft:  false\n    inclusiveRight: true\n  return S.codemirror.editor.markText position.from, position.to, settings\n\n#-----------------------------------------------------------------------------------------------------------\n# @cm_clear_translation_mark = ->\n#   return 0 unless S.translation_mark?\n#   S.translation_mark.clear()\n#   S.translation_mark = null\n#   return 1\n\n#-----------------------------------------------------------------------------------------------------------\n@cm_set_tsrs = ( tsnr ) ->\n  # @cm_select_only_in_single_line()\n  # @cm_clear_translation_mark()\n  clasz = \"tsr tsr#{tsnr}\"\n  for position in @cm_get_selections_as_fromtos()\n    for textmark in S.codemirror.editor.findMarks position.from, position.to\n      @log 'µ34464', \"textmark: #{rpr textmark}\"\n    S.tsrs.push @cm_set_mark position, clasz\n  # @cm_select_only_first()\n  return 1\n\n\n\n\n"
  ]
}