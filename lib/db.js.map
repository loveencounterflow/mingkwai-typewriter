{
  "version": 3,
  "file": "db.js",
  "sourceRoot": "..",
  "sources": [
    "src/db.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA6B,KAA7B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAf5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiDA,IAAC,CAAA,KAAD,GAAS,QAAA,CAAE,CAAF,EAAA,GAAK,QAAL,CAAA;IACP,KAAA,CAAM,UAAN,EAAkB,CAAlB,EAAqB,QAArB;AACA,WAAO;EAFA;;EAjDT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/DB'\nlog                       = CND.get_logger 'plain',     badge\ndebug                     = CND.get_logger 'debug',     badge\ninfo                      = CND.get_logger 'info',      badge\nwarn                      = CND.get_logger 'warn',      badge\nalert                     = CND.get_logger 'alert',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n#...........................................................................................................\n# db                        =\n#   ### TAINT value should be cast by PTV reader ###\n#   host:       '/var/run/postgresql'\n#   port:       5432\n#   database:   'mojikura'\n#   user:       'mojikura'\n# #...........................................................................................................\n# pool                      = new ( require 'pg' ).Pool db\n# #...........................................................................................................\n# # require './exception-handler'\n# #...........................................................................................................\n# assign                    = Object.assign\n# has_duplicates            = ( x ) -> ( new Set x ).size != x.length\n# last_of                   = ( x ) -> x[ x.length - 1 ]\n# keys_of                   = Object.keys\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @_get_query_object = ( q, settings... ) ->\n#   switch type = CND.type_of q\n#     when 'pod'\n#       return assign {}, q, settings...\n#     when 'text'\n#       text    = q\n#       values  = null\n#     when 'list'\n#       [ text, values..., ] = q\n#     else throw new Error \"expected a text or a list, got a #{type}\"\n#   return assign { text, values, }, settings...\n\n#-----------------------------------------------------------------------------------------------------------\n@query = ( q, settings... ) ->\n  debug 'DB.query', q, settings\n  return []\n\n#   ### TAINT since this method uses `pool.query`, transactions across more than a single call will fail.\n#   See https://node-postgres.com/features/transactions. ###\n#   #.........................................................................................................\n#   ### `result` is a single object with some added data or a list of such objects in the case of a multiple\n#   query; we reduce the latter to the last item: ###\n#   try\n#     result = await pool.query @_get_query_object q, settings...\n#   catch error\n#     warn \"an exception occurred when trying to query #{rpr db} using\"\n#     warn q\n#     throw error\n#   #.........................................................................................................\n#   result = if CND.isa_list result then ( last_of result ) else result\n#   #.........................................................................................................\n#   ### We return an empty list in case the query didn't return anything: ###\n#   return [] unless result?\n#   #.........................................................................................................\n#   ### We're only interested in the list of rows; again, if that list is empty, or it's a list of lists\n#   (when `rowMode: 'array'` was set), we're done: ###\n#   R = result.rows\n#   return [] if R.length is 0\n#   return R if CND.isa_list R[ 0 ]\n#   #.........................................................................................................\n#   ### Otherwise, we've got a non-empty list of row objects. If the query specified non-unique field names,\n#   than like field names will clobber each other. To avoid silent failure, we chack for duplicates and\n#   matching lengths of metadata and actual rows: ###\n#   keys = ( field.name for field in result.fields )\n#   #.........................................................................................................\n#   if ( has_duplicates keys ) or ( keys.length != ( keys_of R[ 0 ] ).length )\n#     error       = new Error \"detected duplicate fieldnames: #{rpr keys}\"\n#     error.code  = 'fieldcount mismatch'\n#     throw error\n#   #.........................................................................................................\n#   return ( assign {}, row for row in R )\n\n# #-----------------------------------------------------------------------------------------------------------\n# @query_lists = ( q, settings... ) ->\n#   return await @query q, { rowMode: 'array', }, settings...\n\n# #-----------------------------------------------------------------------------------------------------------\n# @query_one = ( q, settings... ) ->\n#   rows = await @query q, settings...\n#   throw new Error \"expected exactly one result row, got #{rows.length}\" unless rows.length is 1\n#   return rows[ 0 ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @query_one_list = ( q, settings... ) ->\n#   return await @query_one q, { rowMode: 'array', }, settings...\n\n# #-----------------------------------------------------------------------------------------------------------\n# @query_single = ( q, settings... ) ->\n#   R = await @query_one_list q, settings...\n#   throw new Error \"expected row with single value, got on with #{rows.length} values\" unless R.length is 1\n#   return R[ 0 ]\n\n# #-----------------------------------------------------------------------------------------------------------\n# @perform = ( q, settings... ) ->\n#   { text, values, } = @_get_query_object q\n#   lego  = ''\n#   lego += 'ð' while ( text.indexOf lego ) >= 0\n#   text += ';' unless text.endsWith ';'\n#   text  = \"do $#{lego}$ begin perform #{text} end; $#{lego}$;\"\n#   return await @query { text, values, }, settings...\n\n\n\n# ############################################################################################################\n# unless module.parent?\n#   DB = @\n#   do ->\n#     info '01', await DB.query        'select 42 as a, 108 as b;'\n#     info '02', await DB.query_one    'select 42 as a, 108 as b;'\n#     info '03', await DB.query_lists  'select 42 as a, 108 as b;'\n#     help '------------------------------------------------------------------------------------------'\n#     try\n#       info '04', await DB.query        'select 42, 108;'\n#     catch error\n#       throw error unless error.code is 'fieldcount mismatch'\n#       warn error.message\n#     help '------------------------------------------------------------------------------------------'\n#     info '05', await DB.query            'select 42, 108;', rowMode: 'array'\n#     info '06', await DB.query_lists      'select 42, 108;'\n#     info '07', await DB.query_one_list   'select 42, 108;'\n#     info '08', await DB.query_single     'select 42;'\n#     help '------------------------------------------------------------------------------------------'\n#     info '09', await DB.query            'select 42; select 108;'\n#     info '10', await DB.query            'do $$ begin perform log( $a$helo$a$ ); end; $$;'\n#     info '11', await DB.perform          'log( $$helo$$ );'\n#     info '12', await DB.perform          'log( $ððð$helo$ððð$ );'\n\n\n\n"
  ]
}